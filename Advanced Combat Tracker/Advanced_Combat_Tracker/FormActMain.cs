namespace Advanced_Combat_Tracker
{
    using Advanced_Combat_Tracker.Properties;
    using GammaJul.LgLcd;
    using ICSharpCode.SharpZipLib;
    using ICSharpCode.SharpZipLib.Zip;
    using ICSharpCode.SharpZipLib.Zip.Compression;
    using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
    using ListViewXP_Style;
    using Microsoft.CSharp;
    using Microsoft.JScript;
    using Microsoft.VisualBasic;
    using Microsoft.Win32;
    using System;
    using System.CodeDom.Compiler;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Data.Odbc;
    using System.Diagnostics;
    using System.Drawing;
    using System.Drawing.Drawing2D;
    using System.Drawing.Imaging;
    using System.Drawing.Text;
    using System.Globalization;
    using System.IO;
    using System.Media;
    using System.Net;
    using System.Net.Sockets;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;
    using System.Speech.Synthesis;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Web;
    using System.Windows.Forms;
    using System.Xml;
    using WMPLib;

    public class FormActMain : Form
    {
        internal Thread actFileThread;
        private volatile bool actFileThreadAlive;
        private SortedList<string, CustomTrigger> activeCustomTriggers = new SortedList<string, CustomTrigger>();
        private ZoneData activeZone;
        private CombatActionDelegate AfterCombatAction;
        private DirectoryInfo appDataFolder;
        private ToolStripMenuItem appendCellToolStripMenuItem;
        private ToolStripMenuItem appendCellToolStripMenuItem1;
        private ToolStripMenuItem appendCellToolStripMenuItem2;
        private ToolStripMenuItem appendCellToolStripMenuItem3;
        private ToolStripMenuItem appendCellToolStripMenuItem4;
        private ToolStripMenuItem appendNewlineToolStripMenuItem;
        private ToolStripMenuItem avoidanceReportToolStripMenuItem;
        private ToolStripMenuItem avoidanceReportToolStripMenuItem1;
        private ClipboardEventDelegate BeforeClipboardSet;
        private CombatActionDelegate BeforeCombatAction;
        private LogLineEventDelegate BeforeLogLineRead;
        private Button btnAddPluginPanel;
        private Button btnAddTrigger;
        private Button btnCDSearch;
        private Button btnCheckVer;
        private Button btnClear;
        private Button btnDeleteChecked;
        private Button btnEndEnc;
        private Button btnFeedbackSubmit;
        private Button btnHistoryDelete;
        private Button btnMergeChecked;
        private Button btnNavBack;
        private Button btnOptionSearchClear;
        private Button btnPluginBrowse;
        private Button btnRecordsDelete;
        private Button btnRecordSearchDateTime;
        private Button btnRecordSearchText;
        private Button btnRecordsImport;
        private Button btnRecordsSelectEncs;
        private Button btnRecordsSelectZones;
        private Button btnRefresh;
        private Button btnRemoveTrigger;
        private Button btnSndTriggerBrowse;
        private Button btnSndTriggerPlay;
        private ToolStripMenuItem calculateSpellTimerToolStripMenuItem;
        internal CheckBox cbAutoCheck;
        private CheckBox cbbMiniParse;
        private CheckBox cbbShowTimers;
        private CheckBox cbFeedbackLogs;
        private CheckBox cbLockDG;
        private CheckBox cbRecordSearchEncs;
        private CheckBox cbRecordSearchZones;
        private CheckBox cbRecordsSave;
        private CheckBox cbShowChecks;
        private CheckBox cbTriggerCategoryRestrict;
        private CheckBox cbTriggerTabbed;
        private CheckBox cbTriggerTimer;
        private string cellClipboard = string.Empty;
        private Regex characterFileNameRegex = new Regex(@".+\\eq2log_([^ \.\d]+).*\.txt", RegexOptions.Compiled);
        private Icon cIcon;
        private CheckedListBox clbRecordResults;
        private Thread clipConnectThread;
        private NetworkStream clipNetStream;
        private List<string> clipReadBuffer = new List<string>();
        private Thread clipReadThread;
        private TcpClient clipTcpClient;
        private XmlTextWriter clipXmlWriter;
        private List<ListViewItem> cListViewItems = new List<ListViewItem>();
        private ToolStripMenuItem cmiEnabled;
        private MenuItem cmiRtbCopy;
        private MenuItem cmiRtbCut;
        private MenuItem cmiRtbDelete;
        private MenuItem cmiRtbPaste;
        private MenuItem cmiRtbSelect;
        private ToolStripTextBox cmitbRenameEnc;
        private ContextMenu cmRtbEdit;
        private ContextMenuStrip cmsATSort;
        private ContextMenuStrip cmsCDSort;
        private ContextMenuStrip cmsCustomTrigger;
        private ContextMenuStrip cmsEDSort;
        private ContextMenuStrip cmsEList;
        private ContextMenuStrip cmsGraph;
        private ContextMenuStrip cmsMDSort;
        private ContextMenuStrip cmsTableSetup;
        private ContextMenuStrip cmsTView;
        private IContainer components;
        private ToolStripMenuItem copyAsCSVToolStripMenuItem;
        private ToolStripMenuItem copyAsCSVToolStripMenuItem1;
        private ToolStripMenuItem copyAsCSVToolStripMenuItem2;
        private ToolStripMenuItem copyAsCSVToolStripMenuItem3;
        private ToolStripMenuItem copyAsFormattedPlainTextToolStripMenuItem;
        private ToolStripMenuItem copyAsFormattedPlainTextToolStripMenuItem1;
        private ToolStripMenuItem copyAsFormattedPlainTextToolStripMenuItem2;
        private ToolStripMenuItem copyAsFormattedPlainTextToolStripMenuItem3;
        private ToolStripMenuItem copyAsFormattedPlainTextToolStripMenuItem4;
        private ToolStripMenuItem copyAsHTMLToolStripMenuItem;
        private ToolStripMenuItem copyAsHTMLToolStripMenuItem1;
        private ToolStripMenuItem copyAsHTMLToolStripMenuItem2;
        private ToolStripMenuItem copyAsHTMLToolStripMenuItem3;
        private ToolStripMenuItem copyAsSharableXMLToolStripMenuItem;
        private ToolStripMenuItem copyAsSharableXMLToolStripMenuItem2;
        private ToolStripMenuItem copyAsXMLToolStripMenuItem;
        private ToolStripMenuItem copyAsXMLToolStripMenuItem1;
        private ToolStripMenuItem copyAsXMLToolStripMenuItem2;
        private ToolStripMenuItem copyAsXMLToolStripMenuItem3;
        private ToolStripMenuItem copyCellToolStripMenuItem;
        private ToolStripMenuItem copyCellToolStripMenuItem1;
        private ToolStripMenuItem copyCellToolStripMenuItem2;
        private ToolStripMenuItem copyCellToolStripMenuItem3;
        private ToolStripMenuItem copyCellToolStripMenuItem4;
        private ToolStripMenuItem copyToolStripMenuItem;
        internal FileStream curHtmFs;
        private long curLogPos;
        private int currentLcdMode = -1;
        private object currentTable = new ArrayList();
        private string currentZone = "Unknown Zone";
        private SortedList<string, CustomTrigger> customTriggers = new SortedList<string, CustomTrigger>();
        private ToolStripMenuItem deathReportToolStripMenuItem;
        private Stream debugFile;
        private TextExportFormatOptions defaultPersonalTextFormat = new TextExportFormatOptions("{n}Your Damage: {DAMAGE-k}K{n}DPS: {ENCDPS}{t}{damage%} Crit: {crithit%}{n}HPS: {ENCHPS}{t}{healed%} Crit: {critheal%}{n}H Hit: {maxhit}{n}H Heal: {maxhealward}{n}K: {kills}  D: {deaths}  Cures: {cures}{n}{n}", "EncDPS", true, true, "Duration: {duration} DPS: {DPS-k}K");
        private TextExportFormatOptions defaultTextFormat = new TextExportFormatOptions("{n}{NAME5} | {ENCDPS}", "EncDPS", true, true, "({duration}) {title}: {ENCDPS} {maxhit}");
        private ToolStripMenuItem deleteToolStripMenuItem;
        private DateTimePicker dtRecordEndDate;
        private DateTimePicker dtRecordEndTime;
        private DateTimePicker dtRecordStartDate;
        private DateTimePicker dtRecordStartTime;
        private static StreamWriter dW;
        private SortedList<DateTime, HistoryRecord> encDatabase = new SortedList<DateTime, HistoryRecord>();
        private List<SampleData> eSDataList = new List<SampleData>();
        private ToolStripMenuItem exportCustomToClipboardToolStripMenuItem;
        private ToolStripMenuItem exportCustomToMacroFileToolStripMenuItem;
        private int exportEdIndex;
        private int exportError = -1;
        private Thread exportThread;
        private volatile bool exportThreadAlive;
        private ToolStripMenuItem exportToClipboardToolStripMenuItem;
        private ToolStripMenuItem exportToEQ2HTMLToolStripMenuItem;
        private ToolStripMenuItem exportToMacroFileToolStripMenuItem;
        private int exportZdIndex;
        private Thread feedbackConnectThread;
        private NetworkStream feedbackNetStream;
        private StreamWriter feedbackStream;
        private TcpClient feedbackTcpClient;
        private FlowLayoutPanel flowLayoutPanel1;
        private FlowLayoutPanel flpIoControls;
        private FlowLayoutPanel flpOptionControls;
        internal DirectoryInfo folderAct;
        internal DirectoryInfo folderActfiles;
        internal DirectoryInfo folderExports;
        internal DirectoryInfo folderLogs;
        internal DirectoryInfo folderMedia;
        private Font fontTabulation = new Font("Verdana", 14f);
        internal EncounterData formatPreviewEnc;
        private string formatTagCap1 = "{";
        private string formatTagCap2 = "}";
        private string gameFolder = string.Empty;
        private GroupBox gbAbout;
        private GroupBox gbHelp;
        private GroupBox gbIoHelp;
        public AttackTypeGraphGenerator GenerateAttackTypeGraph;
        public CombatantGraphGenerator GenerateCombatantGraph;
        public DamageTypeGraphGenerator GenerateDamageTypeGraph;
        public EncounterGraphGenerator GenerateEncounterGraph;
        public DateTimeLogParser GetDateTimeFromLog;
        private int globalTicks;
        private int globalTimeSorter;
        private Thread graphingThread;
        private volatile bool graphingThreadAlive;
        private GroupBox groupBox14;
        private GroupBox groupBox27;
        private GroupBox groupBox3;
        private GroupBox groupBox4;
        private GroupBox groupBox5;
        private Splitter hSplit;
        private DirectoryInfo htmlDir;
        internal List<EncounterHTMLEntry> htmlEntries = new List<EncounterHTMLEntry>();
        internal int htmlIndex;
        internal int htmlStartIndex = 1;
        private int idleCounter;
        private List<int> iListViewItems = new List<int>();
        private ImageList ilSorting;
        private ImageList ilTriggerTabs;
        internal FileStream importStream;
        internal Thread importThread;
        internal volatile bool importThreadAlive;
        private volatile bool inCombat;
        internal FileStream indexFs;
        private Dictionary<string, List<Control>> ioControlSets = new Dictionary<string, List<Control>>();
        internal IO_ExportAct ioExportAct = new IO_ExportAct();
        internal IO_ExportHtml ioExportHtml = new IO_ExportHtml();
        internal IO_ImportAct ioImportAct = new IO_ImportAct();
        internal IO_ImportClip ioImportClip = new IO_ImportClip();
        internal IO_ImportLog ioImportLog = new IO_ImportLog();
        internal IO_Odbc ioOdbc = new IO_Odbc();
        internal IO_XmlFile ioXmlFile = new IO_XmlFile();
        private Label label19;
        private Label label24;
        private Label label4;
        private Label label40;
        private Label label5;
        private Label label7;
        private Label label72;
        private Label label73;
        private Label label74;
        private Label label75;
        private Label label76;
        private Label label90;
        private Label label91;
        private DateTime lastEstimatedTime = DateTime.Now;
        private volatile bool lastEstimatedUpdated;
        private DateTime lastHostileTime = DateTime.MinValue;
        private DateTime lastKnownTime = DateTime.Now;
        private string lastLogLine = string.Empty;
        private TreeNode lastSelectedNode;
        internal string lastSql = string.Empty;
        private string lastTooltip = string.Empty;
        private HistoryRecord lastZoneRecord;
        private ListBox lbGraph;
        private Label lblDG;
        private Label lblGraphList;
        internal Label lblHelpText;
        internal Label lblIoHelp;
        private Label lblPluginFileInfo;
        private Label lblVersion;
        private LcdButtonPressedEventDelegate LcdButtonPressed;
        private Bitmap lcdColorSplash;
        internal LcdDevice lcdDevice;
        private volatile bool lcdDeviceSet;
        internal LcdDeviceType lcdDeviceType;
        private LcdApplet lcdHandle;
        private int lcdMiniModeIndex = -1;
        private Bitmap lcdMonoSplash;
        private LcdUpdateEventDelegate LcdUpdate;
        private AutoResetEvent lcdWaitForDevice = new AutoResetEvent(false);
        private int lcdYOffset;
        private LinkLabel linkEmail;
        private LinkLabel linkLabelAppData;
        private LinkLabel linkLabelGetPlugins;
        private LinkLabel linkRegex;
        private LinkLabel linkURL;
        private const string locCold = "Cold";
        private const string locCrushing = "Crushing";
        private const string locDisease = "Disease";
        private const string locDivine = "Divine";
        private const string locHeat = "Heat";
        private const string locMagic = "Magic";
        private const string locMental = "Mental";
        private const string locPiercing = "Piercing";
        private const string locPoison = "Poison";
        private const string locSlashing = "Slashing";
        private string logActiveText = string.Empty;
        private Encoding logEncoding = Encoding.UTF8;
        private DirectoryInfo logfileBaseFolder;
        private LogFileChangedDelegate LogFileChanged;
        private string logFileFilter = "eq2log*.txt";
        private string logFileParentFolderName = "logs";
        private string logFilePath = string.Empty;
        private bool logPathHasCharName = true;
        private FileStream logStream;
        private const string logTimeStampRegexStr = @"\(\d{10}\)\[.{24}\] ";
        private ToolStripMenuItem lookupByCombatantToolStripMenuItem;
        internal ListViewXP lvDG;
        private MonthCalendar mcRecords;
        private MenuItem menuItem1;
        private MenuItem menuItem54;
        private bool minimizeOnStart;
        private Bitmap minusB;
        private Icon nIcon;
        private bool noLoad;
        internal NotifyIcon notifyIcon1;
        private NumericUpDown nudHistoryDelete;
        private Thread odbcThread;
        private volatile bool odbcThreadAlive;
        private long oldLogPos;
        private CombatToggleEventDelegate OnCombatEnd;
        private CombatToggleEventDelegate OnCombatStart;
        private LogLineEventDelegate OnLogLineRead;
        internal Options_ColorGraphing opColorGraphing = new Options_ColorGraphing();
        internal Options_ColorMisc opColorMisc = new Options_ColorMisc();
        internal Options_ColorUserInterface opColorUserInterface = new Options_ColorUserInterface();
        internal Options_DataCorrectionMisc opDataCorrectionMisc = new Options_DataCorrectionMisc();
        internal Options_DataCorrectionRedirect opDataCorrectionRedirect = new Options_DataCorrectionRedirect();
        internal Options_DataCorrectionRename opDataCorrectionRename = new Options_DataCorrectionRename();
        internal Options_EncCulling opEncCulling = new Options_EncCulling();
        internal Options_FileHTML opFileHTML = new Options_FileHTML();
        internal Options_Graphing opGraphing = new Options_Graphing();
        internal Options_ImportExport opImportExport = new Options_ImportExport();
        internal Options_LcdColor opLcdColor = new Options_LcdColor();
        internal Options_LcdGeneral opLcdGeneral = new Options_LcdGeneral();
        internal Options_LcdMono opLcdMono = new Options_LcdMono();
        internal Options_MainTableGen opMainTableGen = new Options_MainTableGen();
        internal Options_MiniParse opMiniParse = new Options_MiniParse();
        internal Options_Misc opMisc = new Options_Misc();
        internal Options_Odbc opOdbc = new Options_Odbc();
        internal Options_SelectiveParsing opSelectiveParsing = new Options_SelectiveParsing();
        internal Options_Sound opSound = new Options_Sound();
        internal Options_TableAttackType opTableAttackType = new Options_TableAttackType();
        internal Options_TableCombatant opTableCombatant = new Options_TableCombatant();
        internal Options_TableDamageType opTableDamageType = new Options_TableDamageType();
        internal Options_TableEnc opTableEncounter = new Options_TableEnc();
        internal Options_TableZone opTableZone = new Options_TableZone();
        internal Options_TextExports opTextExports = new Options_TextExports();
        private Dictionary<string, List<Control>> optionsControlSets = new Dictionary<string, List<Control>>();
        internal Options_WebServer opWebServer = new Options_WebServer();
        internal Options_XmlShare opXmlShare = new Options_XmlShare();
        internal Options_XmlSubs opXmlSubs = new Options_XmlSubs();
        private Panel panel14;
        private Panel panel15;
        private Panel panel8;
        private PictureBox pbDG;
        private PictureBox pbPaypal;
        private Panel pCList;
        private Panel pDG;
        private Panel pGraphing;
        public PlaySoundDelegate PlaySoundMethod;
        private Panel pLeftView;
        private List<ActPluginData> plugins = new List<ActPluginData>();
        private Bitmap plusB;
        private Panel pPluginInfos;
        private Panel pRightView;
        private Panel pTv;
        private Panel pTvBtns;
        private RadioButton rbSndTriggerBeep;
        private RadioButton rbSndTriggerNone;
        private RadioButton rbSndTriggerTTS;
        private RadioButton rbSndTriggerWAV;
        private Thread readThread;
        internal bool readThreadAborting;
        private volatile bool readThreadAlive;
        internal bool readThreadDataAvailable = true;
        private bool readThreadLock;
        private volatile bool rebuildActiveCustomTriggers;
        private volatile bool rebuildCustomTriggerTreeView;
        private List<HistoryRecord> recordResults = new List<HistoryRecord>();
        internal SortedList<string, RedirectFix> redirectList = new SortedList<string, RedirectFix>();
        private int refreshCurGraphTicks;
        private int refreshCurOdbcTicks;
        private ToolStripMenuItem refreshToolStripMenuItem;
        private ToolStripMenuItem refreshToolStripMenuItem1;
        private ToolStripMenuItem refreshToolStripMenuItem2;
        private ToolStripMenuItem refreshToolStripMenuItem3;
        private ToolStripMenuItem refreshToolStripMenuItem4;
        private ToolStripMenuItem refreshToolStripMenuItem5;
        private volatile bool refreshTree = true;
        private Regex regexFormatTag = new Regex("{(?<formatter>[^}:]+)(?::(?<extra>[^}]+))?}|(?<text>[^{]+)", RegexOptions.Compiled);
        private List<string> registeredLcdModes = new List<string>();
        internal SortedList<string, RenameFix> renameList = new SortedList<string, RenameFix>();
        private ToolStripMenuItem renameToolStripMenuItem;
        private bool resizeColumns;
        private RichTextBox rtbFeedback;
        private RichTextBox rtbPluginInfo;
        private ToolStripMenuItem saveAsToolStripMenuItem;
        private List<OldSearchHighlight> searchHighlighted = new List<OldSearchHighlight>();
        private bool selectiveListRebuild;
        private ToolStripMenuItem selectThisActionInViewLogsToolStripMenuItem;
        private ToolStripMenuItem setEncounterAlliesToolStripMenuItem;
        private Regex shareRegex = new Regex("\\(.{36}\\] \\\\aPC -?\\d+ [^:]+:(?<player>[^\\\\]+)\\\\/a [^\"]+\"(?<xml><(?<type>Spell|Trigger) .+/>)\"", RegexOptions.Compiled);
        private ToolStripMenuItem specialAttacksReportToolStripMenuItem;
        private Splitter splitter1;
        private Splitter splitter2;
        private List<SampleData> sSDataList = new List<SampleData>();
        internal SortedDictionary<string, XmlShareEntry> subEntries = new SortedDictionary<string, XmlShareEntry>();
        private bool suppressStartupWizardQuestion;
        private volatile bool switchToLogLabel;
        private TableLayoutPanel tableLayoutPanel10;
        private TableLayoutPanel tableLayoutPanel11;
        private TableLayoutPanel tableLayoutPanel12;
        private TableLayoutPanel tableLayoutPanel8;
        private TableLayoutPanel tableLayoutPanel9;
        private string tableType = string.Empty;
        internal TabPage tabPage0;
        internal TabPage tabPage1;
        private TextBox tbClipboard;
        private TextBox tbFeedbackEmail;
        private TextBox tbOptionsSearch;
        private TextBox tbPluginPath;
        private TextBox tbRecordSearchText;
        private TextBox tbSndTrigger;
        private TextBox tbTriggerCategory;
        private TextBox tbTriggerText;
        private TextBox tbTriggerTimer;
        internal TabControl tc1;
        private TabControl tcPlugins;
        private TabControl tcTriggers;
        private List<TextExportFormatOptions> textExportFormats = new List<TextExportFormatOptions>();
        private Thread threadCheckFiles;
        internal FileStream timerHtmFs;
        private Thread timersServerThread;
        private int timeStampLen = 0x27;
        internal System.Windows.Forms.Timer tmrTen;
        internal System.Windows.Forms.Timer tmrTenths;
        internal System.Windows.Forms.Timer tmrTick;
        private ToolStripMenuItem toolStripMenuItem1;
        private ToolStripMenuItem toolStripMenuItem2;
        private ToolStripMenuItem toolStripMenuItem3;
        private ToolStripMenuItem toolStripMenuItem4;
        private ToolStripSeparator toolStripSeparator1;
        private ToolStripSeparator toolStripSeparator2;
        private ToolStripSeparator toolStripSeparator3;
        private ToolStripSeparator toolStripSeparator4;
        private ToolStripSeparator toolStripSeparator5;
        private ToolStripSeparator toolStripSeparator6;
        private ToolStripSeparator toolStripSeparator7;
        private ToolTip toolTip1;
        internal TabPage tpAbout;
        internal TabPage tpHistory;
        private TabPage tpImportExport;
        internal TabPage tpMain;
        internal TabPage tpOptions;
        internal TabPage tpPlugins;
        internal TabPage tpTriggers;
        private Dictionary<string, LocalizationObject> Trans = ActGlobals.ActLocalization.LocalizationStrings;
        private volatile bool triggerOpenLog;
        private ToolTip tt1 = new ToolTip();
        private ToolTipGrid ttg = new ToolTipGrid();
        private ToolTip ttGraphList = new ToolTip();
        private TreeView tvCustomTriggers;
        internal TreeView tvDG;
        private TreeView tvIo;
        private TreeView tvOptions;
        private NullDelegate UpdateCheckClicked;
        private volatile bool updateDataGrid;
        private volatile bool updateEncGraph;
        private UrlRequestEventDelegate UrlRequest;
        private CultureInfo usCulture = new CultureInfo("en-US");
        private ToolStripMenuItem viewEncounterVCRToolStripMenuItem;
        private ToolStripMenuItem viewLogsToolStripMenuItem;
        private ToolStripMenuItem viewTimelineToolStripMenuItem;
        private Splitter vSplit;
        private WebBrowser webBrowser1;
        private List<ActWebConnection> webConnections = new List<ActWebConnection>();
        public List<WebIndexLink> WebIndexLinks = new List<WebIndexLink>(new WebIndexLink[] { new WebIndexLink("/current", "Current Encounter Table", "Any encounter currently active can be found here. Page will refresh every 5 seconds."), new WebIndexLink("/mini", "Current Mini Window Text", "The Mini Window text-only display of the current encounter. Page will refresh every 5 seconds."), new WebIndexLink("/browse", "Browse ACT's Encounter Data", "Browse through all of the tables that ACT currently has in memory."), new WebIndexLink("/timers", "Timers Window Table", "View a table of spell timers ACT is currently tracking.  Page will refresh every 2 seconds.") });
        internal SettingsSerializer xmlSettings;
        private Regex zoneChangeRegex = new Regex(@"\(\d{10}\)\[.{24}\] You have entered (?::.+?:)?(?<zone>.+)\.", RegexOptions.Compiled);
        private SortedList<DateTime, HistoryRecord> zoneDatabase = new SortedList<DateTime, HistoryRecord>();
        private List<ZoneData> zoneList = new List<ZoneData>();

        public event CombatActionDelegate AfterCombatAction
        {
            add
            {
                CombatActionDelegate delegate3;
                CombatActionDelegate afterCombatAction = this.AfterCombatAction;
                do
                {
                    delegate3 = afterCombatAction;
                    CombatActionDelegate delegate4 = (CombatActionDelegate) Delegate.Combine(delegate3, value);
                    afterCombatAction = Interlocked.CompareExchange<CombatActionDelegate>(ref this.AfterCombatAction, delegate4, delegate3);
                }
                while (afterCombatAction != delegate3);
            }
            remove
            {
                CombatActionDelegate delegate3;
                CombatActionDelegate afterCombatAction = this.AfterCombatAction;
                do
                {
                    delegate3 = afterCombatAction;
                    CombatActionDelegate delegate4 = (CombatActionDelegate) Delegate.Remove(delegate3, value);
                    afterCombatAction = Interlocked.CompareExchange<CombatActionDelegate>(ref this.AfterCombatAction, delegate4, delegate3);
                }
                while (afterCombatAction != delegate3);
            }
        }

        public event ClipboardEventDelegate BeforeClipboardSet
        {
            add
            {
                ClipboardEventDelegate delegate3;
                ClipboardEventDelegate beforeClipboardSet = this.BeforeClipboardSet;
                do
                {
                    delegate3 = beforeClipboardSet;
                    ClipboardEventDelegate delegate4 = (ClipboardEventDelegate) Delegate.Combine(delegate3, value);
                    beforeClipboardSet = Interlocked.CompareExchange<ClipboardEventDelegate>(ref this.BeforeClipboardSet, delegate4, delegate3);
                }
                while (beforeClipboardSet != delegate3);
            }
            remove
            {
                ClipboardEventDelegate delegate3;
                ClipboardEventDelegate beforeClipboardSet = this.BeforeClipboardSet;
                do
                {
                    delegate3 = beforeClipboardSet;
                    ClipboardEventDelegate delegate4 = (ClipboardEventDelegate) Delegate.Remove(delegate3, value);
                    beforeClipboardSet = Interlocked.CompareExchange<ClipboardEventDelegate>(ref this.BeforeClipboardSet, delegate4, delegate3);
                }
                while (beforeClipboardSet != delegate3);
            }
        }

        public event CombatActionDelegate BeforeCombatAction
        {
            add
            {
                CombatActionDelegate delegate3;
                CombatActionDelegate beforeCombatAction = this.BeforeCombatAction;
                do
                {
                    delegate3 = beforeCombatAction;
                    CombatActionDelegate delegate4 = (CombatActionDelegate) Delegate.Combine(delegate3, value);
                    beforeCombatAction = Interlocked.CompareExchange<CombatActionDelegate>(ref this.BeforeCombatAction, delegate4, delegate3);
                }
                while (beforeCombatAction != delegate3);
            }
            remove
            {
                CombatActionDelegate delegate3;
                CombatActionDelegate beforeCombatAction = this.BeforeCombatAction;
                do
                {
                    delegate3 = beforeCombatAction;
                    CombatActionDelegate delegate4 = (CombatActionDelegate) Delegate.Remove(delegate3, value);
                    beforeCombatAction = Interlocked.CompareExchange<CombatActionDelegate>(ref this.BeforeCombatAction, delegate4, delegate3);
                }
                while (beforeCombatAction != delegate3);
            }
        }

        public event LogLineEventDelegate BeforeLogLineRead
        {
            add
            {
                LogLineEventDelegate delegate3;
                LogLineEventDelegate beforeLogLineRead = this.BeforeLogLineRead;
                do
                {
                    delegate3 = beforeLogLineRead;
                    LogLineEventDelegate delegate4 = (LogLineEventDelegate) Delegate.Combine(delegate3, value);
                    beforeLogLineRead = Interlocked.CompareExchange<LogLineEventDelegate>(ref this.BeforeLogLineRead, delegate4, delegate3);
                }
                while (beforeLogLineRead != delegate3);
            }
            remove
            {
                LogLineEventDelegate delegate3;
                LogLineEventDelegate beforeLogLineRead = this.BeforeLogLineRead;
                do
                {
                    delegate3 = beforeLogLineRead;
                    LogLineEventDelegate delegate4 = (LogLineEventDelegate) Delegate.Remove(delegate3, value);
                    beforeLogLineRead = Interlocked.CompareExchange<LogLineEventDelegate>(ref this.BeforeLogLineRead, delegate4, delegate3);
                }
                while (beforeLogLineRead != delegate3);
            }
        }

        public event LcdButtonPressedEventDelegate LcdButtonPressed
        {
            add
            {
                LcdButtonPressedEventDelegate delegate3;
                LcdButtonPressedEventDelegate lcdButtonPressed = this.LcdButtonPressed;
                do
                {
                    delegate3 = lcdButtonPressed;
                    LcdButtonPressedEventDelegate delegate4 = (LcdButtonPressedEventDelegate) Delegate.Combine(delegate3, value);
                    lcdButtonPressed = Interlocked.CompareExchange<LcdButtonPressedEventDelegate>(ref this.LcdButtonPressed, delegate4, delegate3);
                }
                while (lcdButtonPressed != delegate3);
            }
            remove
            {
                LcdButtonPressedEventDelegate delegate3;
                LcdButtonPressedEventDelegate lcdButtonPressed = this.LcdButtonPressed;
                do
                {
                    delegate3 = lcdButtonPressed;
                    LcdButtonPressedEventDelegate delegate4 = (LcdButtonPressedEventDelegate) Delegate.Remove(delegate3, value);
                    lcdButtonPressed = Interlocked.CompareExchange<LcdButtonPressedEventDelegate>(ref this.LcdButtonPressed, delegate4, delegate3);
                }
                while (lcdButtonPressed != delegate3);
            }
        }

        public event LcdUpdateEventDelegate LcdUpdate
        {
            add
            {
                LcdUpdateEventDelegate delegate3;
                LcdUpdateEventDelegate lcdUpdate = this.LcdUpdate;
                do
                {
                    delegate3 = lcdUpdate;
                    LcdUpdateEventDelegate delegate4 = (LcdUpdateEventDelegate) Delegate.Combine(delegate3, value);
                    lcdUpdate = Interlocked.CompareExchange<LcdUpdateEventDelegate>(ref this.LcdUpdate, delegate4, delegate3);
                }
                while (lcdUpdate != delegate3);
            }
            remove
            {
                LcdUpdateEventDelegate delegate3;
                LcdUpdateEventDelegate lcdUpdate = this.LcdUpdate;
                do
                {
                    delegate3 = lcdUpdate;
                    LcdUpdateEventDelegate delegate4 = (LcdUpdateEventDelegate) Delegate.Remove(delegate3, value);
                    lcdUpdate = Interlocked.CompareExchange<LcdUpdateEventDelegate>(ref this.LcdUpdate, delegate4, delegate3);
                }
                while (lcdUpdate != delegate3);
            }
        }

        public event LogFileChangedDelegate LogFileChanged
        {
            add
            {
                LogFileChangedDelegate delegate3;
                LogFileChangedDelegate logFileChanged = this.LogFileChanged;
                do
                {
                    delegate3 = logFileChanged;
                    LogFileChangedDelegate delegate4 = (LogFileChangedDelegate) Delegate.Combine(delegate3, value);
                    logFileChanged = Interlocked.CompareExchange<LogFileChangedDelegate>(ref this.LogFileChanged, delegate4, delegate3);
                }
                while (logFileChanged != delegate3);
            }
            remove
            {
                LogFileChangedDelegate delegate3;
                LogFileChangedDelegate logFileChanged = this.LogFileChanged;
                do
                {
                    delegate3 = logFileChanged;
                    LogFileChangedDelegate delegate4 = (LogFileChangedDelegate) Delegate.Remove(delegate3, value);
                    logFileChanged = Interlocked.CompareExchange<LogFileChangedDelegate>(ref this.LogFileChanged, delegate4, delegate3);
                }
                while (logFileChanged != delegate3);
            }
        }

        public event CombatToggleEventDelegate OnCombatEnd
        {
            add
            {
                CombatToggleEventDelegate delegate3;
                CombatToggleEventDelegate onCombatEnd = this.OnCombatEnd;
                do
                {
                    delegate3 = onCombatEnd;
                    CombatToggleEventDelegate delegate4 = (CombatToggleEventDelegate) Delegate.Combine(delegate3, value);
                    onCombatEnd = Interlocked.CompareExchange<CombatToggleEventDelegate>(ref this.OnCombatEnd, delegate4, delegate3);
                }
                while (onCombatEnd != delegate3);
            }
            remove
            {
                CombatToggleEventDelegate delegate3;
                CombatToggleEventDelegate onCombatEnd = this.OnCombatEnd;
                do
                {
                    delegate3 = onCombatEnd;
                    CombatToggleEventDelegate delegate4 = (CombatToggleEventDelegate) Delegate.Remove(delegate3, value);
                    onCombatEnd = Interlocked.CompareExchange<CombatToggleEventDelegate>(ref this.OnCombatEnd, delegate4, delegate3);
                }
                while (onCombatEnd != delegate3);
            }
        }

        public event CombatToggleEventDelegate OnCombatStart
        {
            add
            {
                CombatToggleEventDelegate delegate3;
                CombatToggleEventDelegate onCombatStart = this.OnCombatStart;
                do
                {
                    delegate3 = onCombatStart;
                    CombatToggleEventDelegate delegate4 = (CombatToggleEventDelegate) Delegate.Combine(delegate3, value);
                    onCombatStart = Interlocked.CompareExchange<CombatToggleEventDelegate>(ref this.OnCombatStart, delegate4, delegate3);
                }
                while (onCombatStart != delegate3);
            }
            remove
            {
                CombatToggleEventDelegate delegate3;
                CombatToggleEventDelegate onCombatStart = this.OnCombatStart;
                do
                {
                    delegate3 = onCombatStart;
                    CombatToggleEventDelegate delegate4 = (CombatToggleEventDelegate) Delegate.Remove(delegate3, value);
                    onCombatStart = Interlocked.CompareExchange<CombatToggleEventDelegate>(ref this.OnCombatStart, delegate4, delegate3);
                }
                while (onCombatStart != delegate3);
            }
        }

        public event LogLineEventDelegate OnLogLineRead
        {
            add
            {
                LogLineEventDelegate delegate3;
                LogLineEventDelegate onLogLineRead = this.OnLogLineRead;
                do
                {
                    delegate3 = onLogLineRead;
                    LogLineEventDelegate delegate4 = (LogLineEventDelegate) Delegate.Combine(delegate3, value);
                    onLogLineRead = Interlocked.CompareExchange<LogLineEventDelegate>(ref this.OnLogLineRead, delegate4, delegate3);
                }
                while (onLogLineRead != delegate3);
            }
            remove
            {
                LogLineEventDelegate delegate3;
                LogLineEventDelegate onLogLineRead = this.OnLogLineRead;
                do
                {
                    delegate3 = onLogLineRead;
                    LogLineEventDelegate delegate4 = (LogLineEventDelegate) Delegate.Remove(delegate3, value);
                    onLogLineRead = Interlocked.CompareExchange<LogLineEventDelegate>(ref this.OnLogLineRead, delegate4, delegate3);
                }
                while (onLogLineRead != delegate3);
            }
        }

        public event NullDelegate UpdateCheckClicked
        {
            add
            {
                NullDelegate delegate3;
                NullDelegate updateCheckClicked = this.UpdateCheckClicked;
                do
                {
                    delegate3 = updateCheckClicked;
                    NullDelegate delegate4 = (NullDelegate) Delegate.Combine(delegate3, value);
                    updateCheckClicked = Interlocked.CompareExchange<NullDelegate>(ref this.UpdateCheckClicked, delegate4, delegate3);
                }
                while (updateCheckClicked != delegate3);
            }
            remove
            {
                NullDelegate delegate3;
                NullDelegate updateCheckClicked = this.UpdateCheckClicked;
                do
                {
                    delegate3 = updateCheckClicked;
                    NullDelegate delegate4 = (NullDelegate) Delegate.Remove(delegate3, value);
                    updateCheckClicked = Interlocked.CompareExchange<NullDelegate>(ref this.UpdateCheckClicked, delegate4, delegate3);
                }
                while (updateCheckClicked != delegate3);
            }
        }

        public event UrlRequestEventDelegate UrlRequest
        {
            add
            {
                UrlRequestEventDelegate delegate3;
                UrlRequestEventDelegate urlRequest = this.UrlRequest;
                do
                {
                    delegate3 = urlRequest;
                    UrlRequestEventDelegate delegate4 = (UrlRequestEventDelegate) Delegate.Combine(delegate3, value);
                    urlRequest = Interlocked.CompareExchange<UrlRequestEventDelegate>(ref this.UrlRequest, delegate4, delegate3);
                }
                while (urlRequest != delegate3);
            }
            remove
            {
                UrlRequestEventDelegate delegate3;
                UrlRequestEventDelegate urlRequest = this.UrlRequest;
                do
                {
                    delegate3 = urlRequest;
                    UrlRequestEventDelegate delegate4 = (UrlRequestEventDelegate) Delegate.Remove(delegate3, value);
                    urlRequest = Interlocked.CompareExchange<UrlRequestEventDelegate>(ref this.UrlRequest, delegate4, delegate3);
                }
                while (urlRequest != delegate3);
            }
        }

        public FormActMain(string[] commandArgs)
        {
            base.SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint, true);
            this.InitializeComponent();
            Application.DoEvents();
            this.TempInsertOpControls();
            this.TempInsertIoControls();
            ActGlobals.ActLocalization.Init();
            bool flag = false;
            bool flag2 = false;
            this.tmrTen.Enabled = false;
            foreach (string str in commandArgs)
            {
                if (str.ToLower() == "/?")
                {
                    MessageBox.Show("-noload :: Do not load the last open log file upon start.\n-minimize :: Minimize application upon start.\n-exportcontroltext\n-importcontroltext", "Command Arguments");
                }
                if (str.ToLower() == "-?")
                {
                    MessageBox.Show("-noload :: Do not load the last open log file upon start.\n-minimize :: Minimize application upon start.\n-exportcontroltext\n-importcontroltext", "Command Arguments");
                }
                if (str.ToLower() == "-noload")
                {
                    this.noLoad = true;
                }
                if (str.ToLower() == "-minimize")
                {
                    this.minimizeOnStart = true;
                }
                if (str.ToLower() == "-exportcontroltext")
                {
                    flag = true;
                }
                if (str.ToLower() == "-importcontroltext")
                {
                    flag2 = true;
                }
            }
            int processorCount = Environment.ProcessorCount;
            int num2 = (int) Math.Pow(2.0, (double) processorCount);
            for (int i = 0; i < num2; i++)
            {
                if (i == 0)
                {
                    this.opMisc.ddlCpuAffinity.Items.Add(new ProcDef("System Default", IntPtr.Zero));
                }
                else
                {
                    StringBuilder builder = new StringBuilder("Use processors: ");
                    for (int j = 0; j < processorCount; j++)
                    {
                        if (new BitArray(new int[] { i }).Get(j))
                        {
                            builder.AppendFormat("{0} or ", j + 1);
                        }
                    }
                    this.opMisc.ddlCpuAffinity.Items.Add(new ProcDef(builder.ToString().Substring(0, builder.ToString().Length - 4), (IntPtr) i));
                }
            }
            this.opMisc.ddlCpuAffinity.SelectedIndex = 0;
            this.ttGraphList.AutoPopDelay = 0x7d0;
            this.ttGraphList.ShowAlways = false;
            Assembly executingAssembly = Assembly.GetExecutingAssembly();
            this.cIcon = new Icon(executingAssembly.GetManifestResourceStream(base.GetType(), "act16a.ico"));
            this.nIcon = new Icon(executingAssembly.GetManifestResourceStream(base.GetType(), "act16b.ico"));
            this.plusB = new Bitmap(executingAssembly.GetManifestResourceStream(base.GetType(), "+.bmp"));
            this.minusB = new Bitmap(executingAssembly.GetManifestResourceStream(base.GetType(), "-.bmp"));
            this.lcdMonoSplash = new Bitmap(executingAssembly.GetManifestResourceStream(base.GetType(), "LCDStart.png"));
            this.lcdColorSplash = new Bitmap(executingAssembly.GetManifestResourceStream(base.GetType(), "lcdcolor-splash.png"));
            this.ioImportLog.calImportFrom.SelectionStart = DateTime.Now;
            this.ioImportLog.calImportTo.SelectionStart = DateTime.Now;
            this.ioImportLog.dtImportFromTime.Value = DateTime.Now;
            this.ioImportLog.dtImportToTime.Value = DateTime.Now;
            this.GetDateTimeFromLog = new DateTimeLogParser(this.ParseDateTimeFromEQ2Log);
            this.GenerateEncounterGraph = new EncounterGraphGenerator(this.GenEncounterGraph);
            this.GenerateCombatantGraph = new CombatantGraphGenerator(this.GenCombatantGraph);
            this.GenerateDamageTypeGraph = new DamageTypeGraphGenerator(this.GenDamageTypeGraph);
            this.GenerateAttackTypeGraph = new AttackTypeGraphGenerator(this.GenAttackTypeGraph);
            ActGlobals.oFormActMain = this;
            Control.CheckForIllegalCrossThreadCalls = false;
            string fileName = Process.GetCurrentProcess().MainModule.FileName;
            if (flag2)
            {
                ActGlobals.oFormActMain.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormActMain"));
                ActGlobals.oFormAlliesEdit.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormAlliesEdit"));
                ActGlobals.oFormMiniParse.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormMiniParse"));
                ActGlobals.oFormUpdater.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormUpdater"));
                ActGlobals.oFormCombatantSearch.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormCombatantSearch"));
                ActGlobals.oFormResistsDeathReport.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormResistsDeathReport"));
                ActGlobals.oFormSpellRecastCalc.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormSpellRecastCalc"));
                ActGlobals.oFormSpellTimers.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormSpellTimers"));
                ActGlobals.oFormEncounterLogs.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormEncounterLogs"));
                ActGlobals.oFormPerformanceWizard.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormPerformanceWizard"));
                ActGlobals.oFormXmlSettingsIO.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormXmlSettingsIO"));
                ActGlobals.oFormTimeLine.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormTimeLine"));
                ActGlobals.oFormEncounterVcr.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormEncounterVcr"));
                ActGlobals.oFormSqlQuery.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormSqlQuery"));
                ActGlobals.oFormByCombatantLookup.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormByCombatantLookup"));
                ActGlobals.oFormStartupWizard.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormStartupWizard"));
                ActGlobals.oFormExportFormat.ImportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormExportFormat"));
            }
            if (flag)
            {
                ActGlobals.oFormActMain.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormActMain"));
                ActGlobals.oFormAlliesEdit.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormAlliesEdit"));
                ActGlobals.oFormMiniParse.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormMiniParse"));
                ActGlobals.oFormUpdater.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormUpdater"));
                ActGlobals.oFormCombatantSearch.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormCombatantSearch"));
                ActGlobals.oFormResistsDeathReport.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormResistsDeathReport"));
                ActGlobals.oFormSpellRecastCalc.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormSpellRecastCalc"));
                ActGlobals.oFormSpellTimers.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormSpellTimers"));
                ActGlobals.oFormEncounterLogs.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormEncounterLogs"));
                ActGlobals.oFormPerformanceWizard.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormPerformanceWizard"));
                ActGlobals.oFormXmlSettingsIO.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormXmlSettingsIO"));
                ActGlobals.oFormTimeLine.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormTimeLine"));
                ActGlobals.oFormEncounterVcr.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormEncounterVcr"));
                ActGlobals.oFormSqlQuery.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormSqlQuery"));
                ActGlobals.oFormByCombatantLookup.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormByCombatantLookup"));
                ActGlobals.oFormStartupWizard.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormStartupWizard"));
                ActGlobals.oFormExportFormat.ExportControlTextXML(string.Format("{0}.{1}.xml", fileName, "FormExportFormat"));
            }
            this.GenerateFormatPreviewEnc();
            this.tmrTen.Enabled = true;
            this.OnLogLineRead += new LogLineEventDelegate(this.FormActMain_OnLogLineRead);
            this.LcdButtonPressed += new LcdButtonPressedEventDelegate(this.FormActMain_LcdButtonPressed);
            this.LcdUpdate += new LcdUpdateEventDelegate(this.FormActMain_LcdUpdate);
            this.Trans = ActGlobals.ActLocalization.LocalizationStrings;
        }

        private string AccessSafe(string ConnectionString, string input)
        {
            if (input == null)
            {
                return string.Empty;
            }
            string str = input;
            if ((!ConnectionString.Contains("Microsoft Access Driver") && !ConnectionString.Contains("PostgreSQL")) && (!ConnectionString.Contains("{SQL Server}") && !ConnectionString.Contains("SQL Native Client")))
            {
                return str;
            }
            return str.Replace("0000-00-00 00:00:00", "2000-11-11 11:11:11");
        }

        public void ActCommands(string commandText)
        {
            if (commandText == "end")
            {
                this.refreshTree = true;
                if (this.inCombat)
                {
                    this.EndCombat(true);
                }
                SystemSounds.Asterisk.Play();
            }
            else if (commandText == "reset players")
            {
                foreach (KeyValuePair<string, bool> pair in ActGlobals.selectiveList)
                {
                    ActGlobals.selectiveList[pair.Key] = false;
                }
                this.selectiveListRebuild = true;
                SystemSounds.Asterisk.Play();
            }
            else
            {
                string str;
                if (commandText.StartsWith("add "))
                {
                    str = commandText.Substring(4);
                    this.SelectiveListAdd(str);
                    SystemSounds.Asterisk.Play();
                }
                else if (commandText.StartsWith("remove "))
                {
                    str = commandText.Substring(7);
                    this.SelectiveListRemove(str, false);
                    SystemSounds.Asterisk.Play();
                }
                else if (!this.importThreadAlive)
                {
                    if (!(commandText == "macro all"))
                    {
                        if (commandText == "macro last")
                        {
                            try
                            {
                                for (int i = this.zoneList.Count - 1; i > -1; i--)
                                {
                                    int encounterListIndex = this.zoneList[i].Items.Count - 1;
                                    if (encounterListIndex > 0)
                                    {
                                        this.SendToMacroFile("act-export.txt", this.GetTextExport(i, encounterListIndex, -1, this.opTextExports.cbExFileColumnAlign.Checked ? this.fontTabulation : null, (int) this.opTextExports.nudExFileLines.Value), this.opTextExports.tbExFilePrefix.Text);
                                        SystemSounds.Asterisk.Play();
                                        return;
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                        else if (commandText.StartsWith("macro: "))
                        {
                            ThreadInvokes.ControlSetText(this, this.opTextExports.tbExFilePrefix, commandText.Substring(7).Replace("/", "").Trim());
                            SystemSounds.Asterisk.Play();
                        }
                        else if (commandText == "clip all")
                        {
                            try
                            {
                                if (this.ActiveZone.PopulateAll)
                                {
                                    TextExportFormatOptions defaultTextFormat;
                                    if (this.opTextExports.ddlClipFormat.SelectedIndex == -1)
                                    {
                                        defaultTextFormat = this.defaultTextFormat;
                                    }
                                    else
                                    {
                                        defaultTextFormat = this.textExportFormats[this.opTextExports.ddlClipFormat.SelectedIndex];
                                    }
                                    this.SendToClipboard(this.GetTextExport(this.ActiveZone.Items[0], defaultTextFormat), false);
                                    SystemSounds.Asterisk.Play();
                                }
                            }
                            catch
                            {
                            }
                        }
                        else if (commandText == "clip last")
                        {
                            try
                            {
                                for (int j = this.zoneList.Count - 1; j > -1; j--)
                                {
                                    int num5 = this.zoneList[j].Items.Count - 1;
                                    if (num5 > 0)
                                    {
                                        this.SendToClipboard(this.GetTextExport(j, num5, this.opTextExports.ddlClipFormat.SelectedIndex), false);
                                        SystemSounds.Asterisk.Play();
                                        return;
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                        else if (commandText.StartsWith("clip last-"))
                        {
                            try
                            {
                                int num6 = int.Parse(commandText.Substring(10));
                                for (int k = this.zoneList.Count - 1; (k > -1) && (num6 != 0); k--)
                                {
                                    for (int m = this.zoneList[k].Items.Count - 1; m > 0; m--)
                                    {
                                        if (num6 == 0)
                                        {
                                            this.SendToClipboard(this.GetTextExport(k, m, this.opTextExports.ddlClipFormat.SelectedIndex), false);
                                            SystemSounds.Asterisk.Play();
                                            return;
                                        }
                                        num6--;
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                        else if (commandText == "clear html")
                        {
                            try
                            {
                                if (this.opFileHTML.cbExHTMLFTP.Checked)
                                {
                                    this.htmlStartIndex = 1;
                                    this.htmlIndex = 0;
                                    this.htmlEntries.Clear();
                                }
                                else
                                {
                                    this.htmlStartIndex = this.htmlIndex + 1;
                                }
                                this.indexFs.Seek(0, SeekOrigin.Begin);
                                this.indexFs.SetLength(0);
                                StreamWriter writer = new StreamWriter(this.indexFs);
                                writer.WriteLine("<html>");
                                writer.WriteLine("<BODY BGCOLOR='#000000' TEXT='#FFFFFF' ALINK='#9999FF' LINK='#9999FF' VLINK='#990099'>");
                                writer.WriteLine("<h4><a href=\"index.html\">Return to Index</a> - <a href=\"current.htm\">Current Encounter</a></h4><br><hr><br></BODY></HTML>");
                                writer.Flush();
                                SystemSounds.Asterisk.Play();
                            }
                            catch (Exception exception)
                            {
                                this.WriteExceptionLog(exception, string.Empty);
                            }
                        }
                        else
                        {
                            if (commandText == "clear")
                            {
                                this.zoneList.Clear();
                                this.zoneList.Add(new ZoneData(DateTime.Now, "Import", false, false, false));
                                DateTime start = this.FindZoneName(this.logFilePath, new FileInfo(this.logFilePath).Length);
                                this.ActiveZone = new ZoneData(start, this.currentZone, this.opMisc.cbZoneAllListing.Checked, this.opSelectiveParsing.rbSParseFull.Checked, this.opSelectiveParsing.cbSParseIgnoreEnemies.Checked);
                                this.zoneList.Add(this.ActiveZone);
                                this.EndCombat(false);
                                ThreadInvokes.TreeViewClear(this, this.tvDG);
                                this.refreshTree = true;
                                SystemSounds.Asterisk.Play();
                            }
                            if (commandText.StartsWith("timer "))
                            {
                                str = commandText.Substring(6);
                                this.NotifySpell("YOU", str, true, "YOU", true, new Dictionary<string, string>());
                            }
                        }
                    }
                    else
                    {
                        try
                        {
                            if (this.ActiveZone.PopulateAll)
                            {
                                int zoneListIndex = this.zoneList.Count - 1;
                                this.SendToMacroFile("act-export.txt", this.GetTextExport(zoneListIndex, 0, -1, this.opTextExports.cbExFileColumnAlign.Checked ? this.fontTabulation : null, (int) this.opTextExports.nudExFileLines.Value), this.opTextExports.tbExFilePrefix.Text);
                                SystemSounds.Asterisk.Play();
                            }
                        }
                        catch
                        {
                        }
                    }
                }
            }
        }

        private void AddAssemblyRefrencesFromSource(string filePath, ref CompilerParameters cp)
        {
            Regex regex = new Regex("^// reference:(.+)");
            FileStream stream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read);
            StreamReader reader = new StreamReader(stream);
            int num = 0;
            do
            {
                string input = reader.ReadLine();
                if (input == null)
                {
                    num++;
                }
                else
                {
                    num = 0;
                    if (regex.IsMatch(input))
                    {
                        string str2 = regex.Replace(input, "$1").Trim();
                        if (!cp.ReferencedAssemblies.Contains(str2))
                        {
                            cp.ReferencedAssemblies.Add(str2);
                        }
                    }
                }
            }
            while (num < 100);
            reader.Close();
            stream.Close();
        }

        public void AddCombatAction(int SwingType, bool Critical, string Special, string Attacker, string theAttackType, Dnum Damage, DateTime Time, int TimeSorter, string Victim, string theDamageType)
        {
            if ((Special == "hit") || (Special == "hits"))
            {
                Special = ActGlobals.ActLocalization.LocalizationStrings["specialAttackTerm-none"].DisplayedText;
            }
            Attacker = Attacker.Trim();
            Victim = Victim.Trim();
            theAttackType = theAttackType.Trim();
            CombatActionEventArgs e = new CombatActionEventArgs(SwingType, Critical, Special, Attacker, theAttackType, Damage, Time, TimeSorter, Victim, theDamageType);
            this.RenameCombatant(e);
            this.RedirectAbility(e);
            try
            {
                if (this.BeforeCombatAction != null)
                {
                    this.BeforeCombatAction(this.importThreadAlive, e);
                    if (e.cancelAction)
                    {
                        return;
                    }
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "AddCombatAction->BeforeCombatAction event\n" + this.lastLogLine);
            }
            Dictionary<string, string> extraInfo = new Dictionary<string, string>();
            extraInfo.Add("attacker", e.attacker);
            extraInfo.Add("critical", e.critical.ToString());
            extraInfo.Add("damage", e.damage.Number.ToString());
            extraInfo.Add("special", e.special);
            extraInfo.Add("attacktype", e.theAttackType);
            extraInfo.Add("damagetype", e.theDamageType);
            extraInfo.Add("time", e.time.ToLongTimeString());
            this.NotifySpell(e.attacker, e.theAttackType, (e.attacker == ActGlobals.charName) || (e.victim == ActGlobals.charName), e.victim, e.damage >= 0, extraInfo);
            MasterSwing action = new MasterSwing(e.swingType, e.critical, string.Intern(e.special), e.damage, e.time, e.timeSorter, string.Intern(e.theAttackType), string.Intern(e.attacker), string.Intern(e.theDamageType), string.Intern(e.victim));
            this.ActiveZone.AddCombatAction(action);
            try
            {
                if (this.AfterCombatAction != null)
                {
                    this.AfterCombatAction(this.importThreadAlive, e);
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, "AddCombatAction->AfterCombatAction event\n" + this.lastLogLine);
            }
        }

        [Obsolete("This graphing method no longer exists")]
        public void AddDamageToGraph(string p1, int p2)
        {
        }

        public void AddEditCustomTrigger(CustomTrigger cT)
        {
            if (this.customTriggers.ContainsKey(cT.Key))
            {
                CustomTrigger trigger = this.customTriggers[cT.Key];
                if (this.activeCustomTriggers.ContainsKey(trigger.Key))
                {
                    this.activeCustomTriggers.Remove(trigger.Key);
                }
                if (trigger.ResultsTab != null)
                {
                    this.tcTriggers.TabPages.Remove(trigger.ResultsTab);
                }
                this.customTriggers.Remove(cT.Key);
            }
            this.customTriggers.Add(cT.Key, cT);
            if (cT.Active && !this.activeCustomTriggers.ContainsKey(cT.Key))
            {
                this.activeCustomTriggers.Add(cT.Key, cT);
            }
            this.AddTriggerTab(cT);
            this.rebuildActiveCustomTriggers = true;
            this.rebuildCustomTriggerTreeView = true;
        }

        public ActPluginData AddPluginPanel(string PluginPath, bool SuppressErrors)
        {
            FileInfo info = null;
            try
            {
                info = new FileInfo(PluginPath);
                if (!info.Exists)
                {
                    if (SuppressErrors)
                    {
                        this.WriteExceptionLog(new IOException(PluginPath + " does not exist."), "Loading plugin from config");
                    }
                    else
                    {
                        MessageBox.Show(this.Trans["messageBox-noFileFound"].DisplayedText, this.Trans["messageBoxTitle-noFileFound"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    }
                    return null;
                }
            }
            catch
            {
                return null;
            }
            Panel panel = new Panel {
                Size = new Size(500, 100),
                BorderStyle = BorderStyle.Fixed3D,
                BackColor = System.Drawing.Color.White
            };
            panel.Click += new EventHandler(this.pluginPanelClick);
            panel.GotFocus += new EventHandler(this.pluginPanelFocusChanged);
            panel.LostFocus += new EventHandler(this.pluginPanelFocusChanged);
            CheckBox box = new CheckBox {
                Size = new Size(0x48, 0x18),
                Location = new Point(0x1ac, 0x4c),
                Text = "Enabled"
            };
            box.GotFocus += new EventHandler(this.pluginPanelChildGotFocus);
            box.CheckedChanged += new EventHandler(this.pluginPanelEnabledChecked);
            panel.Controls.Add(box);
            box.Anchor = AnchorStyles.Right | AnchorStyles.Bottom;
            Button button = new Button {
                Size = new Size(0x10, 0x10),
                Location = new Point(0x1e4, 0),
                BackColor = System.Drawing.Color.Red,
                Text = "x",
                TextAlign = ContentAlignment.MiddleRight
            };
            button.Click += new EventHandler(this.pluginPanelXBtn_Click);
            button.GotFocus += new EventHandler(this.pluginPanelChildGotFocus);
            panel.Controls.Add(button);
            button.Anchor = AnchorStyles.Right | AnchorStyles.Top;
            Label label = new Label {
                Location = new Point(8, 8),
                Size = new Size(0x1d4, 0x20),
                BorderStyle = BorderStyle.Fixed3D,
                Text = info.Name
            };
            label.Click += new EventHandler(this.pluginPanelChildGotFocus);
            panel.Controls.Add(label);
            label.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            Label label2 = new Label {
                Location = new Point(8, 0x2c),
                Size = new Size(0x19c, 0x30),
                BorderStyle = BorderStyle.FixedSingle,
                Text = "No Status"
            };
            label2.Click += new EventHandler(this.pluginPanelChildGotFocus);
            panel.Controls.Add(label2);
            label2.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            this.pPluginInfos.Controls.Add(panel);
            panel.Dock = DockStyle.Top;
            ActPluginData item = new ActPluginData {
                btnXButton = button,
                cbEnabled = box,
                lblPluginStatus = label2,
                lblPluginTitle = label,
                pluginFile = info,
                pluginVersion = this.GetAssemblyInfo(info.FullName),
                pPluginInfo = panel
            };
            panel.Tag = item;
            this.plugins.Add(item);
            return item;
        }

        internal void AddTextFormat(TextExportFormatOptions textExportFormatOptions)
        {
            this.textExportFormats.Add(textExportFormatOptions);
            this.opTextExports.ddlClipFormat.Items.Add(textExportFormatOptions.ToString());
            this.opTextExports.ddlExMacroClipPreset.Items.Add(textExportFormatOptions.ToString());
            this.opLcdGeneral.ddlLcdMiniFormat.Items.Add(textExportFormatOptions.ToString());
            this.opLcdGeneral.ddlLcdPersonalFormat.Items.Add(textExportFormatOptions.ToString());
            this.opMiniParse.ddlMiniFormat.Items.Add(textExportFormatOptions.ToString());
        }

        private void AddTriggerTab(CustomTrigger cT)
        {
            if (cT.Tabbed && (cT.ResultsTab == null))
            {
                TabPage page = new TabPage {
                    Width = 0x400,
                    Text = cT.TimerName
                };
                cT.ResultsTab = page;
                page.Tag = cT;
                ListView view = new ListView();
                cT.ResultsTab.Controls.Add(view);
                view.Left = 1;
                view.Top = 0x34;
                view.Width = page.Width - 2;
                view.Height = page.Height - 0x38;
                view.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
                view.View = View.Details;
                view.AllowColumnReorder = true;
                view.GridLines = true;
                view.MultiSelect = true;
                view.Tag = cT;
                view.Columns.Clear();
                string[] groupNames = cT.RegEx.GetGroupNames();
                if (groupNames.Length > 1)
                {
                    int num = base.ClientSize.Width - 0x80;
                    Regex regex = new Regex(@"(.+)_(\d+)", RegexOptions.Compiled);
                    for (int i = 0; i < groupNames.Length; i++)
                    {
                        string input = groupNames[i];
                        if (input == "0")
                        {
                            view.Columns.Add("Time Stamp", 0x48);
                        }
                        else if (regex.IsMatch(input))
                        {
                            int width = int.Parse(regex.Replace(input, "$2"));
                            num -= width;
                            view.Columns.Add(regex.Replace(input, "$1"), width);
                        }
                        else
                        {
                            int num4 = num / (groupNames.Length - i);
                            num -= num4;
                            view.Columns.Add(input, num4);
                        }
                    }
                }
                else
                {
                    view.Columns.Add("Time Stamp", 0x48);
                    view.Columns.Add("Log line", (int) (base.ClientSize.Width - 0x80));
                }
                view.ColumnClick += new ColumnClickEventHandler(this.sortableLview_ColumnClick);
                view.MouseUp += new MouseEventHandler(this.ctLv_MouseUp);
                Pen[] penArray = new Pen[] { 
                    new Pen(this.opColorGraphing.ccGraphFill1.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill2.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill3.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill4.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill5.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill6.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill7.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill8.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill9.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill10.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill11.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill12.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill13.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill14.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill15.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill16.ForeColorSetting, 2f), 
                    new Pen(this.opColorGraphing.ccGraphFill17.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill18.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill19.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill20.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill21.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill22.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill23.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill24.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill25.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill26.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill27.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill28.ForeColorSetting, 2f)
                 };
                Button button = new Button();
                cT.ResultsTab.Controls.Add(button);
                if (this.tcTriggers.TabPages.Count < penArray.Length)
                {
                    button.BackColor = penArray[this.tcTriggers.TabPages.Count].Color;
                }
                button.Text = "Clear Items";
                button.Font = new Font("Microsoft Sans Serif", 7f);
                button.Size = new Size(0x30, 0x2a);
                button.Location = new Point(1, 5);
                button.Tag = cT;
                button.MouseClick += new MouseEventHandler(this.btnDeleteTriggerLogs_Click);
                GroupBox box = new GroupBox();
                cT.ResultsTab.Controls.Add(box);
                box.Text = "Search triggered log lines...";
                box.Location = new Point(50, 0);
                box.Height = 0x30;
                box.Width = (cT.ResultsTab.Width - 0xb2) - 50;
                box.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
                TextBox box2 = new TextBox();
                box.Controls.Add(box2);
                box2.Location = new Point(8, 0x10);
                box2.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
                box2.Width = box.Width - 180;
                box2.KeyUp += new KeyEventHandler(this.tbTriggerSearch_KeyUp);
                box2.Tag = cT;
                Button button2 = new Button();
                box.Controls.Add(button2);
                button2.Text = "Search as Text";
                button2.Font = new Font("Microsoft Sans Serif", 7f);
                button2.Location = new Point(box2.Right + 4, 10);
                button2.Size = new Size(0x58, 0x10);
                button2.Anchor = AnchorStyles.Right | AnchorStyles.Top;
                button2.Tag = cT;
                button2.Click += new EventHandler(this.btnSearchLv_Click);
                Button button3 = new Button();
                box.Controls.Add(button3);
                button3.Text = "Search as Regex";
                button3.Font = new Font("Microsoft Sans Serif", 7f);
                button3.Location = new Point(box2.Right + 4, 0x1a);
                button3.Size = new Size(0x58, 0x10);
                button3.Anchor = AnchorStyles.Right | AnchorStyles.Top;
                button3.Tag = cT;
                button3.Click += new EventHandler(this.btnSearchRegexLv_Click);
                Button button4 = new Button();
                box.Controls.Add(button4);
                button4.Text = "Find Next";
                button4.Font = new Font("Microsoft Sans Serif", 7f);
                button4.Location = new Point(box2.Right + 0x5c, 10);
                button4.Size = new Size(0x48, 0x10);
                button4.Anchor = AnchorStyles.Right | AnchorStyles.Top;
                button4.Tag = cT;
                button4.Click += new EventHandler(this.btnFindNext_Click);
                Button button5 = new Button();
                box.Controls.Add(button5);
                button5.Text = "Find Prev";
                button5.Font = new Font("Microsoft Sans Serif", 7f);
                button5.Location = new Point(box2.Right + 0x5c, 0x1a);
                button5.Size = new Size(0x48, 0x10);
                button5.Anchor = AnchorStyles.Right | AnchorStyles.Top;
                button5.Tag = cT;
                button5.Click += new EventHandler(this.btnFindPrev_Click);
                GroupBox box3 = new GroupBox();
                cT.ResultsTab.Controls.Add(box3);
                box3.Text = string.Empty;
                box3.Size = new Size(0xac, 0x30);
                box3.Location = new Point(box.Right + 4, 0);
                box3.Anchor = AnchorStyles.Right | AnchorStyles.Top;
                Button button6 = new Button();
                box3.Controls.Add(button6);
                button6.Text = "Copy Search Results";
                button6.Font = new Font("Microsoft Sans Serif", 7f);
                button6.Location = new Point(4, 10);
                button6.Size = new Size(80, 0x20);
                button6.Tag = cT;
                button6.Click += new EventHandler(this.btnCopyResults_Click);
                Button button7 = new Button();
                box3.Controls.Add(button7);
                button7.Text = "Copy Selection";
                button7.Font = new Font("Microsoft Sans Serif", 7f);
                button7.Location = new Point(button6.Right + 1, 10);
                button7.Size = new Size(80, 0x10);
                button7.Tag = cT;
                button7.Click += new EventHandler(this.btnCopySelection_Click);
                Button button8 = new Button();
                box3.Controls.Add(button8);
                button8.Text = "Copy All";
                button8.Font = new Font("Microsoft Sans Serif", 7f);
                button8.Location = new Point(button6.Right + 1, 0x1a);
                button8.Size = new Size(80, 0x10);
                button8.Tag = cT;
                button8.Click += new EventHandler(this.btnCopyAll_Click);
                this.tcTriggers.TabPages.Add(page);
            }
        }

        private void AddXmlShareToList(string logLine)
        {
            string type = this.shareRegex.Replace(logLine, "${type}");
            string str2 = this.shareRegex.Replace(logLine, "${player}");
            string xmlFragment = this.shareRegex.Replace(logLine, "${xml}");
            int num = 0;
            int index = this.opXmlShare.clbShareTrusted.Items.IndexOf(str2);
            if ((index != -1) && this.opXmlShare.clbShareTrusted.GetItemChecked(index))
            {
                num++;
            }
            index = this.opXmlShare.clbShareBanned.Items.IndexOf(str2);
            if ((index != -1) && this.opXmlShare.clbShareBanned.GetItemChecked(index))
            {
                num--;
            }
            switch (num)
            {
                case -1:
                    return;

                case 1:
                    switch (type)
                    {
                        case "Spell":
                        {
                            TimerData newTd = this.ShareXmlToSpell(xmlFragment);
                            ActGlobals.oFormSpellTimers.AddEditTimerDef(newTd);
                            ActGlobals.oFormSpellTimers.rebuildSpellTreeView = true;
                            break;
                        }
                        case "Trigger":
                        {
                            CustomTrigger cT = this.ShareXmlToCustomTrigger(xmlFragment);
                            this.AddEditCustomTrigger(cT);
                            break;
                        }
                    }
                    break;

                default:
                    ThreadInvokes.ListboxAdd(this, this.opXmlShare.lbShareIncoming, new ChatShareEntry(str2, type, xmlFragment));
                    this.notifyIcon1.Icon = this.cIcon;
                    this.notifyIcon1.Visible = true;
                    this.notifyIcon1.ShowBalloonTip(0x2710, "ACT XML Share", "A (" + type + ") from (" + str2 + ") has been detected.\r\nClick this balloon to import.", ToolTipIcon.Warning);
                    SystemSounds.Asterisk.Play();
                    return;
            }
            this.notifyIcon1.Icon = this.cIcon;
            this.notifyIcon1.Visible = true;
            this.notifyIcon1.ShowBalloonTip(0x1388, "ACT XML Share", "A (" + type + ") from (" + str2 + ") has been added to ACT.", ToolTipIcon.Info);
            SystemSounds.Asterisk.Play();
        }

        private void appendCellToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem item = (ToolStripMenuItem) sender;
            this.cellClipboard = this.cellClipboard + ((string) item.Tag);
            this.SendToClipboard(this.cellClipboard, true);
            SystemSounds.Beep.Play();
        }

        private void appendNewlineToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem item = (ToolStripMenuItem) sender;
            this.cellClipboard = this.cellClipboard + ((string) item.Tag);
            this.SendToClipboard(this.cellClipboard, true);
            SystemSounds.Beep.Play();
        }

        [Obsolete]
        public string AtksToIng(string attacksType)
        {
            return attacksType;
        }

        [Obsolete]
        public string AtkToIng(string attackType)
        {
            return attackType;
        }

        private void avoidanceReportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Parent.Index];
            CombatantData combatant = data.Items[this.tvDG.SelectedNode.Parent.Index].GetCombatant(this.tvDG.SelectedNode.Text);
            ActGlobals.oFormAvoidanceReport.Text = combatant.Name + "'s Avoidance Report  (Click a row for details)";
            ActGlobals.oFormAvoidanceReport.ShowAvoidanceReport(combatant);
        }

        private void avoidanceReportToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Index];
            EncounterData eD = data.Items[this.tvDG.SelectedNode.Index];
            ActGlobals.oFormAvoidanceReport.Text = "Avoid-Other Report for " + eD.Title + "  (Click a row for details)";
            ActGlobals.oFormAvoidanceReport.ShowEncounterAvoidance(eD);
        }

        private List<string> BatchSqlCommands(string tableName, string tableCols, List<string> tableVals, int maxBatch)
        {
            List<string> list = new List<string>();
            string str = string.Format("INSERT INTO {0} ({1}) VALUES ", tableName, tableCols);
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < tableVals.Count; i++)
            {
                builder.AppendFormat("({0}),", tableVals[i]);
                if ((((i % (maxBatch - 1)) == 0) && (i != 0)) || (i == (tableVals.Count - 1)))
                {
                    list.Add(str + builder.ToString(0, builder.Length - 1) + ";");
                    builder.Length = 0;
                }
            }
            return list;
        }

        private byte[] BmpToBytes(Bitmap bmp)
        {
            BitmapData bitmapdata = bmp.LockBits(new Rectangle(new Point(), bmp.Size), ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
            int length = bitmapdata.Stride * bmp.Height;
            byte[] destination = new byte[length];
            Marshal.Copy(bitmapdata.Scan0, destination, 0, length);
            bmp.UnlockBits(bitmapdata);
            return destination;
        }

        private void btnAddPluginPanel_Click(object sender, EventArgs e)
        {
            ActPluginData data = this.AddPluginPanel(this.tbPluginPath.Text, false);
            if (data != null)
            {
                data.pPluginInfo.Focus();
                data.cbEnabled.Checked = true;
            }
        }

        private void btnAddTrigger_Click(object sender, EventArgs e)
        {
            int cSoundType = 0;
            if (this.rbSndTriggerBeep.Checked)
            {
                cSoundType = 1;
            }
            if (this.rbSndTriggerWAV.Checked)
            {
                cSoundType = 2;
            }
            if (this.rbSndTriggerTTS.Checked)
            {
                cSoundType = 3;
            }
            CustomTrigger cT = null;
            try
            {
                cT = new CustomTrigger(this.tbTriggerText.Text, cSoundType, this.tbSndTrigger.Text, this.cbTriggerTimer.Checked, this.tbTriggerTimer.Text, this.cbTriggerTabbed.Checked) {
                    Category = string.IsNullOrEmpty(this.tbTriggerCategory.Text) ? " General" : this.tbTriggerCategory.Text,
                    RestrictToCategoryZone = this.cbTriggerCategoryRestrict.Checked
                };
            }
            catch (Exception exception)
            {
                MessageBox.Show(string.Format(this.Trans["messageBox-invalidRegex"].DisplayedText, exception.Message), this.Trans["messageBoxTitle-invalidRegex"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            this.AddEditCustomTrigger(cT);
        }

        private void btnCDSearch_Click(object sender, EventArgs e)
        {
            ActGlobals.oFormCombatantSearch.Show();
            ActGlobals.oFormCombatantSearch.Init(this.zoneList);
        }

        private void btnCheckVer_Click(object sender, EventArgs e)
        {
            ActGlobals.oFormUpdater.Show();
            ActGlobals.oFormUpdater.Check();
            if (this.UpdateCheckClicked != null)
            {
                try
                {
                    this.UpdateCheckClicked();
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, "UpdateCheckClicked event");
                }
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            DateTime lastEstimatedTime;
            this.zoneList.Clear();
            this.zoneList.Add(new ZoneData(this.LastEstimatedTime, "Import", false, false, false));
            if (System.IO.File.Exists(this.LogFilePath))
            {
                lastEstimatedTime = this.FindZoneName(this.logFilePath, new FileInfo(this.logFilePath).Length);
            }
            else
            {
                lastEstimatedTime = this.LastEstimatedTime;
            }
            this.ActiveZone = new ZoneData(lastEstimatedTime, this.currentZone, this.opMisc.cbZoneAllListing.Checked, this.opSelectiveParsing.rbSParseFull.Checked, this.opSelectiveParsing.cbSParseIgnoreEnemies.Checked);
            this.zoneList.Add(this.ActiveZone);
            this.EndCombat(false);
            ThreadInvokes.TreeViewClear(this, this.tvDG);
            this.refreshTree = true;
            if (this.opMisc.cbGCollectOnClear.Checked)
            {
                long num = CondenseGCMemory();
                MessageBox.Show(string.Format("{0:0,0} bytes allocated difference", num));
            }
        }

        private void btnCopyAll_Click(object sender, EventArgs e)
        {
            Button button = (Button) sender;
            CustomTrigger tag = (CustomTrigger) button.Tag;
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < tag.TriggerListView.Items.Count; i++)
            {
                builder.AppendFormat("{1} - {0}\n", (string) tag.TriggerListView.Items[i].Tag, tag.TriggerListView.Items[i].Text);
            }
            this.SendToClipboard(builder.ToString(), true);
            SystemSounds.Beep.Play();
        }

        private void btnCopyResults_Click(object sender, EventArgs e)
        {
            Button button = (Button) sender;
            CustomTrigger tag = (CustomTrigger) button.Tag;
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < tag.TriggerListView.Items.Count; i++)
            {
                if (tag.TriggerListView.Items[i].BackColor == System.Drawing.Color.LemonChiffon)
                {
                    builder.AppendFormat("{1} - {0}\n", (string) tag.TriggerListView.Items[i].Tag, tag.TriggerListView.Items[i].Text);
                }
            }
            this.SendToClipboard(builder.ToString(), true);
            SystemSounds.Beep.Play();
        }

        private void btnCopySelection_Click(object sender, EventArgs e)
        {
            Button button = (Button) sender;
            CustomTrigger tag = (CustomTrigger) button.Tag;
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < tag.TriggerListView.Items.Count; i++)
            {
                if (tag.TriggerListView.Items[i].Selected)
                {
                    builder.AppendFormat("{1} - {0}\n", (string) tag.TriggerListView.Items[i].Tag, tag.TriggerListView.Items[i].Text);
                }
            }
            this.SendToClipboard(builder.ToString(), true);
            SystemSounds.Beep.Play();
        }

        private void btnDeleteChecked_Click(object sender, EventArgs ea)
        {
            try
            {
                Application.DoEvents();
                for (int i = this.tvDG.Nodes.Count - 1; i >= 0; i--)
                {
                    TreeNode node = this.tvDG.Nodes[i];
                    for (int j = this.tvDG.Nodes[i].Nodes.Count - 1; j >= 0; j--)
                    {
                        node = this.tvDG.Nodes[i].Nodes[j];
                        if (node.Checked)
                        {
                            this.zoneList[i].Items.RemoveAt(j);
                        }
                    }
                }
                ThreadInvokes.TreeViewClear(this, this.tvDG);
                this.refreshTree = true;
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void btnDeleteTriggerLogs_Click(object sender, EventArgs e)
        {
            Button button = (Button) sender;
            CustomTrigger tag = (CustomTrigger) button.Tag;
            tag.TriggerListView.Items.Clear();
        }

        private void btnEndEnc_Click(object sender, EventArgs e)
        {
            this.refreshTree = true;
            this.EndCombat(this.inCombat);
        }

        private void btnFeedbackSubmit_Click(object sender, EventArgs e)
        {
            if ((this.rtbFeedback.Text == "Type comments here, then click Submit.") || (this.rtbFeedback.Text == ""))
            {
                MessageBox.Show(this.Trans["messageBox-feedbackNoComments"].DisplayedText, this.Trans["messageBoxTitle-feedbackFail"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            else if ((((this.tbFeedbackEmail.Text != "<Optional return email address>") && (this.tbFeedbackEmail.Text != "")) || (MessageBox.Show(this.Trans["messageBox-feedbackNoEmail"].DisplayedText, this.Trans["messageBoxTitle-feedbackWarning"].DisplayedText, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.No)) && ((this.rtbFeedback.Text.Length >= 100) || (MessageBox.Show(this.Trans["messageBox-feedbackShort"].DisplayedText, this.Trans["messageBoxTitle-feedbackWarning"].DisplayedText, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.No)))
            {
                if (this.tbFeedbackEmail.Text.Contains("@aol.com"))
                {
                    MessageBox.Show(this.Trans["messageBox-feedbackNoAol"].DisplayedText, this.Trans["messageBoxTitle-feedbackFail"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                else
                {
                    this.feedbackConnectThread = new Thread(new ThreadStart(this.FeedbackConnect));
                    this.feedbackConnectThread.Priority = ThreadPriority.Normal;
                    this.feedbackConnectThread.Name = "Feedback Connect Thread";
                    this.feedbackConnectThread.SetApartmentState(ApartmentState.STA);
                    this.feedbackConnectThread.IsBackground = true;
                    this.feedbackConnectThread.Start();
                    this.btnFeedbackSubmit.Text = "Please restart to submit more.";
                    this.btnFeedbackSubmit.Enabled = false;
                }
            }
        }

        private void btnFindNext_Click(object sender, EventArgs e)
        {
            Button button = (Button) sender;
            CustomTrigger tag = (CustomTrigger) button.Tag;
            for (int i = tag.TabbedCurrentIndex + 1; i < tag.TriggerListView.Items.Count; i++)
            {
                ListViewItem item = tag.TriggerListView.Items[i];
                if (item.BackColor == System.Drawing.Color.LemonChiffon)
                {
                    tag.TriggerListView.Focus();
                    if (tag.TabbedCurrentIndex > -1)
                    {
                        tag.TriggerListView.Items[tag.TabbedCurrentIndex].Selected = false;
                    }
                    item.Selected = true;
                    item.EnsureVisible();
                    tag.TabbedCurrentIndex = item.Index;
                    return;
                }
            }
            SystemSounds.Beep.Play();
        }

        private void btnFindPrev_Click(object sender, EventArgs e)
        {
            Button button = (Button) sender;
            CustomTrigger tag = (CustomTrigger) button.Tag;
            for (int i = tag.TabbedCurrentIndex - 1; i > -1; i--)
            {
                ListViewItem item = tag.TriggerListView.Items[i];
                if (item.BackColor == System.Drawing.Color.LemonChiffon)
                {
                    tag.TriggerListView.Focus();
                    if (tag.TabbedCurrentIndex > -1)
                    {
                        tag.TriggerListView.Items[tag.TabbedCurrentIndex].Selected = false;
                    }
                    item.Selected = true;
                    item.EnsureVisible();
                    tag.TabbedCurrentIndex = item.Index;
                    return;
                }
            }
            SystemSounds.Beep.Play();
        }

        private void btnHistoryDelete_Click(object sender, EventArgs e)
        {
            DateTime time = DateTime.Now.AddDays((double) (((int) this.nudHistoryDelete.Value) * -1));
            int num = this.zoneDatabase.Count + this.encDatabase.Count;
            int num2 = 0;
            for (int i = this.zoneDatabase.Count - 1; i >= 0; i--)
            {
                if (this.zoneDatabase.Values[i].StartTime < time)
                {
                    num2++;
                    this.zoneDatabase.RemoveAt(i);
                }
            }
            for (int j = this.encDatabase.Count - 1; j >= 0; j--)
            {
                if (this.encDatabase.Values[j].StartTime < time)
                {
                    num2++;
                    this.encDatabase.RemoveAt(j);
                }
            }
            MessageBox.Show(string.Format(this.Trans["messageBox-cullHistory"].DisplayedText, num2, num), this.Trans["messageBoxTitle-cullHistory"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }

        private void btnMergeChecked_Click(object sender, EventArgs e)
        {
            base.UseWaitCursor = true;
            Application.DoEvents();
            try
            {
                EncounterData data;
                if (this.opSelectiveParsing.rbSParseFull.Checked)
                {
                    data = new EncounterData(ActGlobals.charName, "Import", this.opSelectiveParsing.cbSParseIgnoreEnemies.Checked, this.zoneList[0]);
                }
                else
                {
                    data = new EncounterData(ActGlobals.charName, "Import", this.zoneList[0]);
                }
                int num = 0;
                for (int i = 0; i < this.tvDG.Nodes.Count; i++)
                {
                    for (int j = 0; j < this.tvDG.Nodes[i].Nodes.Count; j++)
                    {
                        TreeNode node = this.tvDG.Nodes[i].Nodes[j];
                        if (node.Checked)
                        {
                            num++;
                            EncounterData data2 = this.zoneList[i].Items[j];
                            if (data2.StartTimes.Count > 0)
                            {
                                data.StartTimes.AddRange(data2.StartTimes);
                            }
                            else
                            {
                                data.StartTimes.Add(data2.StartTime);
                            }
                            if (data2.EndTimes.Count > 0)
                            {
                                data.EndTimes.AddRange(data2.EndTimes);
                            }
                            else
                            {
                                data.EndTimes.Add(data2.EndTime);
                            }
                            List<CombatantData> list = new List<CombatantData>(data2.Items.Values);
                            for (int k = 0; k < list.Count; k++)
                            {
                                AttackType type = null;
                                if (list[k].AllOut.TryGetValue(ActGlobals.ActLocalization.LocalizationStrings["attackTypeTerm-all"].DisplayedText, out type))
                                {
                                    for (int m = 0; m < type.Items.Count; m++)
                                    {
                                        data.AddCombatAction(type.Items[m]);
                                    }
                                }
                            }
                            data.LogLines.AddRange(data2.LogLines);
                            data.CharName = data2.CharName;
                        }
                    }
                }
                if (num > 0)
                {
                    data.Title = string.Format("Merged({0})", num);
                    this.zoneList[0].Items.Add(data);
                    this.PopulateTView();
                    this.tvDG.Nodes[0].Expand();
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
            base.UseWaitCursor = false;
        }

        private void btnNavBack_Click(object sender, EventArgs e)
        {
            if (this.tableType != "EL")
            {
                this.tvDG.SelectedNode = this.tvDG.SelectedNode.Parent;
                this.tvDG.SelectedNode.Collapse();
            }
        }

        private void btnOptionSearchClear_Click(object sender, EventArgs e)
        {
            this.tbOptionsSearch.Text = "Search Options...";
            this.tbOptionsSearch.ForeColor = SystemColors.GrayText;
            this.RevertSearchHighlighting();
        }

        private void btnPluginBrowse_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog {
                CheckFileExists = true,
                CheckPathExists = true,
                Filter = "All Plugin Types|*.exe;*.dll;*.cs;*.vb;|Dynamic Link Library (*.dll)|*.dll|CSharp(C#) Source File (*.cs)|*.cs|Visual Basic.NET Source File (*.vb)|*.vb"
            };
            if ((this.folderAct != null) && this.folderAct.Exists)
            {
                dialog.InitialDirectory = this.folderAct.FullName;
            }
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                FileInfo info = null;
                try
                {
                    info = new FileInfo(dialog.FileName);
                    if (!info.Exists)
                    {
                        MessageBox.Show(this.Trans["messageBox-noFileFound"].DisplayedText, this.Trans["messageBoxTitle-noFileFound"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return;
                    }
                }
                catch
                {
                    return;
                }
                this.tbPluginPath.Text = dialog.FileName;
                this.lblPluginFileInfo.Text = string.Format("{3}\n{0,0} bytes, Last Modified: {1} - {2}", new object[] { info.Length, info.LastWriteTime.ToLongDateString(), info.LastWriteTime.ToLongTimeString(), info.Name });
            }
        }

        private void btnRecordsDelete_Click(object sender, EventArgs e)
        {
            for (int i = this.recordResults.Count - 1; i >= 0; i--)
            {
                if (this.clbRecordResults.GetItemChecked(i))
                {
                    if (this.recordResults[i].Type == 1)
                    {
                        this.encDatabase.Remove(this.recordResults[i].StartTime);
                    }
                    else
                    {
                        this.zoneDatabase.Remove(this.recordResults[i].StartTime);
                    }
                    this.recordResults.RemoveAt(i);
                }
            }
            this.clbRecordResults.BeginUpdate();
            this.clbRecordResults.Items.Clear();
            this.clbRecordResults.Items.AddRange(this.recordResults.ToArray());
            this.clbRecordResults.EndUpdate();
            List<DateTime> list = new List<DateTime>();
            for (int j = 0; j < this.recordResults.Count; j++)
            {
                list.Add(this.recordResults[j].StartTime);
            }
            this.mcRecords.BoldedDates = list.ToArray();
        }

        private void btnRecordSearchDateTime_Click(object sender, EventArgs e)
        {
            this.recordResults.Clear();
            for (int i = 0; i < this.zoneDatabase.Count; i++)
            {
                if (((this.zoneDatabase.Values[i].StartTime >= this.dtRecordStartTime.Value) && (this.zoneDatabase.Values[i].StartTime < this.dtRecordEndTime.Value)) && !this.recordResults.Contains(this.zoneDatabase.Values[i]))
                {
                    this.recordResults.Add(this.zoneDatabase.Values[i]);
                }
            }
            for (int j = 0; j < this.encDatabase.Count; j++)
            {
                if (((this.encDatabase.Values[j].StartTime >= this.dtRecordStartTime.Value) && (this.encDatabase.Values[j].StartTime < this.dtRecordEndTime.Value)) && !this.recordResults.Contains(this.encDatabase.Values[j]))
                {
                    this.recordResults.Add(this.encDatabase.Values[j]);
                }
            }
            for (int k = 0; k < this.recordResults.Count; k++)
            {
                for (int n = 0; n < this.zoneDatabase.Count; n++)
                {
                    if (((this.recordResults[k].Type == 1) && (this.recordResults[k].StartTime >= this.zoneDatabase.Values[n].StartTime)) && ((this.recordResults[k].StartTime < this.zoneDatabase.Values[n].EndTime) && !this.recordResults.Contains(this.zoneDatabase.Values[n])))
                    {
                        this.recordResults.Add(this.zoneDatabase.Values[n]);
                    }
                }
            }
            this.recordResults.Sort();
            this.clbRecordResults.BeginUpdate();
            this.clbRecordResults.Items.Clear();
            this.clbRecordResults.Items.AddRange(this.recordResults.ToArray());
            this.clbRecordResults.EndUpdate();
            List<DateTime> list = new List<DateTime>();
            for (int m = 0; m < this.recordResults.Count; m++)
            {
                list.Add(this.recordResults[m].StartTime);
            }
            this.mcRecords.BoldedDates = list.ToArray();
        }

        private void btnRecordSearchText_Click(object sender, EventArgs e)
        {
            this.recordResults.Clear();
            if (!string.IsNullOrEmpty(this.tbRecordSearchText.Text))
            {
                if (this.cbRecordSearchZones.Checked)
                {
                    for (int k = 0; k < this.zoneDatabase.Count; k++)
                    {
                        if (this.zoneDatabase.Values[k].Label.ToLower().Contains(this.tbRecordSearchText.Text.ToLower()) && !this.recordResults.Contains(this.zoneDatabase.Values[k]))
                        {
                            this.recordResults.Add(this.zoneDatabase.Values[k]);
                        }
                    }
                }
                if (this.cbRecordSearchEncs.Checked)
                {
                    for (int m = 0; m < this.encDatabase.Count; m++)
                    {
                        if (this.encDatabase.Values[m].Label.ToLower().Contains(this.tbRecordSearchText.Text.ToLower()) && !this.recordResults.Contains(this.encDatabase.Values[m]))
                        {
                            this.recordResults.Add(this.encDatabase.Values[m]);
                        }
                    }
                }
            }
            for (int i = 0; i < this.recordResults.Count; i++)
            {
                for (int n = 0; n < this.zoneDatabase.Count; n++)
                {
                    if (((this.recordResults[i].Type == 1) && (this.recordResults[i].StartTime >= this.zoneDatabase.Values[n].StartTime)) && ((this.recordResults[i].StartTime < this.zoneDatabase.Values[n].EndTime) && !this.recordResults.Contains(this.zoneDatabase.Values[n])))
                    {
                        this.recordResults.Add(this.zoneDatabase.Values[n]);
                    }
                }
            }
            this.recordResults.Sort();
            this.clbRecordResults.BeginUpdate();
            this.clbRecordResults.Items.Clear();
            this.clbRecordResults.Items.AddRange(this.recordResults.ToArray());
            this.clbRecordResults.EndUpdate();
            List<DateTime> list = new List<DateTime>();
            for (int j = 0; j < this.recordResults.Count; j++)
            {
                list.Add(this.recordResults[j].StartTime);
            }
            this.mcRecords.BoldedDates = list.ToArray();
        }

        private void btnRecordsImport_Click(object sender, EventArgs e)
        {
            ThreadInvokes.ControlSetVisible(ActGlobals.oFormImportProgress, ActGlobals.oFormImportProgress, true);
            Application.DoEvents();
            this.importThread = new Thread(new ThreadStart(this.ThreadHistoryImport));
            this.importThread.Name = "File Importer";
            this.importThread.IsBackground = true;
            this.importThread.SetApartmentState(ApartmentState.STA);
            this.importThread.Start();
        }

        private void btnRecordsSelectEncs_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < this.clbRecordResults.Items.Count; i++)
            {
                HistoryRecord record = (HistoryRecord) this.clbRecordResults.Items[i];
                if (record.Type == 1)
                {
                    this.clbRecordResults.SetItemChecked(i, true);
                }
            }
        }

        private void btnRecordsSelectZones_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < this.clbRecordResults.Items.Count; i++)
            {
                HistoryRecord record = (HistoryRecord) this.clbRecordResults.Items[i];
                if (record.Type == 0)
                {
                    this.clbRecordResults.SetItemChecked(i, true);
                }
            }
        }

        private void btnRefresh_Click(object sender, EventArgs e)
        {
            this.CullEncounters();
            ThreadInvokes.TreeViewClear(this, this.tvDG);
            this.PopulateTView();
            this.lvDG.XPFlushUpdate();
        }

        private void btnRemoveTrigger_Click(object sender, EventArgs e)
        {
            string key = this.tbTriggerCategory.Text + "|" + this.tbTriggerText.Text;
            if (this.customTriggers.ContainsKey(key))
            {
                CustomTrigger trigger = this.customTriggers[key];
                if (trigger.ResultsTab != null)
                {
                    this.tcTriggers.TabPages.Remove(trigger.ResultsTab);
                }
                this.customTriggers.Remove(key);
            }
            this.rebuildActiveCustomTriggers = true;
            this.rebuildCustomTriggerTreeView = true;
        }

        private void btnSearchLv_Click(object sender, EventArgs e)
        {
            Button button = (Button) sender;
            CustomTrigger tag = (CustomTrigger) button.Tag;
            int num = 0;
            tag.TriggerListView.BeginUpdate();
            foreach (ListViewItem item in tag.TriggerListView.Items)
            {
                string str = (string) item.Tag;
                if (str.ToUpper().IndexOf(tag.TriggerSearchBox.Text.ToUpper()) > -1)
                {
                    num++;
                    item.BackColor = System.Drawing.Color.LemonChiffon;
                }
                else
                {
                    item.BackColor = item.ListView.BackColor;
                }
            }
            tag.TriggerListView.EndUpdate();
            MessageBox.Show(string.Format(this.Trans["messageBox-searchResults"].DisplayedText, num), this.Trans["messageBoxTitle-searchResults"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            tag.TabbedCurrentIndex = -1;
        }

        private void btnSearchRegexLv_Click(object sender, EventArgs e)
        {
            Button button = (Button) sender;
            CustomTrigger tag = (CustomTrigger) button.Tag;
            Regex regex = new Regex(tag.TriggerSearchBox.Text, RegexOptions.IgnoreCase);
            int num = 0;
            tag.TriggerListView.BeginUpdate();
            foreach (ListViewItem item in tag.TriggerListView.Items)
            {
                string input = (string) item.Tag;
                if (regex.IsMatch(input))
                {
                    num++;
                    item.BackColor = System.Drawing.Color.LemonChiffon;
                }
                else
                {
                    item.BackColor = item.ListView.BackColor;
                }
            }
            tag.TriggerListView.EndUpdate();
            MessageBox.Show(string.Format(this.Trans["messageBox-searchResults"].DisplayedText, num), this.Trans["messageBoxTitle-searchResults"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            tag.TabbedCurrentIndex = -1;
        }

        private void btnShowChecks_Click(object sender, EventArgs e)
        {
            ThreadInvokes.TreeViewClear(this, this.tvDG);
            this.tvDG.CheckBoxes = this.cbShowChecks.Checked;
            this.PopulateTView();
            this.btnDeleteChecked.Visible = this.cbShowChecks.Checked;
            this.btnMergeChecked.Visible = this.cbShowChecks.Checked;
        }

        internal void btnShowTextFormatWindow_Click(object sender, EventArgs e)
        {
            if (((Button) sender) == this.opTextExports.btnAddPresetClip)
            {
                TextExportFormatOptions initData = (this.opTextExports.ddlClipFormat.SelectedIndex == -1) ? this.defaultTextFormat : this.textExportFormats[this.opTextExports.ddlClipFormat.SelectedIndex];
                ActGlobals.oFormExportFormat.ShowWindow(initData);
            }
            else if (((Button) sender) == this.opMiniParse.btnAddPresetMini)
            {
                TextExportFormatOptions options2 = (this.opMiniParse.ddlMiniFormat.SelectedIndex == -1) ? this.defaultTextFormat : this.textExportFormats[this.opMiniParse.ddlMiniFormat.SelectedIndex];
                ActGlobals.oFormExportFormat.ShowWindow(options2);
            }
            else if (((Button) sender) == this.opLcdGeneral.btnLcdAddMiniPreset)
            {
                TextExportFormatOptions options3 = (this.opLcdGeneral.ddlLcdMiniFormat.SelectedIndex == -1) ? this.defaultTextFormat : this.textExportFormats[this.opLcdGeneral.ddlLcdMiniFormat.SelectedIndex];
                ActGlobals.oFormExportFormat.ShowWindow(options3);
            }
            else if (((Button) sender) == this.opLcdGeneral.btnLcdAddPersonalPreset)
            {
                TextExportFormatOptions options4 = (this.opLcdGeneral.ddlLcdMiniFormat.SelectedIndex == -1) ? this.defaultTextFormat : this.textExportFormats[this.opLcdGeneral.ddlLcdPersonalFormat.SelectedIndex];
                ActGlobals.oFormExportFormat.ShowWindow(options4);
            }
        }

        private void btnSndTriggerBrowse_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            DialogResult cancel = DialogResult.Cancel;
            if ((this.folderMedia != null) && this.folderMedia.Exists)
            {
                dialog.InitialDirectory = this.folderMedia.FullName;
            }
            dialog.Filter = "Waveform Files (*.wav)|*.wav";
            try
            {
                cancel = dialog.ShowDialog();
            }
            catch (SecurityException exception)
            {
                MessageBox.Show(this.Trans["messageBoxTitle-localSecurityPolicy"].DisplayedText + exception.Message, this.Trans["messageBoxTitle-localSecurityPolicy"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                this.WriteExceptionLog(exception, "SecurityException");
                return;
            }
            if (cancel == DialogResult.OK)
            {
                this.folderMedia = new DirectoryInfo(Path.GetDirectoryName(dialog.FileName));
                this.tbSndTrigger.Text = dialog.FileName;
                this.rbSndTriggerWAV.Checked = true;
            }
        }

        private void btnSndTriggerPlay_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.rbSndTriggerTTS.Checked)
                {
                    this.TTS(this.tbSndTrigger.Text);
                }
                if (this.rbSndTriggerWAV.Checked)
                {
                    this.PlaySound(this.tbSndTrigger.Text);
                }
                if (this.rbSndTriggerBeep.Checked)
                {
                    SystemSounds.Beep.Play();
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
                SystemSounds.Beep.Play();
            }
        }

        internal void CancelImport()
        {
            try
            {
                this.importThread.Abort();
                ActGlobals.oFormImportProgress.ResetBatchStats();
                ActGlobals.oFormImportProgress.SetBatch(0, 1);
                ActGlobals.oFormImportProgress.SetProgress(-1);
            }
            catch
            {
            }
            this.EndCombat(false);
            this.ActiveZone = this.zoneList[this.zoneList.Count - 1];
            this.currentZone = this.ActiveZone.ZoneName;
            if (this.ActiveZone.ActiveEncounter != null)
            {
                this.inCombat = this.ActiveZone.ActiveEncounter.Active;
            }
            this.SetCharName(true);
            try
            {
                this.readThreadLock = false;
                ActGlobals.oFormActMain.opMisc.lblLogFile.Text = "Parsing Resumed...";
            }
            catch
            {
            }
            this.importThreadAlive = false;
        }

        private void cbbMiniParse_CheckedChanged(object sender, EventArgs e)
        {
            ActGlobals.oFormMiniParse.Visible = this.cbbMiniParse.Checked;
        }

        private void cbbMiniParse_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                this.opMiniParse.cbMiniClickThrough.Checked = !this.opMiniParse.cbMiniClickThrough.Checked;
            }
        }

        private void cbbShowTimers_CheckedChanged(object sender, EventArgs e)
        {
            ActGlobals.oFormSpellTimersPanel.Visible = this.cbbShowTimers.Checked;
            if (ActGlobals.oFormSpellTimersPanel.Visible)
            {
                ActGlobals.oFormSpellTimersPanel2.Visible = ActGlobals.oFormSpellTimers.AllowPanel2;
            }
            else
            {
                ActGlobals.oFormSpellTimersPanel2.Visible = false;
            }
        }

        private void cbbShowTimers_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                ActGlobals.oFormSpellTimers.cbTimersClickThrough.Checked = !ActGlobals.oFormSpellTimers.cbTimersClickThrough.Checked;
                ActGlobals.oFormSpellTimers.cbTimersClickThrough2.Checked = ActGlobals.oFormSpellTimers.cbTimersClickThrough.Checked;
            }
        }

        internal void cbClipConnect_CheckedChanged()
        {
            if (ActGlobals.oFormActMain.opMisc.cbClipConnect.Checked)
            {
                if (this.opLcdGeneral.cbLcdRoute.Checked && this.opLcdGeneral.cbLcdRoute.Enabled)
                {
                    this.ClipConnect();
                }
                else
                {
                    this.clipConnectThread = new Thread(new ThreadStart(this.ClipConnect));
                    this.clipConnectThread.Priority = ThreadPriority.Normal;
                    this.clipConnectThread.Name = "External Clipboard Connect Thread";
                    this.clipConnectThread.SetApartmentState(ApartmentState.STA);
                    this.clipConnectThread.IsBackground = true;
                    this.clipConnectThread.Start();
                }
            }
            else
            {
                try
                {
                    this.clipXmlWriter.WriteEndDocument();
                    this.clipXmlWriter.Flush();
                    this.clipConnectThread.Abort();
                    this.clipNetStream.Close();
                    this.clipTcpClient.Close();
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, "Not Connected.");
                }
                catch (NullReferenceException)
                {
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, "Not Connected.");
                }
                catch (Exception exception)
                {
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, exception.Message);
                    this.WriteExceptionLog(exception, string.Empty);
                }
            }
        }

        internal void cbLCDEnabled_CheckedChanged()
        {
            if (!this.opLcdGeneral.cbLcdEnabled.Checked)
            {
                this.LcdUnregisterMode("Mini Window");
                this.LcdUnregisterMode("Personal Stats");
                this.LcdUnregisterMode("Spell Timers");
                this.LcdUnregisterMode("Sort Bars");
                try
                {
                    if (this.opLcdGeneral.cbLcdRoute.Enabled && this.opLcdGeneral.cbLcdRoute.Checked)
                    {
                        this.clipXmlWriter.WriteStartElement("LcdKill");
                        this.clipXmlWriter.WriteEndElement();
                        this.clipXmlWriter.Flush();
                    }
                    if (this.lcdDevice != null)
                    {
                        this.lcdDevice.Dispose();
                        this.lcdDevice = null;
                    }
                    if (this.lcdHandle != null)
                    {
                        this.lcdHandle.Dispose();
                        this.lcdHandle = null;
                    }
                }
                catch
                {
                }
                this.opLcdGeneral.lblLcdQuery.Text = "Disconnected";
            }
            else
            {
                this.LcdRegisterMode("Mini Window");
                this.LcdRegisterMode("Personal Stats");
                this.LcdRegisterMode("Spell Timers");
                this.LcdRegisterMode("Sort Bars");
                this.InitLcd(true);
            }
        }

        private void cbRecordsSave_CheckedChanged(object sender, EventArgs e)
        {
            if (this.cbRecordsSave.Checked)
            {
                string str = Path.GetFileNameWithoutExtension(Process.GetCurrentProcess().MainModule.FileName) + ".historydb.xml";
                FileInfo info = new FileInfo(this.AppDataFolder.FullName + @"\" + str);
                if (info.Exists)
                {
                    this.LoadXmlRecords(info.FullName);
                }
                this.SaveXmlRecords(info.FullName);
            }
        }

        internal void cbTimersServerEnabled_CheckedChanged()
        {
            if (this.opWebServer.cbWebServerEnabled.Checked)
            {
                this.timersServerThread = new Thread(new ThreadStart(this.ThreadSpellTimersServer));
                this.timersServerThread.Name = "Web Server";
                this.timersServerThread.IsBackground = true;
                this.timersServerThread.SetApartmentState(ApartmentState.STA);
                this.timersServerThread.Start();
            }
        }

        internal void ChangeFormBackColor(Form Target, System.Drawing.Color NewColor)
        {
            if (Target.BackColor.ToArgb() != NewColor.ToArgb())
            {
                Target.BackColor = NewColor;
                this.ChangeSubFormBackColor(Target.Controls, NewColor);
            }
        }

        private void ChangeSubFormBackColor(Control.ControlCollection controlCollection, System.Drawing.Color NewColor)
        {
            foreach (Control control in controlCollection)
            {
                if ((control.BackColor == System.Drawing.Color.Transparent) || (control.BackColor == SystemColors.Control))
                {
                    control.BackColor = NewColor;
                }
                this.ChangeSubFormBackColor(control.Controls, NewColor);
            }
        }

        private void ChangeSubFormWindowBackColor(Control.ControlCollection controlCollection, System.Drawing.Color NewColor)
        {
            foreach (Control control in controlCollection)
            {
                if (control.BackColor == SystemColors.Window)
                {
                    control.BackColor = NewColor;
                }
                this.ChangeSubFormWindowBackColor(control.Controls, NewColor);
            }
        }

        private void ChangeSubFormWindowForeColor(Control.ControlCollection controlCollection, System.Drawing.Color NewColor)
        {
            foreach (Control control in controlCollection)
            {
                if (control.ForeColor == SystemColors.WindowText)
                {
                    control.ForeColor = NewColor;
                }
                this.ChangeSubFormWindowForeColor(control.Controls, NewColor);
            }
        }

        internal void ChangeWindowBackColor(Form Target, System.Drawing.Color NewColor)
        {
            this.ChangeSubFormWindowBackColor(Target.Controls, NewColor);
        }

        internal void ChangeWindowForeColor(Form Target, System.Drawing.Color NewColor)
        {
            this.ChangeSubFormWindowForeColor(Target.Controls, NewColor);
        }

        public void ChangeZone(string ZoneName)
        {
            if (this.lastZoneRecord != null)
            {
                this.lastZoneRecord.EndTime = this.LastKnownTime;
                this.ZoneDatabaseAdd(this.lastZoneRecord);
            }
            this.currentZone = ZoneName;
            this.lastZoneRecord = new HistoryRecord(0, this.LastKnownTime, this.LastKnownTime.AddDays(1.0), this.currentZone, ActGlobals.charName);
            this.RebuildActiveCustomTriggers();
        }

        private void CheckIdleEndCombat()
        {
            if ((this.inCombat && this.opMainTableGen.cbIdleEnd.Checked) && ((this.LastKnownTime - this.lastHostileTime) > TimeSpan.FromSeconds((double) ((int) this.opMainTableGen.nudIdleLimit.Value))))
            {
                this.EndCombat(true);
            }
        }

        private void clbRecordResults_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.clbRecordResults.SelectedIndex > -1)
            {
                try
                {
                    HistoryRecord record = this.recordResults[this.clbRecordResults.SelectedIndex];
                    this.dtRecordStartDate.Value = record.StartTime;
                    this.dtRecordStartTime.Value = record.StartTime;
                    this.dtRecordEndDate.Value = record.EndTime;
                    this.dtRecordEndTime.Value = record.EndTime;
                }
                catch
                {
                }
            }
        }

        private void ClipConnect()
        {
            if (ActGlobals.oFormActMain.opMisc.cbClipConnect.Checked)
            {
                string str2;
                int num;
                string text = ActGlobals.oFormActMain.opMisc.tbClipIP.Text;
                Regex regex = new Regex(@"\d+\.\d+\.\d+\.\d+");
                Regex regex2 = new Regex(@"(\d+\.\d+\.\d+\.\d+):(\d{2,5})");
                if (regex2.IsMatch(text))
                {
                    str2 = regex2.Replace(text, "$1");
                    num = System.Convert.ToInt32(regex2.Replace(text, "$2"));
                }
                else if (regex.IsMatch(text))
                {
                    str2 = text;
                    num = 0x252a;
                }
                else
                {
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, "The IP/Port syntax is invalid.");
                    return;
                }
                try
                {
                    this.clipTcpClient = new TcpClient();
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, "Attempting connection...");
                    Application.DoEvents();
                    this.clipTcpClient.Connect(IPAddress.Parse(str2), num);
                    this.clipNetStream = this.clipTcpClient.GetStream();
                    this.clipXmlWriter = new XmlTextWriter(this.clipNetStream, Encoding.UTF8);
                    this.clipXmlWriter.WriteStartDocument(true);
                    this.clipXmlWriter.WriteStartElement("Connection");
                    this.clipXmlWriter.WriteStartElement("Ping");
                    this.clipXmlWriter.WriteEndElement();
                    this.clipXmlWriter.Flush();
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, string.Format("Connected to {0}:{1}.", str2, num));
                    ThreadInvokes.ControlSetEnabled(this, this.opLcdGeneral.cbLcdRoute, true);
                    this.clipReadThread = new Thread(new ThreadStart(this.ClipReadDataThread));
                    this.clipReadThread.IsBackground = true;
                    this.clipReadThread.Priority = ThreadPriority.AboveNormal;
                    this.clipReadThread.Name = "Clipboard Data Reader";
                    this.clipReadThread.SetApartmentState(ApartmentState.STA);
                    this.clipReadThread.Start();
                }
                catch (ThreadAbortException)
                {
                }
                catch (SocketException exception)
                {
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, "Connection Failed.");
                    this.WriteExceptionLog(exception, this.Trans["messageBoxTitle-clipConnectError"].DisplayedText);
                    MessageBox.Show(exception.Message + this.Trans["messageBox-clipConnectError"].DisplayedText, this.Trans["messageBoxTitle-clipConnectError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                catch (Exception exception2)
                {
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, "Connection Failed.");
                    this.WriteExceptionLog(exception2, this.Trans["messageBoxTitle-clipConnectError"].DisplayedText);
                    MessageBox.Show(exception2.Message, this.Trans["messageBoxTitle-clipConnectError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
            else
            {
                try
                {
                    this.clipXmlWriter.WriteEndDocument();
                    this.clipXmlWriter.Flush();
                    this.clipNetStream.Close();
                    this.clipTcpClient.Close();
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, "Not Connected.");
                    this.clipReadThread.Abort();
                }
                catch (ThreadAbortException)
                {
                }
                catch (NullReferenceException)
                {
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, "Not Connected.");
                }
                catch (Exception exception3)
                {
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblClipStatus, exception3.Message);
                    this.WriteExceptionLog(exception3, string.Empty);
                }
            }
        }

        private void ClipReadDataThread()
        {
            XmlTextReader reader = new XmlTextReader(this.clipNetStream);
            while (true)
            {
                try
                {
                    do
                    {
                        Thread.Sleep(1);
                    }
                    while (!reader.Read() || (reader.NodeType != XmlNodeType.Element));
                    if (reader.Name == "LcdError")
                    {
                        this.UpdateLcdStatus(reader.ReadString(), true);
                    }
                    else if (reader.Name == "LcdButton")
                    {
                        this.DoLcdButton(reader.ReadString());
                    }
                    else if (reader.Name == "LcdCaps")
                    {
                        this.lcdDeviceSet = true;
                        if (reader.GetAttribute("BPP") == "8")
                        {
                            this.lcdDeviceType = LcdDeviceType.Monochrome;
                        }
                        else
                        {
                            this.lcdDeviceType = LcdDeviceType.Qvga;
                        }
                        this.lcdWaitForDevice.Set();
                        ThreadInvokes.ControlSetText(this, this.opLcdGeneral.lblLcdQuery, string.Format("{0}x{1}px {2}bpp LCD found (via Sharer)", reader.GetAttribute("W"), reader.GetAttribute("H"), reader.GetAttribute("BPP")));
                    }
                }
                catch
                {
                }
            }
        }

        private void cmiATExport_Click(object sender, EventArgs e)
        {
            try
            {
                StringBuilder builder = new StringBuilder();
                builder.AppendFormat("<center><h4>{0}</h4></center><table cellspacing='2' cellpadding='2' border='1' width='100%'>", this.lblDG.Text);
                List<MasterSwing> currentTable = (List<MasterSwing>) this.currentTable;
                builder.Append(this.ExportTBodyHTML(currentTable));
                builder.Append("</table>");
                builder.Replace("\t", "");
                builder.Replace("\r\n", "");
                this.SendHtmlToClipboard(builder.ToString());
                SystemSounds.Beep.Play();
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void cmiATExportCSV_Click(object sender, EventArgs e)
        {
            List<MasterSwing> currentTable = (List<MasterSwing>) this.currentTable;
            new MemoryStream();
            StringBuilder builder = new StringBuilder();
            foreach (string str in MasterSwing.ColHeaderCollection)
            {
                builder.AppendFormat("{0},", str.Replace(',', '_'));
            }
            builder.Remove(builder.Length - 1, 1);
            builder.Append("\n");
            foreach (MasterSwing swing in currentTable)
            {
                foreach (string str2 in swing.ColCollection)
                {
                    builder.AppendFormat("{0},", str2.Replace(',', '_'));
                }
                builder.Remove(builder.Length - 1, 1);
                builder.Append("\n");
            }
            this.SendToClipboard(builder.ToString(), true);
            SystemSounds.Beep.Play();
        }

        private void cmiATExportXML_Click(object sender, EventArgs e)
        {
            List<MasterSwing> currentTable = (List<MasterSwing>) this.currentTable;
            MemoryStream w = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(w, Encoding.UTF8) {
                Formatting = Formatting.Indented,
                Indentation = 4,
                Namespaces = false
            };
            writer.WriteStartDocument();
            writer.WriteStartElement("", "AttackTypeTable", "");
            writer.WriteAttributeString("", "Name", "", this.lblDG.Text);
            foreach (MasterSwing swing in currentTable)
            {
                writer.WriteStartElement("", "Row", "");
                for (int i = 0; i < MasterSwing.ColHeaderCollection.Length; i++)
                {
                    writer.WriteStartElement("", MasterSwing.ColHeaderCollection[i], "");
                    writer.WriteString(swing.ColCollection[i]);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            w.Seek(0, SeekOrigin.Begin);
            this.SendToClipboard(new StreamReader(w, Encoding.UTF8).ReadToEnd(), true);
            SystemSounds.Beep.Play();
        }

        private void cmiCDExport_Click(object sender, EventArgs e)
        {
            try
            {
                StringBuilder builder = new StringBuilder();
                builder.AppendFormat("<center><h4>{0}</h4></center><table cellspacing='2' cellpadding='2' border='1' width='100%'>", this.lblDG.Text);
                List<DamageTypeData> currentTable = (List<DamageTypeData>) this.currentTable;
                builder.Append(this.ExportTBodyHTML(currentTable));
                builder.Append("</table>");
                builder.Replace("\t", string.Empty);
                builder.Replace("\r\n", string.Empty);
                this.SendHtmlToClipboard(builder.ToString());
                SystemSounds.Beep.Play();
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void cmiCDExportCSV_Click(object sender, EventArgs e)
        {
            List<DamageTypeData> currentTable = (List<DamageTypeData>) this.currentTable;
            new MemoryStream();
            StringBuilder builder = new StringBuilder();
            foreach (string str in DamageTypeData.ColHeaderCollection)
            {
                builder.AppendFormat("{0},", str.Replace(',', '_'));
            }
            builder.Remove(builder.Length - 1, 1);
            builder.Append("\n");
            foreach (DamageTypeData data in currentTable)
            {
                foreach (string str2 in data.ColCollection)
                {
                    builder.AppendFormat("{0},", str2.Replace(',', '_'));
                }
                builder.Remove(builder.Length - 1, 1);
                builder.Append("\n");
            }
            this.SendToClipboard(builder.ToString(), true);
            SystemSounds.Beep.Play();
        }

        private void cmiCDExportXML_Click(object sender, EventArgs e)
        {
            List<DamageTypeData> currentTable = (List<DamageTypeData>) this.currentTable;
            MemoryStream w = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(w, Encoding.UTF8) {
                Formatting = Formatting.Indented,
                Indentation = 4,
                Namespaces = false
            };
            writer.WriteStartDocument();
            writer.WriteStartElement("", "CombatantTable", "");
            writer.WriteAttributeString("", "Name", "", this.lblDG.Text);
            foreach (DamageTypeData data in currentTable)
            {
                writer.WriteStartElement("", "Row", "");
                for (int i = 0; i < DamageTypeData.ColHeaderCollection.Length; i++)
                {
                    writer.WriteStartElement("", DamageTypeData.ColHeaderCollection[i], "");
                    writer.WriteString(data.ColCollection[i]);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            w.Seek(0, SeekOrigin.Begin);
            this.SendToClipboard(new StreamReader(w, Encoding.UTF8).ReadToEnd(), true);
            SystemSounds.Beep.Play();
        }

        private void cmiCopy_Click(object sender, EventArgs e)
        {
            Clipboard.SetDataObject(this.pbDG.Image, true);
        }

        private void cmiDeathReport_Click(object sender, EventArgs e)
        {
            try
            {
                ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Parent.Index];
                CombatantData combatant = data.Items[this.tvDG.SelectedNode.Parent.Index].GetCombatant(this.tvDG.SelectedNode.Text);
                ActGlobals.oFormResistsDeathReport.ShowDeathReport(combatant);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void cmiDGRefresh_Click(object sender, EventArgs e)
        {
            bool flag = this.cmiEnabled.Checked;
            this.cmiEnabled.Checked = false;
            this.lastSelectedNode = null;
            TreeViewEventArgs args = new TreeViewEventArgs(this.tvDG.SelectedNode, TreeViewAction.Unknown);
            this.tv1_AfterSelect(sender, args);
            this.cmiEnabled.Checked = flag;
        }

        private void cmiEDExport_Click(object sender, EventArgs e)
        {
            try
            {
                StringBuilder builder = new StringBuilder();
                builder.AppendFormat("<center><h4>{0}</h4></center><table cellspacing='2' cellpadding='2' border='1' width='100%'>", this.lblDG.Text);
                List<CombatantData> currentTable = (List<CombatantData>) this.currentTable;
                builder.Append(this.ExportTBodyHTML(currentTable));
                builder.Append("</table>");
                builder.Replace("\t", string.Empty);
                builder.Replace("\r\n", string.Empty);
                this.SendHtmlToClipboard(builder.ToString());
                SystemSounds.Beep.Play();
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void cmiEDExportCSV_Click(object sender, EventArgs e)
        {
            List<CombatantData> currentTable = (List<CombatantData>) this.currentTable;
            new MemoryStream();
            StringBuilder builder = new StringBuilder();
            foreach (string str in CombatantData.ColHeaderCollection)
            {
                builder.AppendFormat("{0},", str.Replace(',', '_'));
            }
            builder.Remove(builder.Length - 1, 1);
            builder.Append("\n");
            foreach (CombatantData data in currentTable)
            {
                foreach (string str2 in data.ColCollection)
                {
                    builder.AppendFormat("{0},", str2.Replace(',', '_'));
                }
                builder.Remove(builder.Length - 1, 1);
                builder.Append("\n");
            }
            this.SendToClipboard(builder.ToString(), true);
            SystemSounds.Beep.Play();
        }

        private void cmiEDExportXML_Click(object sender, EventArgs e)
        {
            List<CombatantData> currentTable = (List<CombatantData>) this.currentTable;
            MemoryStream w = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(w, Encoding.UTF8) {
                Formatting = Formatting.Indented,
                Indentation = 4,
                Namespaces = false
            };
            writer.WriteStartDocument();
            writer.WriteStartElement("", "EncounterTable", "");
            writer.WriteAttributeString("", "Name", "", this.lblDG.Text);
            foreach (CombatantData data in currentTable)
            {
                writer.WriteStartElement("", "Row", "");
                for (int i = 0; i < CombatantData.ColHeaderCollection.Length; i++)
                {
                    writer.WriteStartElement("", CombatantData.ColHeaderCollection[i], "");
                    writer.WriteString(data.ColCollection[i]);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            w.Seek(0, SeekOrigin.Begin);
            this.SendToClipboard(new StreamReader(w, Encoding.UTF8).ReadToEnd(), true);
            SystemSounds.Beep.Play();
        }

        private void cmiEnabled_Click(object sender, EventArgs e)
        {
            this.cmiEnabled.Checked = !this.cmiEnabled.Checked;
        }

        private void cmiMDExport_Click(object sender, EventArgs e)
        {
            try
            {
                StringBuilder builder = new StringBuilder();
                builder.AppendFormat("<center><h4>{0}</h4></center><table cellspacing='2' cellpadding='2' border='1' width='100%'>", this.lblDG.Text);
                List<AttackType> currentTable = (List<AttackType>) this.currentTable;
                builder.Append(this.ExportTBodyHTML(currentTable));
                builder.Append("</table>");
                builder.Replace("\t", "");
                builder.Replace("\r\n", "");
                this.SendHtmlToClipboard(builder.ToString());
                SystemSounds.Beep.Play();
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void cmiMDExportCSV_Click(object sender, EventArgs e)
        {
            List<AttackType> currentTable = (List<AttackType>) this.currentTable;
            new MemoryStream();
            StringBuilder builder = new StringBuilder();
            foreach (string str in AttackType.ColHeaderCollection)
            {
                builder.AppendFormat("{0},", str.Replace(',', '_'));
            }
            builder.Remove(builder.Length - 1, 1);
            builder.Append("\n");
            foreach (AttackType type in currentTable)
            {
                foreach (string str2 in type.ColCollection)
                {
                    builder.AppendFormat("{0},", str2.Replace(',', '_'));
                }
                builder.Remove(builder.Length - 1, 1);
                builder.Append("\n");
            }
            this.SendToClipboard(builder.ToString(), true);
            SystemSounds.Beep.Play();
        }

        private void cmiMDExportXML_Click(object sender, EventArgs e)
        {
            List<AttackType> currentTable = (List<AttackType>) this.currentTable;
            MemoryStream w = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(w, Encoding.UTF8) {
                Formatting = Formatting.Indented,
                Indentation = 4,
                Namespaces = false
            };
            writer.WriteStartDocument();
            writer.WriteStartElement("", "DamageTypeTable", "");
            writer.WriteAttributeString("", "Name", "", this.lblDG.Text);
            foreach (AttackType type in currentTable)
            {
                writer.WriteStartElement("", "Row", "");
                for (int i = 0; i < AttackType.ColHeaderCollection.Length; i++)
                {
                    writer.WriteStartElement("", AttackType.ColHeaderCollection[i], "");
                    writer.WriteString(type.ColCollection[i]);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            w.Seek(0, SeekOrigin.Begin);
            this.SendToClipboard(new StreamReader(w, Encoding.UTF8).ReadToEnd(), true);
            SystemSounds.Beep.Play();
        }

        private void cmiMedianDelay_Click(object sender, EventArgs e)
        {
            try
            {
                AttackType type;
                ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Parent.Parent.Parent.Index];
                EncounterData data2 = data.Items[this.tvDG.SelectedNode.Parent.Parent.Parent.Index];
                DamageTypeData data4 = data2.GetCombatant(this.tvDG.SelectedNode.Parent.Parent.Text).Items[this.tvDG.SelectedNode.Parent.Text];
                if (data4.Items.TryGetValue(this.tvDG.SelectedNode.Text, out type))
                {
                    ActGlobals.oFormSpellRecastCalc.ShowMedian(type);
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void cmiRefresh_Click(object sender, EventArgs e)
        {
            bool flag = this.cmiEnabled.Checked;
            this.cmiEnabled.Checked = true;
            TreeViewEventArgs args = new TreeViewEventArgs(this.tvDG.SelectedNode, TreeViewAction.ByMouse);
            this.lastSelectedNode = null;
            this.tv1_AfterSelect(sender, args);
            this.cmiEnabled.Checked = flag;
        }

        private void cmiRtbCMI_Click(object sender, EventArgs e)
        {
            MenuItem item = (MenuItem) sender;
            string text = item.Text;
            if (text != null)
            {
                if (!(text == "Cut"))
                {
                    if (!(text == "Copy"))
                    {
                        if (!(text == "Paste"))
                        {
                            if (!(text == "Delete"))
                            {
                                if (!(text == "Select All"))
                                {
                                    if (text == "Undo")
                                    {
                                        this.rtbFeedback.Undo();
                                    }
                                    return;
                                }
                                this.rtbFeedback.SelectAll();
                                return;
                            }
                            this.rtbFeedback.SelectedText = string.Empty;
                            return;
                        }
                        this.rtbFeedback.Paste();
                        return;
                    }
                }
                else
                {
                    this.rtbFeedback.Cut();
                    return;
                }
                this.rtbFeedback.Copy();
            }
        }

        private void cmiSave_Click(object sender, EventArgs e)
        {
            try
            {
                SaveFileDialog dialog = new SaveFileDialog {
                    AddExtension = true,
                    CheckPathExists = true,
                    CreatePrompt = false,
                    Filter = "Portable Network Graphics (*.png)|*.png",
                    OverwritePrompt = true,
                    Title = "Save graph as...",
                    ValidateNames = true
                };
                if ((this.folderExports != null) && this.folderExports.Exists)
                {
                    dialog.InitialDirectory = this.folderExports.FullName;
                }
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    this.folderExports = new DirectoryInfo(Path.GetDirectoryName(dialog.FileName));
                    FileStream stream = new FileStream(dialog.FileName, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.None);
                    stream.Seek(0, SeekOrigin.Begin);
                    stream.SetLength(0);
                    this.pbDG.Image.Save(stream, ImageFormat.Png);
                    stream.Close();
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void cmitbRenameEnc_Click(object sender, EventArgs e)
        {
            this.cmitbRenameEnc.SelectAll();
        }

        private void cmitbRenameEnc_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Return)
            {
                try
                {
                    ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Index];
                    EncounterData data2 = data.Items[this.tvDG.SelectedNode.Index];
                    string text = this.cmitbRenameEnc.Text;
                    if (text != "")
                    {
                        data2.Title = text;
                        this.EncDatabaseAdd(new HistoryRecord(1, data2.StartTime, data2.EndTime, data2.Title, data2.CharName));
                        this.tvDG.SelectedNode.Text = data2.ToString();
                    }
                    this.cmsTView.Hide();
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, string.Empty);
                }
            }
        }

        private void cmiTextTable_Click(object sender, EventArgs e)
        {
            int[] numArray = new int[this.lvDG.Columns.Count];
            for (int i = 0; i < this.lvDG.Columns.Count; i++)
            {
                int length = this.lvDG.Columns[i].Text.Length;
                for (int m = 0; m < this.lvDG.VirtualListSize; m++)
                {
                    RetrieveVirtualItemEventArgs args = new RetrieveVirtualItemEventArgs(m);
                    this.lvDG_RetrieveVirtualItem(null, args);
                    int num4 = args.Item.SubItems[i].Text.Length;
                    if (num4 > length)
                    {
                        length = num4;
                    }
                }
                numArray[i] = length + 2;
            }
            StringBuilder builder = new StringBuilder();
            for (int j = 0; j < this.lvDG.Columns.Count; j++)
            {
                builder.Append(this.lvDG.Columns[j].Text.ToUpper().PadRight(numArray[j]));
            }
            builder.AppendLine();
            for (int k = 0; k < this.lvDG.VirtualListSize; k++)
            {
                RetrieveVirtualItemEventArgs args2 = new RetrieveVirtualItemEventArgs(k);
                this.lvDG_RetrieveVirtualItem(null, args2);
                for (int n = 0; n < args2.Item.SubItems.Count; n++)
                {
                    builder.Append(args2.Item.SubItems[n].Text.PadRight(numArray[n]));
                }
                builder.AppendLine();
            }
            ActGlobals.oFormActMain.SendToClipboard(builder.ToString(), true);
        }

        private void cmiTVDelete_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.tvDG.SelectedNode.Parent == null)
                {
                    if ((this.tvDG.SelectedNode.Index != 0) && (this.tvDG.SelectedNode.Index < (this.tvDG.Nodes.Count - 1)))
                    {
                        this.zoneList.RemoveAt(this.tvDG.SelectedNode.Index);
                        this.tvDG.SelectedNode.Remove();
                    }
                }
                else if ((this.tvDG.SelectedNode.Index > 0) || !this.zoneList[this.tvDG.SelectedNode.Parent.Index].PopulateAll)
                {
                    this.zoneList[this.tvDG.SelectedNode.Parent.Index].Items.RemoveAt(this.tvDG.SelectedNode.Index);
                    this.tvDG.SelectedNode.Remove();
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void cmiTVExport_Click(object sender, EventArgs e)
        {
            this.SendToClipboard(this.GetTextExport(this.tvDG.SelectedNode.Parent.Index, this.tvDG.SelectedNode.Index, this.opTextExports.ddlClipFormat.SelectedIndex), true);
            this.ExportBeep();
        }

        private void cmiTVExportCustom_ClickItem(object sender, EventArgs e)
        {
            ToolStripMenuItem item = (ToolStripMenuItem) sender;
            int index = item.Text.IndexOf(':');
            int num2 = int.Parse(item.Text.Substring(0, index));
            this.SendToClipboard(this.GetTextExport(this.tvDG.SelectedNode.Parent.Index, this.tvDG.SelectedNode.Index, (int) (num2 - 1)), true);
            this.ExportBeep();
        }

        private void cmiTVExportHTML_Click(object sender, EventArgs e)
        {
            this.exportZdIndex = this.tvDG.SelectedNode.Parent.Index;
            this.exportEdIndex = this.tvDG.SelectedNode.Index;
            this.StartHTMLThread();
        }

        private void cmiTVFileCustom_ClickItem(object sender, EventArgs e)
        {
            ToolStripMenuItem item = (ToolStripMenuItem) sender;
            int index = item.Text.IndexOf(':');
            int num2 = int.Parse(item.Text.Substring(0, index));
            MacroExportSetting setting = (MacroExportSetting) this.opTextExports.clbExFilePresets.Items[num2];
            string fileContents = this.GetTextExport(this.tvDG.SelectedNode.Parent.Index, this.tvDG.SelectedNode.Index, setting.ExportPresetIndex, setting.AlignToContent ? this.fontTabulation : null, setting.ExportMaxLines);
            if (this.SendToMacroFile(setting.ExportFile, fileContents, setting.ExportChannel))
            {
                this.ExportBeep();
            }
        }

        private void cmiViewLogs_Click(object sender, EventArgs e)
        {
            try
            {
                ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Index];
                EncounterData data2 = data.Items[this.tvDG.SelectedNode.Index];
                ActGlobals.oFormEncounterLogs.ShowLogs(data2.LogLines);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void cmsCustomTrigger_Opening(object sender, CancelEventArgs e)
        {
            if (this.tvCustomTriggers.SelectedNode != null)
            {
                this.copyAsSharableXMLToolStripMenuItem.Enabled = this.customTriggers.ContainsKey((string) this.tvCustomTriggers.SelectedNode.Tag);
                this.copyAsSharableXMLToolStripMenuItem2.Enabled = this.customTriggers.ContainsKey((string) this.tvCustomTriggers.SelectedNode.Tag);
            }
        }

        private void cmsTView_Opening(object sender, CancelEventArgs e)
        {
            try
            {
                string str;
                this.deleteToolStripMenuItem.Enabled = false;
                this.renameToolStripMenuItem.Enabled = false;
                this.exportToClipboardToolStripMenuItem.Enabled = false;
                this.exportCustomToClipboardToolStripMenuItem.Enabled = false;
                this.exportToEQ2HTMLToolStripMenuItem.Enabled = false;
                this.viewLogsToolStripMenuItem.Enabled = false;
                this.viewTimelineToolStripMenuItem.Enabled = false;
                this.viewEncounterVCRToolStripMenuItem.Enabled = false;
                this.deathReportToolStripMenuItem.Enabled = false;
                this.specialAttacksReportToolStripMenuItem.Enabled = false;
                this.calculateSpellTimerToolStripMenuItem.Enabled = false;
                this.lookupByCombatantToolStripMenuItem.Enabled = false;
                this.setEncounterAlliesToolStripMenuItem.Enabled = false;
                this.avoidanceReportToolStripMenuItem.Enabled = false;
                this.exportCustomToMacroFileToolStripMenuItem.Enabled = false;
                this.exportToMacroFileToolStripMenuItem.Enabled = false;
                this.avoidanceReportToolStripMenuItem1.Enabled = false;
                if ((this.tvDG.SelectedNode != null) && ((str = this.tableType) != null))
                {
                    if (!(str == "EL"))
                    {
                        if (str == "ED")
                        {
                            goto Label_018B;
                        }
                        if (str == "CD")
                        {
                            goto Label_0385;
                        }
                        if (str == "MD")
                        {
                            goto Label_03AB;
                        }
                        if (str == "AT")
                        {
                            goto Label_03B9;
                        }
                    }
                    else if ((this.tvDG.SelectedNode.Index != 0) && (this.tvDG.SelectedNode.Index != (this.zoneList.Count - 1)))
                    {
                        this.deleteToolStripMenuItem.Enabled = true;
                    }
                }
                return;
            Label_018B:
                this.deleteToolStripMenuItem.Enabled = true;
                this.renameToolStripMenuItem.Enabled = true;
                this.exportToClipboardToolStripMenuItem.Enabled = true;
                this.exportToMacroFileToolStripMenuItem.Enabled = true;
                this.exportCustomToClipboardToolStripMenuItem.Enabled = true;
                this.exportCustomToMacroFileToolStripMenuItem.Enabled = true;
                this.exportToEQ2HTMLToolStripMenuItem.Enabled = true;
                this.viewLogsToolStripMenuItem.Enabled = true;
                this.viewTimelineToolStripMenuItem.Enabled = true;
                this.viewEncounterVCRToolStripMenuItem.Enabled = true;
                this.avoidanceReportToolStripMenuItem1.Enabled = true;
                ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Index];
                EncounterData data2 = data.Items[this.tvDG.SelectedNode.Index];
                if (!data2.Active)
                {
                    this.setEncounterAlliesToolStripMenuItem.Enabled = true;
                }
                this.cmitbRenameEnc.Text = data2.Title;
                this.exportCustomToClipboardToolStripMenuItem.DropDownItems.Clear();
                for (int i = 1; i <= this.textExportFormats.Count; i++)
                {
                    TextExportFormatOptions options = this.textExportFormats[i - 1];
                    ToolStripMenuItem item = new ToolStripMenuItem(i + ": " + options.ToString());
                    item.Click += new EventHandler(this.cmiTVExportCustom_ClickItem);
                    this.exportCustomToClipboardToolStripMenuItem.DropDownItems.Add(item);
                }
                this.exportCustomToMacroFileToolStripMenuItem.DropDownItems.Clear();
                for (int j = 0; j < this.opTextExports.clbExFilePresets.Items.Count; j++)
                {
                    MacroExportSetting setting = (MacroExportSetting) this.opTextExports.clbExFilePresets.Items[j];
                    ToolStripMenuItem item2 = new ToolStripMenuItem(j + ": " + setting.ToString());
                    item2.Click += new EventHandler(this.cmiTVFileCustom_ClickItem);
                    this.exportCustomToMacroFileToolStripMenuItem.DropDownItems.Add(item2);
                }
                return;
            Label_0385:
                this.deathReportToolStripMenuItem.Enabled = true;
                this.specialAttacksReportToolStripMenuItem.Enabled = true;
                this.avoidanceReportToolStripMenuItem.Enabled = true;
                return;
            Label_03AB:
                this.lookupByCombatantToolStripMenuItem.Enabled = true;
                return;
            Label_03B9:
                this.calculateSpellTimerToolStripMenuItem.Enabled = true;
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private string CombatantFormatSwitch(CombatantData Data, string VarName, string Extra)
        {
            int startIndex = 0;
            switch (VarName)
            {
                case "name":
                    return Data.Name;

                case "NAME":
                    startIndex = int.Parse(Extra);
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME3":
                    startIndex = 3;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME4":
                    startIndex = 4;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME5":
                    startIndex = 5;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME6":
                    startIndex = 6;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME7":
                    startIndex = 7;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME8":
                    startIndex = 8;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME9":
                    startIndex = 9;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME10":
                    startIndex = 10;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME11":
                    startIndex = 11;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME12":
                    startIndex = 12;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME13":
                    startIndex = 13;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME14":
                    startIndex = 14;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "NAME15":
                    startIndex = 15;
                    if ((Data.Name.Length - startIndex) > 0)
                    {
                        return Data.Name.Remove(startIndex, Data.Name.Length - startIndex).Trim();
                    }
                    return Data.Name;

                case "DURATION":
                    return Data.Duration.TotalSeconds.ToString("0");

                case "duration":
                    return Data.DurationS;

                case "maxhit":
                    return Data.GetMaxHit(true);

                case "MAXHIT":
                    return Data.GetMaxHit(false);

                case "maxheal":
                    return Data.GetMaxHeal(true, false);

                case "MAXHEAL":
                    return Data.GetMaxHeal(false, false);

                case "maxhealward":
                    return Data.GetMaxHeal(true, true);

                case "MAXHEALWARD":
                    return Data.GetMaxHeal(false, true);

                case "damage":
                    return Data.Damage.ToString();

                case "damage-k":
                {
                    double num5 = ((double) Data.Damage) / 1000.0;
                    return num5.ToString("0.00");
                }
                case "damage-m":
                {
                    double num6 = ((double) Data.Damage) / 1000000.0;
                    return num6.ToString("0.00");
                }
                case "DAMAGE-k":
                {
                    double num7 = ((double) Data.Damage) / 1000.0;
                    return num7.ToString("0");
                }
                case "DAMAGE-m":
                {
                    double num8 = ((double) Data.Damage) / 1000000.0;
                    return num8.ToString("0");
                }
                case "healed":
                    return Data.Healed.ToString();

                case "swings":
                    return Data.Swings.ToString();

                case "hits":
                    return Data.Hits.ToString();

                case "crithits":
                    return Data.CritHits.ToString();

                case "critheals":
                    return Data.CritHeals.ToString();

                case "crithit%":
                    return Data.CritDamPerc.ToString("0'%");

                case "critheal%":
                    return Data.CritHealPerc.ToString("0'%");

                case "heals":
                    return Data.Heals.ToString();

                case "cures":
                    return Data.CureDispels.ToString();

                case "misses":
                    return Data.Misses.ToString();

                case "hitfailed":
                    return Data.Blocked.ToString();

                case "TOHIT":
                    return Data.ToHit.ToString("0");

                case "DPS":
                    return Data.DPS.ToString("0");

                case "DPS-k":
                {
                    double num22 = Data.DPS / 1000.0;
                    return num22.ToString("0");
                }
                case "ENCDPS":
                    return Data.EncDPS.ToString("0");

                case "ENCDPS-k":
                {
                    double num24 = Data.EncDPS / 1000.0;
                    return num24.ToString("0");
                }
                case "ENCHPS":
                    return Data.EncHPS.ToString("0");

                case "ENCHPS-k":
                {
                    double num26 = Data.EncHPS / 1000.0;
                    return num26.ToString("0");
                }
                case "tohit":
                    return Data.ToHit.ToString("F");

                case "dps":
                    return Data.DPS.ToString("F");

                case "dps-k":
                {
                    double num29 = Data.DPS / 1000.0;
                    return num29.ToString("F");
                }
                case "encdps":
                    return Data.EncDPS.ToString("F");

                case "encdps-k":
                {
                    double num31 = Data.EncDPS / 1000.0;
                    return num31.ToString("F");
                }
                case "enchps":
                    return Data.EncHPS.ToString("F");

                case "enchps-k":
                {
                    double num33 = Data.EncHPS / 1000.0;
                    return num33.ToString("F");
                }
                case "healstaken":
                    return Data.HealsTaken.ToString();

                case "damagetaken":
                    return Data.DamageTaken.ToString();

                case "powerdrain":
                    return Data.PowerDamage.ToString();

                case "powerheal":
                    return Data.PowerReplenish.ToString();

                case "kills":
                    return Data.Kills.ToString();

                case "deaths":
                    return Data.Deaths.ToString();

                case "damage%":
                    return Data.DamagePercent;

                case "healed%":
                    return Data.HealedPercent;

                case "threatstr":
                    return Data.GetThreatStr("Threat (Out)");

                case "threatdelta":
                    return Data.GetThreatDelta("Threat (Out)").ToString();

                case "n":
                    return "\n";

                case "t":
                    return "\t";
            }
            return VarName;
        }

        public static long CondenseGCMemory()
        {
            long totalMemory = GC.GetTotalMemory(false);
            GC.Collect();
            long num2 = GC.GetTotalMemory(true);
            return (totalMemory - num2);
        }

        public void ConfirmInquisitionPrecogRedirect()
        {
            bool flag = false;
            bool flag2 = false;
            for (int i = 0; i < this.redirectList.Count; i++)
            {
                RedirectFix fix = this.redirectList.Values[i];
                if (fix.Ability == "Inquisition")
                {
                    flag = true;
                }
                if (fix.Ability == "Precognitive Ward")
                {
                    flag2 = true;
                }
            }
            if (!flag)
            {
                this.RedirectAddFix(new RedirectFix("Inquisition", "Inquisition", 2));
            }
            if (!flag2)
            {
                this.RedirectAddFix(new RedirectFix("Precognitive Ward", "Precognitive Ward", 2));
            }
        }

        internal void control_MouseHover(object sender, EventArgs e)
        {
            try
            {
                Control control = (Control) sender;
                this.SetOptionsHelpText(this.GetHelpText(control.Name));
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        internal void controlIO_MouseHover(object sender, EventArgs e)
        {
            try
            {
                Control control = (Control) sender;
                this.SetIoHelpText(this.GetHelpText(control.Name));
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void copyAsSharableXMLToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string tag = (string) this.tvCustomTriggers.SelectedNode.Tag;
            if ((tag != "Category") && this.customTriggers.ContainsKey(tag))
            {
                CustomTrigger triggerData = this.customTriggers[tag];
                ActGlobals.oFormActMain.SendToClipboard(ActGlobals.oFormActMain.ShareCustomTriggerToXml(triggerData), true);
            }
        }

        private void copyAsSharableXMLToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            string tag = (string) this.tvCustomTriggers.SelectedNode.Tag;
            if ((tag != "Category") && this.customTriggers.ContainsKey(tag))
            {
                CustomTrigger triggerData = this.customTriggers[tag];
                string s = ActGlobals.oFormActMain.ShareCustomTriggerToXml(triggerData);
                ActGlobals.oFormActMain.SendToClipboard(HttpUtility.HtmlEncode(s).Replace("&#39;", "'"), true);
            }
        }

        private void copyCellToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem item = (ToolStripMenuItem) sender;
            this.cellClipboard = (string) item.Tag;
            this.SendToClipboard(this.cellClipboard, true);
            SystemSounds.Beep.Play();
        }

        private void ctLv_MouseUp(object sender, MouseEventArgs e)
        {
            ListView view = (ListView) sender;
            CustomTrigger tag = (CustomTrigger) view.Tag;
            try
            {
                tag.TabbedCurrentIndex = view.GetItemAt(e.X, e.Y).Index;
            }
            catch
            {
                tag.TabbedCurrentIndex = -1;
            }
        }

        private void CullEncounters()
        {
            int num = 0;
            bool flag = false;
            for (int i = this.zoneList.Count - 1; i >= 0; i--)
            {
                ZoneData data = this.zoneList[i];
                for (int j = data.Items.Count - 1; j >= 0; j--)
                {
                    EncounterData data2 = data.Items[j];
                    if (((this.opEncCulling.cbCullNoAlly.Checked && (data2.Title == "Encounter")) && (i != 0)) && ((i != (this.zoneList.Count - 1)) || (j != (data.Items.Count - 1))))
                    {
                        data.Items.RemoveAt(j);
                        flag = true;
                    }
                    else if ((this.opEncCulling.cbCullTimer.Checked && ((j > 0) || !data.PopulateAll)) && (((data2.StartTime.AddMinutes((double) this.opEncCulling.nudCullTimerN.Value) < DateTime.Now) && (num != 0)) && (i != 0)))
                    {
                        data.Items.RemoveAt(j);
                        flag = true;
                    }
                    else if ((this.opEncCulling.cbCullCount.Checked && ((j > 0) || !data.PopulateAll)) && ((num >= this.opEncCulling.nudCullCountN.Value) && (i != 0)))
                    {
                        data.Items.RemoveAt(j);
                        flag = true;
                    }
                    else if ((this.opEncCulling.cbCullAll.Checked && (j == 0)) && (data.PopulateAll && ((this.zoneList.Count - i) > this.opEncCulling.nudCullAllN.Value)))
                    {
                        data.Items.RemoveAt(j);
                        data.PopulateAll = false;
                        flag = true;
                    }
                    else if ((this.opEncCulling.cbCullOther.Checked && ((j > 0) || !data.PopulateAll)) && (((this.zoneList.Count - i) > this.opEncCulling.nudCullOtherN.Value) && (i != 0)))
                    {
                        data.Items.RemoveAt(j);
                        flag = true;
                    }
                    else if (((j > 0) || !data.PopulateAll) && (!this.opEncCulling.cbCullCountIgnoreNoAlly.Checked || (data2.Title != "Encounter")))
                    {
                        num++;
                    }
                }
            }
            if (flag)
            {
                ThreadInvokes.TreeViewClear(this, this.tvDG);
                this.refreshTree = true;
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && (this.components != null))
            {
                this.components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void DoLcdButton(string ButtonLabel)
        {
            if (ButtonLabel != "None")
            {
                string str;
                this.UpdateLcdStatus(ButtonLabel, false);
                if (((str = ButtonLabel) != null) && ((str == "Button0") || (str == "Menu")))
                {
                    Bitmap bitmap;
                    this.currentLcdMode++;
                    if (this.currentLcdMode >= this.registeredLcdModes.Count)
                    {
                        this.currentLcdMode = 0;
                    }
                    this.lcdYOffset = 0;
                    if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                    {
                        bitmap = new Bitmap(160, 0x2b);
                    }
                    else
                    {
                        bitmap = new Bitmap(320, 240);
                    }
                    Graphics graphics = Graphics.FromImage(bitmap);
                    if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                    {
                        graphics.TextRenderingHint = TextRenderingHint.SingleBitPerPixelGridFit;
                    }
                    else
                    {
                        graphics.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;
                    }
                    graphics.Clear(System.Drawing.Color.Beige);
                    Font font = new Font("Lucida Console", 10f);
                    SolidBrush brush = new SolidBrush(System.Drawing.Color.Black);
                    graphics.DrawString(this.LcdCurrentMode, font, brush, (float) 0f, (float) 0f);
                    if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                    {
                        this.opLcdMono.pbLcd.Image = bitmap;
                    }
                    else
                    {
                        this.opLcdColor.pbColorLcd.Image = bitmap;
                    }
                    if (!this.opLcdGeneral.cbLcdRoute.Checked || !this.opLcdGeneral.cbLcdRoute.Enabled)
                    {
                        if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                        {
                            this.lcdDevice.UpdateBitmap(this.LcdGetMonoView(bitmap, this.lcdYOffset), LcdPriority.Normal, LcdUpdateMode.Async);
                            this.lcdDevice.DoUpdateAndDraw();
                        }
                        else
                        {
                            this.lcdDevice.UpdateBitmap(this.LcdGetColorView(bitmap, this.lcdYOffset), LcdPriority.Normal, LcdUpdateMode.Async);
                            this.lcdDevice.DoUpdateAndDraw();
                        }
                    }
                    else
                    {
                        try
                        {
                            if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                            {
                                byte[] lcdData = this.LcdGetMonoView(bitmap, this.lcdYOffset);
                                this.LcdSendToSharer(lcdData);
                            }
                            else
                            {
                                byte[] buffer2 = this.LcdGetColorView(bitmap, this.lcdYOffset);
                                this.LcdSendToSharer(buffer2);
                            }
                        }
                        catch (Exception exception)
                        {
                            this.UpdateLcdStatus(exception.Message, true);
                        }
                    }
                }
                else if (this.LcdButtonPressed != null)
                {
                    this.LcdButtonPressed(this.LcdCurrentMode, ButtonLabel);
                }
            }
        }

        private void DoMacroExports()
        {
            this.DoMacroExports(-1, -1);
        }

        private void DoMacroExports(int ZoneIndex, int EncounterIndex)
        {
            for (int i = 0; i < this.opTextExports.clbExFilePresets.Items.Count; i++)
            {
                if (this.opTextExports.clbExFilePresets.GetItemChecked(i))
                {
                    string str;
                    MacroExportSetting setting = (MacroExportSetting) this.opTextExports.clbExFilePresets.Items[i];
                    if (ZoneIndex == -1)
                    {
                        TextExportFormatOptions defaultTextFormat;
                        if ((setting.ExportPresetIndex != -1) && (setting.ExportPresetIndex < this.textExportFormats.Count))
                        {
                            defaultTextFormat = this.textExportFormats[setting.ExportPresetIndex];
                        }
                        else
                        {
                            defaultTextFormat = this.defaultTextFormat;
                        }
                        str = this.GetTextExport(this.ActiveZone.ActiveEncounter, defaultTextFormat, setting.AlignToContent ? this.fontTabulation : null, setting.ExportMaxLines);
                    }
                    else
                    {
                        str = this.GetTextExport(ZoneIndex, EncounterIndex, setting.ExportPresetIndex, setting.AlignToContent ? this.fontTabulation : null, setting.ExportMaxLines);
                    }
                    this.SendToMacroFile(setting.ExportFile, str, setting.ExportChannel);
                }
            }
        }

        private void dtRecordEndDate_ValueChanged(object sender, EventArgs e)
        {
            this.dtRecordEndTime.Value = new DateTime(this.dtRecordEndDate.Value.Year, this.dtRecordEndDate.Value.Month, this.dtRecordEndDate.Value.Day, 0x17, 0x3b, 0x3b);
        }

        private void dtRecordStartDate_ValueChanged(object sender, EventArgs e)
        {
            this.dtRecordStartTime.Value = new DateTime(this.dtRecordStartDate.Value.Year, this.dtRecordStartDate.Value.Month, this.dtRecordStartDate.Value.Day, 0, 0, 0);
            this.dtRecordEndDate.Value = new DateTime(this.dtRecordStartDate.Value.Year, this.dtRecordStartDate.Value.Month, this.dtRecordStartDate.Value.Day, 0, 0, 0);
        }

        public void EncDatabaseAdd(HistoryRecord item)
        {
            if (item.EndTime == DateTime.MinValue)
            {
                item.EndTime = item.StartTime;
            }
            int index = this.encDatabase.IndexOfKey(item.StartTime);
            if (index > -1)
            {
                this.encDatabase.RemoveAt(index);
            }
            this.encDatabase.Add(item.StartTime, item);
        }

        private string EncounterFormatSwitch(EncounterData Data, List<CombatantData> SelectiveAllies, string VarName, string Extra)
        {
            double num23;
            long num = 0;
            long num2 = 0;
            int num3 = 0;
            int num4 = 0;
            int num5 = 0;
            int num6 = 0;
            int num7 = 0;
            int num8 = 0;
            int num9 = 0;
            int num10 = 0;
            float num11 = 0f;
            double num12 = 0.0;
            double num13 = 0.0;
            long num14 = 0;
            long num15 = 0;
            long num16 = 0;
            long num17 = 0;
            int num18 = 0;
            int num19 = 0;
            switch (VarName)
            {
                case "maxheal":
                    return Data.GetMaxHeal(true, false);

                case "MAXHEAL":
                    return Data.GetMaxHeal(false, false);

                case "maxhealward":
                    return Data.GetMaxHeal(true, true);

                case "MAXHEALWARD":
                    return Data.GetMaxHeal(false, true);

                case "maxhit":
                    return Data.GetMaxHit(true);

                case "MAXHIT":
                    return Data.GetMaxHit(false);

                case "duration":
                    return Data.DurationS;

                case "DURATION":
                    return Data.Duration.TotalSeconds.ToString("0");

                case "damage":
                    foreach (CombatantData data in SelectiveAllies)
                    {
                        num += data.Damage;
                    }
                    return num.ToString();

                case "damage-m":
                {
                    foreach (CombatantData data2 in SelectiveAllies)
                    {
                        num += data2.Damage;
                    }
                    double num24 = ((double) num) / 1000000.0;
                    return num24.ToString("0.00");
                }
                case "DAMAGE-k":
                    foreach (CombatantData data3 in SelectiveAllies)
                    {
                        num += data3.Damage;
                    }
                    num23 = ((double) num) / 1000.0;
                    return num23.ToString("0");

                case "DAMAGE-m":
                    foreach (CombatantData data4 in SelectiveAllies)
                    {
                        num += data4.Damage;
                    }
                    num23 = ((double) num) / 1000000.0;
                    return num23.ToString("0");

                case "healed":
                    foreach (CombatantData data5 in SelectiveAllies)
                    {
                        num2 += data5.Healed;
                    }
                    return num2.ToString();

                case "swings":
                    foreach (CombatantData data6 in SelectiveAllies)
                    {
                        num3 += data6.Swings;
                    }
                    return num3.ToString();

                case "hits":
                    foreach (CombatantData data7 in SelectiveAllies)
                    {
                        num4 += data7.Hits;
                    }
                    return num4.ToString();

                case "crithits":
                    foreach (CombatantData data8 in SelectiveAllies)
                    {
                        num5 += data8.CritHits;
                    }
                    return num5.ToString();

                case "crithit%":
                {
                    foreach (CombatantData data9 in SelectiveAllies)
                    {
                        num5 += data9.CritHits;
                    }
                    foreach (CombatantData data10 in SelectiveAllies)
                    {
                        num4 += data10.Hits;
                    }
                    float num20 = ((float) num5) / ((float) num4);
                    return num20.ToString("0'%");
                }
                case "heals":
                    foreach (CombatantData data11 in SelectiveAllies)
                    {
                        num6 += data11.Heals;
                    }
                    return num6.ToString();

                case "critheals":
                    foreach (CombatantData data12 in SelectiveAllies)
                    {
                        num7 += data12.CritHits;
                    }
                    return num7.ToString();

                case "critheal%":
                {
                    foreach (CombatantData data13 in SelectiveAllies)
                    {
                        num7 += data13.CritHeals;
                    }
                    foreach (CombatantData data14 in SelectiveAllies)
                    {
                        num6 += data14.Heals;
                    }
                    float num21 = ((float) num7) / ((float) num6);
                    return num21.ToString("0'%");
                }
                case "cures":
                    foreach (CombatantData data15 in SelectiveAllies)
                    {
                        num8 += data15.CureDispels;
                    }
                    return num8.ToString();

                case "misses":
                    foreach (CombatantData data16 in SelectiveAllies)
                    {
                        num9 += data16.Misses;
                    }
                    return num9.ToString();

                case "hitfailed":
                    foreach (CombatantData data17 in SelectiveAllies)
                    {
                        num10 += data17.Blocked;
                    }
                    return num10.ToString();

                case "TOHIT":
                    foreach (CombatantData data18 in SelectiveAllies)
                    {
                        num11 += data18.ToHit;
                    }
                    num11 /= (float) SelectiveAllies.Count;
                    return num11.ToString("0");

                case "DPS":
                case "ENCDPS":
                    foreach (CombatantData data19 in SelectiveAllies)
                    {
                        num += data19.Damage;
                    }
                    num12 = ((double) num) / Data.Duration.TotalSeconds;
                    return num12.ToString("0");

                case "DPS-k":
                case "ENCDPS-k":
                    foreach (CombatantData data20 in SelectiveAllies)
                    {
                        num += data20.Damage;
                    }
                    num12 = ((double) num) / Data.Duration.TotalSeconds;
                    num23 = num12 / 1000.0;
                    return num23.ToString("0");

                case "ENCHPS":
                    foreach (CombatantData data21 in SelectiveAllies)
                    {
                        num2 += data21.Healed;
                    }
                    num13 = ((double) num2) / Data.Duration.TotalSeconds;
                    return num13.ToString("0");

                case "ENCHPS-k":
                    foreach (CombatantData data22 in SelectiveAllies)
                    {
                        num2 += data22.Healed;
                    }
                    num13 = ((double) num2) / Data.Duration.TotalSeconds;
                    num23 = num13 / 1000.0;
                    return num23.ToString("0");

                case "tohit":
                    foreach (CombatantData data23 in SelectiveAllies)
                    {
                        num11 += data23.ToHit;
                    }
                    num11 /= (float) SelectiveAllies.Count;
                    return num11.ToString("F");

                case "dps":
                case "encdps":
                    foreach (CombatantData data24 in SelectiveAllies)
                    {
                        num += data24.Damage;
                    }
                    num12 = ((double) num) / Data.Duration.TotalSeconds;
                    return num12.ToString("F");

                case "dps-k":
                case "encdps-k":
                    foreach (CombatantData data25 in SelectiveAllies)
                    {
                        num += data25.Damage;
                    }
                    num12 = ((double) num) / Data.Duration.TotalSeconds;
                    num23 = num12 / 1000.0;
                    return num23.ToString("F");

                case "enchps":
                    foreach (CombatantData data26 in SelectiveAllies)
                    {
                        num2 += data26.Healed;
                    }
                    num13 = ((double) num2) / Data.Duration.TotalSeconds;
                    return num13.ToString("F");

                case "enchps-k":
                    foreach (CombatantData data27 in SelectiveAllies)
                    {
                        num2 += data27.Healed;
                    }
                    num13 = ((double) num2) / Data.Duration.TotalSeconds;
                    num23 = num13 / 1000.0;
                    return num23.ToString("F");

                case "healstaken":
                    foreach (CombatantData data28 in SelectiveAllies)
                    {
                        num14 += data28.HealsTaken;
                    }
                    return num14.ToString();

                case "damagetaken":
                    foreach (CombatantData data29 in SelectiveAllies)
                    {
                        num15 += data29.DamageTaken;
                    }
                    return num15.ToString();

                case "powerdrain":
                    foreach (CombatantData data30 in SelectiveAllies)
                    {
                        num16 += data30.PowerDamage;
                    }
                    return num16.ToString();

                case "powerheal":
                    foreach (CombatantData data31 in SelectiveAllies)
                    {
                        num17 += data31.PowerReplenish;
                    }
                    return num17.ToString();

                case "kills":
                    foreach (CombatantData data32 in SelectiveAllies)
                    {
                        num18 += data32.Kills;
                    }
                    return num18.ToString();

                case "deaths":
                    foreach (CombatantData data33 in SelectiveAllies)
                    {
                        num19 += data33.Deaths;
                    }
                    return num19.ToString();

                case "title":
                    return Data.Title;
            }
            return VarName;
        }

        public void EndCombat(bool export)
        {
            if (this.inCombat)
            {
                this.inCombat = false;
                if (!this.importThreadAlive)
                {
                    try
                    {
                        this.CullEncounters();
                    }
                    catch (Exception exception)
                    {
                        this.WriteExceptionLog(exception, "Cull Encounters");
                    }
                }
                try
                {
                    if (this.ActiveZone.ActiveEncounter.Active)
                    {
                        if (this.ActiveZone.PopulateAll)
                        {
                            this.ActiveZone.Items[0].EndCombat(false);
                        }
                        this.ActiveZone.ActiveEncounter.EndCombat(true);
                    }
                    if (this.OnCombatEnd != null)
                    {
                        int zdIndex = this.zoneList.Count - 1;
                        int edIndex = this.zoneList[this.zoneList.Count - 1].Items.Count - 1;
                        for (int i = this.zoneList.Count - 1; i >= 0; i--)
                        {
                            if ((this.ActiveZone.ZoneName == this.ZoneList[i].ZoneName) && (this.ActiveZone.StartTime == this.ZoneList[i].StartTime))
                            {
                                zdIndex = i;
                                break;
                            }
                        }
                        for (int j = this.zoneList[zdIndex].Items.Count - 1; j >= 0; j--)
                        {
                            if (this.ActiveZone.ActiveEncounter == this.zoneList[zdIndex].Items[j])
                            {
                                edIndex = j;
                                break;
                            }
                        }
                        try
                        {
                            this.OnCombatEnd(this.importThreadAlive, new CombatToggleEventArgs(zdIndex, edIndex, this.ActiveZone.ActiveEncounter));
                        }
                        catch (Exception exception2)
                        {
                            this.WriteExceptionLog(exception2, "EndCombat->OnCombatEnd event");
                        }
                    }
                    try
                    {
                        this.EncDatabaseAdd(new HistoryRecord(1, this.ActiveZone.ActiveEncounter.StartTime, this.ActiveZone.ActiveEncounter.EndTime, this.ActiveZone.ActiveEncounter.Title, ActGlobals.charName));
                    }
                    catch (Exception exception3)
                    {
                        this.WriteExceptionLog(exception3, "History Database");
                    }
                    if (!this.importThreadAlive && (base.WindowState != FormWindowState.Minimized))
                    {
                        switch (this.ActiveZone.ActiveEncounter.GetEncounterSuccessLevel())
                        {
                            case 1:
                                this.tvDG.Nodes[this.tvDG.Nodes.Count - 1].LastNode.ForeColor = this.opColorUserInterface.ccEncLabel1.ForeColorSetting;
                                break;

                            case 2:
                                this.tvDG.Nodes[this.tvDG.Nodes.Count - 1].LastNode.ForeColor = this.opColorUserInterface.ccEncLabel2.ForeColorSetting;
                                break;

                            case 3:
                                this.tvDG.Nodes[this.tvDG.Nodes.Count - 1].LastNode.ForeColor = this.opColorUserInterface.ccEncLabel3.ForeColorSetting;
                                break;

                            default:
                                this.tvDG.Nodes[this.tvDG.Nodes.Count - 1].LastNode.ForeColor = this.opColorUserInterface.fccDataGrid.ForeColorSetting;
                                break;
                        }
                        this.tvDG.Nodes[this.tvDG.Nodes.Count - 1].LastNode.Text = this.ActiveZone.ActiveEncounter.ToString();
                        this.tvDG.Nodes[this.tvDG.Nodes.Count - 1].Text = this.ActiveZone.ToString();
                    }
                }
                catch
                {
                }
                if (!this.cbLockDG.Checked)
                {
                    this.updateDataGrid = true;
                    this.updateEncGraph = true;
                }
                if (export && !this.importThreadAlive)
                {
                    try
                    {
                        if (this.opTextExports.cbExText.Checked)
                        {
                            this.SendToClipboard(this.GetTextExport(this.zoneList.Count - 1, this.zoneList[this.zoneList.Count - 1].Items.Count - 1, this.opTextExports.ddlClipFormat.SelectedIndex), false);
                            this.ExportBeep();
                        }
                        this.DoMacroExports();
                        if (this.opFileHTML.cbExHTML.Checked)
                        {
                            this.exportZdIndex = this.zoneList.Count - 1;
                            this.exportEdIndex = this.zoneList[this.zoneList.Count - 1].Items.Count - 1;
                            this.StartHTMLThread();
                        }
                        if (this.opOdbc.cbExOdbc.Checked)
                        {
                            this.exportZdIndex = this.zoneList.Count - 1;
                            this.exportEdIndex = this.zoneList[this.zoneList.Count - 1].Items.Count - 1;
                            this.StartOdbcExportThread();
                        }
                    }
                    catch
                    {
                    }
                }
            }
        }

        internal void ExportACT()
        {
            this.actFileThreadAlive = true;
            try
            {
                SaveFileDialog dialog;
                List<EncounterData> list = new List<EncounterData>();
                EncounterData item = null;
                try
                {
                    if (this.tvDG.CheckBoxes)
                    {
                        for (int i = 0; i < this.tvDG.Nodes.Count; i++)
                        {
                            for (int j = 0; j < this.tvDG.Nodes[i].Nodes.Count; j++)
                            {
                                TreeNode node = this.tvDG.Nodes[i].Nodes[j];
                                if (node.Checked)
                                {
                                    list.Add(this.zoneList[i].Items[j]);
                                }
                            }
                        }
                        goto Label_013D;
                    }
                    if (this.tvDG.SelectedNode.Parent != null)
                    {
                        item = this.zoneList[this.tvDG.SelectedNode.Parent.Index].Items[this.tvDG.SelectedNode.Index];
                        goto Label_013D;
                    }
                    MessageBox.Show(this.Trans["messageBox-exportNoEncounters"].DisplayedText, this.Trans["messageBoxTitle-exportNoEncounters"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                catch
                {
                }
                return;
            Label_013D:
                dialog = new SaveFileDialog();
                dialog.CheckPathExists = true;
                dialog.CreatePrompt = false;
                dialog.Filter = "ACT Binary File (*.act)|*.act";
                dialog.Title = "Export Encounter to Data File";
                dialog.AddExtension = true;
                dialog.ValidateNames = true;
                dialog.OverwritePrompt = false;
                if ((this.folderActfiles != null) && this.folderActfiles.Exists)
                {
                    dialog.InitialDirectory = this.folderActfiles.FullName;
                }
                if (list.Count == 0)
                {
                    dialog.FileName = string.Format(item.Title + "-{0:0000}.{1:00}.{2:00}-{3:00}.{4:00}.{5:00}.act", new object[] { item.StartTime.Year, item.StartTime.Month, item.StartTime.Day, item.StartTime.Hour, item.StartTime.Minute, item.StartTime.Second });
                    list.Add(item);
                }
                else
                {
                    dialog.FileName = "MultipleEncounters.act";
                }
                if (dialog.ShowDialog() != DialogResult.Cancel)
                {
                    this.folderActfiles = new DirectoryInfo(Path.GetDirectoryName(dialog.FileName));
                    ThreadInvokes.ControlSetText(this, this.ioExportAct.lblActExportStatus, "Exporting...");
                    FileStream baseOutputStream = null;
                    Stream w = null;
                    XmlTextWriter writer = null;
                    try
                    {
                        FileInfo info = new FileInfo(dialog.FileName);
                        baseOutputStream = info.Open(FileMode.Create, FileAccess.ReadWrite, FileShare.None);
                        Deflater deflater = new Deflater(9);
                        w = new DeflaterOutputStream(baseOutputStream, deflater);
                        writer = new XmlTextWriter(w, Encoding.UTF8) {
                            Formatting = Formatting.Indented,
                            Indentation = 4,
                            Namespaces = false
                        };
                        writer.WriteStartDocument();
                        writer.WriteStartElement(string.Empty, "Encounters", string.Empty);
                        for (int k = 0; k < list.Count; k++)
                        {
                            item = list[k];
                            writer.WriteStartElement(string.Empty, "Encounter", string.Empty);
                            writer.WriteAttributeString(string.Empty, "Name", string.Empty, item.Title);
                            writer.WriteAttributeString(string.Empty, "CharName", string.Empty, item.CharName);
                            if (item.ZoneName != "Import")
                            {
                                writer.WriteAttributeString(string.Empty, "ZoneName", string.Empty, item.Parent.ZoneName);
                                writer.WriteAttributeString(string.Empty, "ZoneDateTime", string.Empty, item.Parent.StartTime.ToString("s"));
                            }
                            for (int m = 0; m < item.StartTimes.Count; m++)
                            {
                                writer.WriteStartElement(string.Empty, "StartTime", string.Empty);
                                writer.WriteString(item.StartTimes[m].ToString("s"));
                                writer.WriteEndElement();
                            }
                            for (int n = 0; n < item.EndTimes.Count; n++)
                            {
                                writer.WriteStartElement(string.Empty, "EndTime", string.Empty);
                                writer.WriteString(item.EndTimes[n].ToString("s"));
                                writer.WriteEndElement();
                            }
                            for (int num6 = 0; num6 < item.Items.Values.Count; num6++)
                            {
                                AttackType type;
                                if (item.Items.Values[num6].AllOut.TryGetValue(ActGlobals.ActLocalization.LocalizationStrings["attackTypeTerm-all"].DisplayedText, out type))
                                {
                                    for (int num7 = 0; num7 < type.Items.Count; num7++)
                                    {
                                        MasterSwing swing = type.Items[num7];
                                        writer.WriteStartElement(string.Empty, "Swing", string.Empty);
                                        writer.WriteAttributeString(string.Empty, "SwingType", string.Empty, swing.SwingType.ToString());
                                        writer.WriteAttributeString(string.Empty, "Critical", string.Empty, swing.Critical.ToString());
                                        writer.WriteAttributeString(string.Empty, "Time", string.Empty, swing.Time.ToString("s"));
                                        writer.WriteAttributeString(string.Empty, "TimeSorter", string.Empty, swing.TimeSorter.ToString());
                                        writer.WriteAttributeString(string.Empty, "Combatant", string.Empty, swing.Attacker);
                                        writer.WriteAttributeString(string.Empty, "Victim", string.Empty, swing.Victim);
                                        writer.WriteAttributeString(string.Empty, "AttackType", string.Empty, swing.AttackType);
                                        writer.WriteAttributeString(string.Empty, "DamageType", string.Empty, swing.DamageType);
                                        writer.WriteAttributeString(string.Empty, "Damage", string.Empty, swing.Damage.ToString());
                                        writer.WriteAttributeString(string.Empty, "Special", string.Empty, swing.Special);
                                        writer.WriteEndElement();
                                    }
                                }
                            }
                            if (this.ioExportAct.cbExportLogText.Checked)
                            {
                                for (int num8 = 0; num8 < item.LogLines.Count; num8++)
                                {
                                    LogLineEntry entry = item.LogLines[num8];
                                    writer.WriteStartElement(string.Empty, "LogLine", string.Empty);
                                    writer.WriteAttributeString(string.Empty, "Type", string.Empty, entry.Type.ToString());
                                    writer.WriteAttributeString(string.Empty, "Time", string.Empty, entry.Time.ToString("s"));
                                    writer.WriteAttributeString(string.Empty, "Line", string.Empty, entry.LogLine);
                                    writer.WriteEndElement();
                                }
                            }
                            for (int num9 = 0; num9 < item.GetAllies().Count; num9++)
                            {
                                writer.WriteStartElement(string.Empty, "Ally", string.Empty);
                                writer.WriteString(item.GetAllies()[num9].Name);
                                writer.WriteEndElement();
                            }
                            writer.WriteEndElement();
                        }
                        writer.WriteEndElement();
                        writer.WriteEndDocument();
                        ThreadInvokes.ControlSetText(this, this.ioExportAct.lblActExportStatus, info.Name + " exported.");
                    }
                    catch (ThreadAbortException)
                    {
                    }
                    catch (IOException exception)
                    {
                        ThreadInvokes.ControlSetText(this, this.ioExportAct.lblActExportStatus, "File Error: " + exception.Message);
                        this.WriteExceptionLog(exception, string.Empty);
                    }
                    catch (Exception exception2)
                    {
                        ThreadInvokes.ControlSetText(this, this.ioExportAct.lblActExportStatus, "Unexpected error: " + exception2.Message);
                        this.WriteExceptionLog(exception2, string.Empty);
                    }
                    try
                    {
                        writer.Flush();
                        writer.Close();
                    }
                    catch
                    {
                    }
                }
            }
            catch (Exception exception3)
            {
                this.WriteExceptionLog(exception3, string.Empty);
            }
            finally
            {
                this.actFileThreadAlive = false;
            }
        }

        private void ExportBeep()
        {
            try
            {
                if (this.opSound.rbSndExportBeep.Checked)
                {
                    SystemSounds.Beep.Play();
                }
                if (this.opSound.rbSndExportWAV.Checked)
                {
                    this.PlaySound(this.opSound.tbSndExport.Text);
                }
                if (this.opSound.rbSndExportTTS.Checked)
                {
                    this.TTS(this.opSound.tbSndExport.Text);
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        public void ExportControlChilderenText(XmlTextWriter xml, Control parent, string path)
        {
            for (int i = 0; i < parent.Controls.Count; i++)
            {
                Control control = parent.Controls[i];
                bool flag = true;
                if (string.IsNullOrEmpty(control.Name) || string.IsNullOrEmpty(control.Text))
                {
                    flag = false;
                }
                if (flag)
                {
                    xml.WriteStartElement("", "Control", "");
                    xml.WriteAttributeString("ControlPath", path);
                    xml.WriteAttributeString("UniqueName", control.Name);
                    xml.WriteAttributeString("Text", control.Text);
                    xml.WriteEndElement();
                }
                if (control.Controls.Count > 0)
                {
                    this.ExportControlChilderenText(xml, control, string.Format(@"{1}\{0}", control.Name, path));
                }
            }
        }

        public void ExportControlTextXML(Stream Output)
        {
            XmlTextWriter xml = new XmlTextWriter(Output, Encoding.UTF8) {
                Formatting = Formatting.Indented,
                Indentation = 4,
                Namespaces = false
            };
            xml.WriteStartDocument();
            xml.WriteStartElement(string.Empty, "ControlText", string.Empty);
            xml.WriteAttributeString("Form", "FormActMain");
            ActGlobals.oFormActMain.ExportControlChilderenText(xml, this, "root");
            xml.WriteEndElement();
            xml.WriteEndDocument();
            xml.Flush();
            xml.Close();
        }

        public void ExportControlTextXML(string FilePath)
        {
            this.ExportControlTextXML(new FileInfo(FilePath).OpenWrite());
        }

        private string ExportTBodyHTML(IEnumerable<AttackType> dtItems)
        {
            return this.ExportTBodyHTML(dtItems, "", "");
        }

        private string ExportTBodyHTML(IEnumerable<CombatantData> edItems)
        {
            return this.ExportTBodyHTML(edItems, "", "");
        }

        private string ExportTBodyHTML(IEnumerable<DamageTypeData> cdItems)
        {
            return this.ExportTBodyHTML(cdItems, "");
        }

        private string ExportTBodyHTML(IEnumerable<EncounterData> zdItems)
        {
            return this.ExportTBodyHTML(zdItems, "");
        }

        private string ExportTBodyHTML(IEnumerable<MasterSwing> atItems)
        {
            return this.ExportTBodyHTML(atItems, "", "");
        }

        private string ExportTBodyHTML(IEnumerable<ZoneData> zdList)
        {
            return this.ExportTBodyHTML(zdList, "");
        }

        private string ExportTBodyHTML(IEnumerable<DamageTypeData> cdItems, string BrowseNavJsArgs)
        {
            List<DamageTypeData> list = new List<DamageTypeData>(cdItems);
            StringBuilder builder = new StringBuilder();
            builder.Append("<tr>");
            for (int i = 0; i < this.opTableCombatant.clbCD.Items.Count; i++)
            {
                if (this.opTableCombatant.clbCD.GetItemChecked(i))
                {
                    string str = this.opTableCombatant.clbCD.Items[i].ToString();
                    if (str == null)
                    {
                        goto Label_0100;
                    }
                    if (!(str == "Average Hit"))
                    {
                        if (str == "Median Hit")
                        {
                            goto Label_00AE;
                        }
                        if (str == "Average Delay")
                        {
                            goto Label_00D7;
                        }
                        goto Label_0100;
                    }
                    builder.AppendFormat("<th>Average</th>", this.opTableCombatant.clbCD.Items[i].ToString());
                }
                continue;
            Label_00AE:
                builder.AppendFormat("<th>Median</th>", this.opTableCombatant.clbCD.Items[i].ToString());
                continue;
            Label_00D7:
                builder.AppendFormat("<th>Avg Dly</th>", this.opTableCombatant.clbCD.Items[i].ToString());
                continue;
            Label_0100:
                builder.AppendFormat("<th>{0}</th>", this.opTableCombatant.clbCD.Items[i].ToString());
            }
            builder.AppendLine("</tr>");
            for (int j = 0; j < list.Count; j++)
            {
                builder.Append("<tr>");
                DamageTypeData data = list[j];
                int num3 = 0;
                for (int k = 0; k < this.opTableCombatant.clbCD.Items.Count; k++)
                {
                    if (this.opTableCombatant.clbCD.GetItemChecked(k))
                    {
                        num3++;
                        if ((num3 == 1) && !string.IsNullOrEmpty(BrowseNavJsArgs))
                        {
                            builder.AppendFormat("<td><a href='javascript:ActNav({1})'>{0}</a></td>", data.GetColumnByName(this.opTableCombatant.clbCD.Items[k].ToString()), string.Format(BrowseNavJsArgs, data.Type));
                        }
                        else
                        {
                            builder.AppendFormat("<td>{0}</td>", data.GetColumnByName(this.opTableCombatant.clbCD.Items[k].ToString()));
                        }
                    }
                }
                builder.AppendLine("</tr>");
            }
            return builder.ToString();
        }

        private string ExportTBodyHTML(IEnumerable<EncounterData> zdItems, string BrowseNavJsArgs)
        {
            List<EncounterData> list = new List<EncounterData>(zdItems);
            StringBuilder builder = new StringBuilder();
            builder.Append("<tr>");
            builder.Append("<th>Title</th><th>Start Time</th><th>End Time</th><th>Duration</th><th>Damage</th><th>EncDPS</th><th>Kills</th><th>Deaths</th>");
            builder.AppendLine("</tr>");
            for (int i = 0; i < list.Count; i++)
            {
                builder.Append("<tr>");
                EncounterData data = list[i];
                if (string.IsNullOrEmpty(BrowseNavJsArgs))
                {
                    builder.AppendFormat("<td>{0}</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4}</td><td>{5}</td><td>{6}</td><td>{7}</td>", new object[] { data.Title, data.StartTime.ToLongTimeString(), data.EndTime.ToLongTimeString(), data.DurationS, data.Damage, data.DPS.ToString("0.00"), data.AlliedKills, data.AlliedDeaths });
                }
                else
                {
                    builder.AppendFormat("<td><a href='javascript:ActNav({8})'>{0}</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4}</td><td>{5}</td><td>{6}</td><td>{7}</td>", new object[] { data.Title, data.StartTime.ToLongTimeString(), data.EndTime.ToLongTimeString(), data.DurationS, data.Damage, data.DPS.ToString("0.00"), data.AlliedKills, data.AlliedDeaths, string.Format(BrowseNavJsArgs, i) });
                }
                builder.AppendLine("</tr>");
            }
            return builder.ToString();
        }

        private string ExportTBodyHTML(IEnumerable<ZoneData> zdList, string BrowseNavJsArgs)
        {
            List<ZoneData> list = new List<ZoneData>(zdList);
            StringBuilder builder = new StringBuilder();
            builder.Append("<tr>");
            builder.Append("<th>Title</th>");
            builder.AppendLine("</tr>");
            for (int i = 0; i < list.Count; i++)
            {
                builder.Append("<tr>");
                ZoneData data = list[i];
                if (string.IsNullOrEmpty(BrowseNavJsArgs))
                {
                    builder.AppendFormat("<td>{0}</td>", data.ToString());
                }
                else
                {
                    builder.AppendFormat("<td><a href='javascript:ActNav({0})'>{1}</a></td>", string.Format(BrowseNavJsArgs, i), data.ToString());
                }
                builder.AppendLine("</tr>");
            }
            return builder.ToString();
        }

        private string ExportTBodyHTML(IEnumerable<AttackType> dtItems, string BrowseNavCustomSort, string BrowseNavJsArgs)
        {
            string str2;
            List<AttackType> list = new List<AttackType>(dtItems);
            if (!string.IsNullOrEmpty(BrowseNavCustomSort) && ((str2 = BrowseNavCustomSort) != null))
            {
                if (!(str2 == "Average"))
                {
                    if (str2 == "Median")
                    {
                        BrowseNavCustomSort = "Median Hit";
                    }
                    else if (str2 == "Avg Dly")
                    {
                        BrowseNavCustomSort = "Average Delay";
                    }
                }
                else
                {
                    BrowseNavCustomSort = "Average Hit";
                }
            }
            list.Sort(new AttackType.DualComparison(BrowseNavCustomSort, BrowseNavCustomSort));
            if (this.opMainTableGen.cbReverseSort.Checked)
            {
                list.Reverse();
            }
            StringBuilder builder = new StringBuilder();
            builder.Append("<tr>");
            for (int i = 0; i < this.opTableDamageType.clbDT.Items.Count; i++)
            {
                if (!this.opTableDamageType.clbDT.GetItemChecked(i))
                {
                    continue;
                }
                string str3 = this.opTableDamageType.clbDT.Items[i].ToString();
                if (str3 == null)
                {
                    goto Label_0112;
                }
                if (!(str3 == "Average Hit"))
                {
                    if (str3 == "Median Hit")
                    {
                        goto Label_0102;
                    }
                    if (str3 == "Average Delay")
                    {
                        goto Label_010A;
                    }
                    goto Label_0112;
                }
                string str = "Average";
                goto Label_012E;
            Label_0102:
                str = "Median";
                goto Label_012E;
            Label_010A:
                str = "Avg Dly";
                goto Label_012E;
            Label_0112:
                str = this.opTableDamageType.clbDT.Items[i].ToString();
            Label_012E:
                if (!string.IsNullOrEmpty(BrowseNavJsArgs))
                {
                    builder.AppendFormat("<th><a href='javascript:ActNav({1})'>{0}</a></th>", str, string.Format(BrowseNavJsArgs, "", str));
                }
                else
                {
                    builder.AppendFormat("<th>{0}</th>", str);
                }
            }
            builder.AppendLine("</tr>");
            for (int j = 0; j < list.Count; j++)
            {
                builder.Append("<tr>");
                AttackType type = list[j];
                int num3 = 0;
                for (int k = 0; k < this.opTableDamageType.clbDT.Items.Count; k++)
                {
                    if (this.opTableDamageType.clbDT.GetItemChecked(k))
                    {
                        num3++;
                        if ((num3 == 1) && !string.IsNullOrEmpty(BrowseNavJsArgs))
                        {
                            builder.AppendFormat("<td><a href='javascript:ActNav({1})'>{0}</a></td>", type.GetColumnByName(this.opTableDamageType.clbDT.Items[k].ToString()), string.Format(BrowseNavJsArgs, GlobalObject.escape(type.GetColumnByName(this.opTableDamageType.clbDT.Items[k].ToString())), ""));
                        }
                        else
                        {
                            builder.AppendFormat("<td>{0}</td>", type.GetColumnByName(this.opTableDamageType.clbDT.Items[k].ToString()));
                        }
                    }
                }
                builder.AppendLine("</tr>");
            }
            return builder.ToString();
        }

        private string ExportTBodyHTML(IEnumerable<CombatantData> edItems, string BrowseNavCustomSort, string BrowseNavJsArgs)
        {
            List<CombatantData> list = new List<CombatantData>(edItems);
            if (!string.IsNullOrEmpty(BrowseNavCustomSort) && (BrowseNavCustomSort == "Dmg Taken"))
            {
                BrowseNavCustomSort = "Damage Taken";
            }
            list.Sort(new CombatantData.DualComparison(BrowseNavCustomSort, BrowseNavCustomSort));
            if (this.opMainTableGen.cbReverseSort.Checked)
            {
                list.Reverse();
            }
            StringBuilder builder = new StringBuilder();
            builder.Append("<tr>");
            for (int i = 0; i < this.opTableEncounter.clbED.Items.Count; i++)
            {
                if (this.opTableEncounter.clbED.GetItemChecked(i))
                {
                    string str2;
                    if (this.opTableEncounter.clbED.Items[i].ToString() == "Damage Taken")
                    {
                        str2 = "Dmg Taken";
                    }
                    else
                    {
                        str2 = this.opTableEncounter.clbED.Items[i].ToString();
                    }
                    if (!string.IsNullOrEmpty(BrowseNavJsArgs))
                    {
                        builder.AppendFormat("<th><a href='javascript:ActNav({1})'>{0}</a></th>", str2, string.Format(BrowseNavJsArgs, "", str2));
                    }
                    else
                    {
                        builder.AppendFormat("<th>{0}</th>", str2);
                    }
                }
            }
            builder.AppendLine("</tr>");
            for (int j = 0; j < list.Count; j++)
            {
                builder.Append("<tr>");
                CombatantData data = list[j];
                int num3 = 0;
                for (int k = 0; k < this.opTableEncounter.clbED.Items.Count; k++)
                {
                    if (this.opTableEncounter.clbED.GetItemChecked(k))
                    {
                        num3++;
                        if ((num3 == 1) && !string.IsNullOrEmpty(BrowseNavJsArgs))
                        {
                            builder.AppendFormat("<td><a href='javascript:ActNav({1})'>{0}</a></td>", data.GetColumnByName(this.opTableEncounter.clbED.Items[k].ToString()), string.Format(BrowseNavJsArgs, GlobalObject.escape(data.GetColumnByName(this.opTableEncounter.clbED.Items[k].ToString())), ""));
                        }
                        else
                        {
                            builder.AppendFormat("<td>{0}</td>", data.GetColumnByName(this.opTableEncounter.clbED.Items[k].ToString()));
                        }
                    }
                }
                builder.AppendLine("</tr>");
            }
            return builder.ToString();
        }

        private string ExportTBodyHTML(IEnumerable<MasterSwing> atItems, string BrowseNavCustomSort, string BrowseNavJsArgs)
        {
            List<MasterSwing> list = new List<MasterSwing>(atItems);
            list.Sort(new MasterSwing.DualComparison(BrowseNavCustomSort, BrowseNavCustomSort));
            if (this.opMainTableGen.cbReverseSort.Checked)
            {
                list.Reverse();
            }
            StringBuilder builder = new StringBuilder();
            builder.Append("<tr>");
            for (int i = 0; i < this.opTableAttackType.clbAT.Items.Count; i++)
            {
                if (this.opTableAttackType.clbAT.GetItemChecked(i))
                {
                    if (!string.IsNullOrEmpty(BrowseNavJsArgs))
                    {
                        builder.AppendFormat("<th><a href='javascript:ActNav({1})'>{0}</a></th>", this.opTableAttackType.clbAT.Items[i].ToString(), string.Format(BrowseNavJsArgs, this.opTableAttackType.clbAT.Items[i].ToString()));
                    }
                    else
                    {
                        builder.AppendFormat("<th>{0}</th>", this.opTableAttackType.clbAT.Items[i].ToString());
                    }
                }
            }
            builder.AppendLine("</tr>");
            for (int j = 0; j < list.Count; j++)
            {
                builder.Append("<tr>");
                MasterSwing swing = list[j];
                for (int k = 0; k < this.opTableAttackType.clbAT.Items.Count; k++)
                {
                    if (this.opTableAttackType.clbAT.GetItemChecked(k))
                    {
                        builder.AppendFormat("<td>{0}</td>", swing.GetColumnByName(this.opTableAttackType.clbAT.Items[k].ToString()));
                    }
                }
                builder.AppendLine("</tr>");
            }
            return builder.ToString();
        }

        private void exportToMacroFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.DoMacroExports(this.tvDG.SelectedNode.Parent.Index, this.tvDG.SelectedNode.Index);
            this.ExportBeep();
        }

        private void FeedbackConnect()
        {
            string message;
            if (this.cbFeedbackLogs.Checked)
            {
                try
                {
                    this.debugFile.Seek(0, SeekOrigin.Begin);
                    if (this.debugFile.Length > 0x30d40)
                    {
                        this.debugFile.Seek(-200000, SeekOrigin.End);
                    }
                    message = new StreamReader(this.debugFile).ReadToEnd();
                }
                catch (Exception exception)
                {
                    message = exception.Message;
                }
            }
            else
            {
                message = "Not Submitted";
            }
            MemoryStream w = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(w, Encoding.UTF8) {
                Formatting = Formatting.Indented,
                Indentation = 4,
                Namespaces = false
            };
            writer.WriteStartDocument();
            writer.WriteStartElement("", "Feedback", "");
            writer.WriteStartElement("", "Version", "");
            writer.WriteString(this.lblVersion.Text);
            writer.WriteEndElement();
            writer.WriteStartElement("", "Email", "");
            writer.WriteString(this.tbFeedbackEmail.Text);
            writer.WriteEndElement();
            writer.WriteStartElement("", "Character", "");
            writer.WriteString(ActGlobals.charName);
            writer.WriteEndElement();
            writer.WriteStartElement("", "Text", "");
            writer.WriteString(this.rtbFeedback.Text);
            writer.WriteEndElement();
            writer.WriteStartElement("", "Log", "");
            writer.WriteString(message);
            writer.WriteEndElement();
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            StreamReader reader = new StreamReader(w);
            reader.BaseStream.Seek(0, SeekOrigin.Begin);
            try
            {
                this.feedbackTcpClient = new TcpClient();
                this.feedbackTcpClient.Connect("actparse.dyndns.org", 0x252b);
                this.feedbackNetStream = this.feedbackTcpClient.GetStream();
                this.feedbackStream = new StreamWriter(this.feedbackNetStream);
            }
            catch (ThreadAbortException)
            {
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, this.Trans["messageBoxTitle-feedbackNoConnect"].DisplayedText);
                MessageBox.Show(exception2.Message, this.Trans["messageBoxTitle-feedbackNoConnect"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                this.debugFile.Seek(0, SeekOrigin.End);
                return;
            }
            try
            {
                this.feedbackStream.Write(reader.ReadToEnd());
                this.feedbackStream.Flush();
            }
            catch (Exception exception3)
            {
                this.WriteExceptionLog(exception3, this.Trans["messageBoxTitle-feedbackNoSend"].DisplayedText);
                MessageBox.Show(exception3.Message, this.Trans["messageBoxTitle-feedbackNoSend"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                this.debugFile.Seek(0, SeekOrigin.End);
                return;
            }
            try
            {
                this.feedbackStream.Close();
                this.feedbackNetStream.Close();
                this.feedbackTcpClient.Close();
                if (this.cbFeedbackLogs.Checked)
                {
                    this.debugFile.Seek(0, SeekOrigin.Begin);
                    this.debugFile.SetLength(0);
                }
                else
                {
                    this.debugFile.Seek(0, SeekOrigin.End);
                }
                MessageBox.Show(this.Trans["messageBox-feedbackSuccess"].DisplayedText, "", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            catch
            {
            }
        }

        internal void FinalizeACT()
        {
            base.Hide();
            dW.WriteLine("Application-Close " + DateTime.Now.ToString("s"));
            dW.Flush();
            try
            {
                foreach (FileInfo info in this.htmlDir.GetFiles())
                {
                    try
                    {
                        info.Delete();
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            this.ResetHtml();
            Process currentProcess = Process.GetCurrentProcess();
            string str = Path.GetFileNameWithoutExtension(currentProcess.MainModule.FileName) + ".config.xml";
            DirectoryInfo info2 = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\Advanced Combat Tracker");
            info2.Create();
            info2.CreateSubdirectory("Config");
            FileInfo info3 = new FileInfo(info2.FullName + @"\Config\" + str);
            this.SaveNewSettings(info3.FullName);
            string str2 = Path.GetFileNameWithoutExtension(currentProcess.MainModule.FileName) + ".historydb.xml";
            FileInfo info4 = new FileInfo(this.AppDataFolder.FullName + @"\" + str2);
            this.SaveXmlRecords(info4.FullName);
            if ((this.readThread != null) && this.readThread.IsAlive)
            {
                this.readThreadAborting = true;
                while (this.readThreadAborting)
                {
                    Application.DoEvents();
                    Thread.Sleep(100);
                }
            }
            ActGlobals.oFormActMain.opMisc.cbClipConnect.Checked = false;
            ActGlobals.oActLoader.Close();
        }

        private DateTime FindZoneName(string logFile, long startPos)
        {
            DateTime now = DateTime.Now;
            FileStream stream = new FileStream(logFile, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            StreamReader reader = new StreamReader(stream);
            stream.Seek(startPos, SeekOrigin.Begin);
            bool flag = false;
            int num2 = 0x3d090;
            while (!flag && (stream.Length > 0x20))
            {
                long position;
                if ((stream.Position - num2) > 0)
                {
                    if (stream.Position == startPos)
                    {
                        startPos--;
                        position = stream.Position;
                        stream.Seek((long) -num2, SeekOrigin.Current);
                    }
                    else
                    {
                        position = stream.Position - num2;
                        if ((stream.Position - (num2 * 2)) > 0)
                        {
                            stream.Seek((long) (-num2 * 2), SeekOrigin.Current);
                        }
                        else
                        {
                            stream.Seek(0, SeekOrigin.Begin);
                        }
                    }
                }
                else
                {
                    if (startPos == 0)
                    {
                        if (stream.Length >= num2)
                        {
                            position = num2;
                        }
                        else
                        {
                            position = stream.Length;
                        }
                    }
                    else
                    {
                        position = stream.Position;
                    }
                    stream.Seek(0, SeekOrigin.Begin);
                    flag = true;
                }
                int num3 = 0;
                while ((stream.Position < position) && (num3 < 100))
                {
                    string str = reader.ReadLine();
                    if (!string.IsNullOrEmpty(str))
                    {
                        num3 = 0;
                        if (this.zoneChangeRegex.IsMatch(str) && !str.Contains(" combat by "))
                        {
                            this.currentZone = this.zoneChangeRegex.Replace(str, "$1");
                            now = this.GetDateTimeFromLog(str);
                            flag = true;
                        }
                    }
                    else
                    {
                        num3++;
                    }
                }
            }
            if (this.lastZoneRecord != null)
            {
                this.lastZoneRecord.EndTime = this.LastKnownTime;
                this.ZoneDatabaseAdd(this.lastZoneRecord);
            }
            this.lastZoneRecord = new HistoryRecord(0, now, now.AddDays(1.0), this.currentZone, ActGlobals.charName);
            return now;
        }

        private void Form1_Resize(object sender, EventArgs e)
        {
            if (base.WindowState == FormWindowState.Minimized)
            {
                this.cbLockDG.Checked = true;
                if (this.opMisc.cbMinimizeToIcon.Checked)
                {
                    base.ShowInTaskbar = false;
                    base.Hide();
                }
            }
            else
            {
                this.cbLockDG.Checked = false;
                base.ShowInTaskbar = true;
            }
            if ((base.WindowState == FormWindowState.Minimized) && this.opMiniParse.cbMinEncBox.Checked)
            {
                ActGlobals.oFormMiniParse.Show();
                ActGlobals.oFormMiniParse.WindowState = FormWindowState.Normal;
            }
            if ((base.WindowState != FormWindowState.Minimized) && this.opMiniParse.cbRestoreEncBox.Checked)
            {
                ActGlobals.oFormMiniParse.Hide();
            }
        }

        private void FormActMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            this.FinalizeACT();
        }

        private void FormActMain_LcdButtonPressed(string lcdMode, string ButtonLabel)
        {
            string str;
            if ((ButtonLabel != "None") && ((str = lcdMode) != null))
            {
                if (!(str == "Mini Window"))
                {
                    if (!(str == "Personal Stats"))
                    {
                        if (!(str == "Spell Timers"))
                        {
                            string str5;
                            if ((str == "Sort Bars") && ((str5 = ButtonLabel) != null))
                            {
                                if (!(str5 == "Button1") && !(str5 == "Ok"))
                                {
                                    if (!(str5 == "Button2") && !(str5 == "Up"))
                                    {
                                        if ((str5 == "Button3") || (str5 == "Down"))
                                        {
                                            if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                                            {
                                                this.lcdYOffset += 30;
                                                if (this.lcdYOffset > 200)
                                                {
                                                    this.lcdYOffset = 200;
                                                }
                                            }
                                            this.UpdateLcd(lcdMode, false);
                                        }
                                        return;
                                    }
                                }
                                else
                                {
                                    if (this.textExportFormats.Count != 0)
                                    {
                                        this.lcdMiniModeIndex++;
                                        if (this.lcdMiniModeIndex > (this.TextExportFormats.Count - 1))
                                        {
                                            this.lcdMiniModeIndex = 0;
                                        }
                                        ThreadInvokes.ComboBoxSetSelectedIndex(this, this.opLcdGeneral.ddlLcdMiniFormat, this.lcdMiniModeIndex);
                                        this.UpdateLcd(lcdMode, false);
                                    }
                                    return;
                                }
                                if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                                {
                                    this.lcdYOffset -= 30;
                                }
                                else
                                {
                                    this.lcdYOffset -= 90;
                                }
                                if (this.lcdYOffset < 0)
                                {
                                    this.lcdYOffset = 0;
                                }
                                this.UpdateLcd(lcdMode, false);
                            }
                        }
                        else
                        {
                            string str4 = ButtonLabel;
                            if (str4 != null)
                            {
                                if (!(str4 == "Button2") && !(str4 == "Up"))
                                {
                                    if (!(str4 == "Button3") && !(str4 == "Down"))
                                    {
                                        return;
                                    }
                                }
                                else
                                {
                                    if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                                    {
                                        this.lcdYOffset -= 30;
                                    }
                                    else
                                    {
                                        this.lcdYOffset -= 90;
                                    }
                                    if (this.lcdYOffset < 0)
                                    {
                                        this.lcdYOffset = 0;
                                    }
                                    this.UpdateLcd(lcdMode, false);
                                    return;
                                }
                                if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                                {
                                    this.lcdYOffset += 30;
                                    if (this.lcdYOffset > 200)
                                    {
                                        this.lcdYOffset = 200;
                                    }
                                }
                                else
                                {
                                    this.lcdYOffset += 90;
                                    if (this.lcdYOffset > 240)
                                    {
                                        this.lcdYOffset = 240;
                                    }
                                }
                                this.UpdateLcd(lcdMode, false);
                            }
                        }
                    }
                    else
                    {
                        string str3 = ButtonLabel;
                        if (str3 != null)
                        {
                            if (!(str3 == "Button1") && !(str3 == "Ok"))
                            {
                                if (!(str3 == "Button2") && !(str3 == "Up"))
                                {
                                    if ((str3 == "Button3") || (str3 == "Down"))
                                    {
                                        if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                                        {
                                            this.lcdYOffset += 0x2b;
                                            if (this.lcdYOffset > 200)
                                            {
                                                this.lcdYOffset = 200;
                                            }
                                        }
                                        else
                                        {
                                            this.lcdYOffset += 90;
                                            if (this.lcdYOffset > 240)
                                            {
                                                this.lcdYOffset = 240;
                                            }
                                        }
                                        this.UpdateLcd(lcdMode, false);
                                    }
                                    return;
                                }
                            }
                            else
                            {
                                if (this.textExportFormats.Count != 0)
                                {
                                    this.lcdMiniModeIndex++;
                                    if (this.lcdMiniModeIndex > (this.TextExportFormats.Count - 1))
                                    {
                                        this.lcdMiniModeIndex = 0;
                                    }
                                    ThreadInvokes.ComboBoxSetSelectedIndex(this, this.opLcdGeneral.ddlLcdPersonalFormat, this.lcdMiniModeIndex);
                                    this.UpdateLcd(lcdMode, false);
                                }
                                return;
                            }
                            if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                            {
                                this.lcdYOffset -= 0x2b;
                            }
                            else
                            {
                                this.lcdYOffset -= 90;
                            }
                            if (this.lcdYOffset < 0)
                            {
                                this.lcdYOffset = 0;
                            }
                            this.UpdateLcd(lcdMode, false);
                        }
                    }
                }
                else
                {
                    string str2 = ButtonLabel;
                    if (str2 != null)
                    {
                        if (!(str2 == "Button1") && !(str2 == "Ok"))
                        {
                            if (!(str2 == "Button2") && !(str2 == "Up"))
                            {
                                if ((str2 == "Button3") || (str2 == "Down"))
                                {
                                    if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                                    {
                                        this.lcdYOffset += 30;
                                        if (this.lcdYOffset > 200)
                                        {
                                            this.lcdYOffset = 200;
                                        }
                                    }
                                    else
                                    {
                                        this.lcdYOffset += 90;
                                        if (this.lcdYOffset > 240)
                                        {
                                            this.lcdYOffset = 240;
                                        }
                                    }
                                    this.UpdateLcd(lcdMode, false);
                                }
                            }
                            else
                            {
                                if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                                {
                                    this.lcdYOffset -= 30;
                                }
                                else
                                {
                                    this.lcdYOffset -= 90;
                                }
                                if (this.lcdYOffset < 0)
                                {
                                    this.lcdYOffset = 0;
                                }
                                this.UpdateLcd(lcdMode, false);
                            }
                        }
                        else if (this.textExportFormats.Count != 0)
                        {
                            this.lcdMiniModeIndex++;
                            if (this.lcdMiniModeIndex > (this.TextExportFormats.Count - 1))
                            {
                                this.lcdMiniModeIndex = 0;
                            }
                            ThreadInvokes.ComboBoxSetSelectedIndex(this, this.opLcdGeneral.ddlLcdMiniFormat, this.lcdMiniModeIndex);
                            this.UpdateLcd(lcdMode, false);
                        }
                    }
                }
            }
        }

        private void FormActMain_LcdUpdate(string lcdMode, LcdUpdateEventArgs lcdInfo)
        {
            try
            {
                Bitmap bitmap;
                Font font;
                string textExport;
                StringReader reader;
                int num;
                List<TimerFrame> list;
                if (lcdInfo.LcdType == LcdDeviceType.Monochrome)
                {
                    bitmap = new Bitmap(160, 0xf3);
                }
                else
                {
                    bitmap = new Bitmap(320, 480);
                }
                Graphics graphics = Graphics.FromImage(bitmap);
                if (lcdInfo.LcdType == LcdDeviceType.Monochrome)
                {
                    graphics.TextRenderingHint = TextRenderingHint.SingleBitPerPixelGridFit;
                }
                else
                {
                    graphics.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;
                    graphics.SmoothingMode = SmoothingMode.AntiAlias;
                }
                graphics.Clear(System.Drawing.Color.Beige);
                SolidBrush brush = new SolidBrush(System.Drawing.Color.Black);
                SolidBrush brush2 = new SolidBrush(System.Drawing.Color.Beige);
                Pen pen = new Pen(System.Drawing.Color.Black);
                string str4 = lcdMode;
                if (str4 != null)
                {
                    if (!(str4 == "Mini Window"))
                    {
                        if (str4 == "Personal Stats")
                        {
                            goto Label_02BE;
                        }
                        if (str4 == "Spell Timers")
                        {
                            goto Label_04B3;
                        }
                        if (str4 == "Sort Bars")
                        {
                            goto Label_073E;
                        }
                    }
                    else
                    {
                        if (lcdInfo.LcdType == LcdDeviceType.Monochrome)
                        {
                            font = new Font(this.opLcdMono.btnLcdFont.Font.Name, this.opLcdMono.btnLcdFont.Font.Size + ((int) this.opLcdMono.nudLcd0FontOffset.Value));
                        }
                        else
                        {
                            font = new Font(this.opLcdColor.fccLcdMini.FontSetting.Name, this.opLcdColor.fccLcdMini.FontSetting.Size, this.opLcdColor.fccLcdMini.FontSetting.Style);
                            brush2 = new SolidBrush(this.opLcdColor.fccLcdMini.BackColorSetting);
                            brush = new SolidBrush(this.opLcdColor.fccLcdMini.ForeColorSetting);
                            graphics.Clear(brush2.Color);
                        }
                        textExport = string.Empty;
                        try
                        {
                            TextExportFormatOptions defaultTextFormat;
                            if (this.opLcdGeneral.ddlLcdMiniFormat.SelectedIndex == -1)
                            {
                                defaultTextFormat = this.defaultTextFormat;
                            }
                            else
                            {
                                defaultTextFormat = this.textExportFormats[this.opLcdGeneral.ddlLcdMiniFormat.SelectedIndex];
                            }
                            if (this.opMiniParse.cbMiniColumnAlign.Checked)
                            {
                                textExport = this.GetTextExport(this.ActiveZone.ActiveEncounter, defaultTextFormat, font, 0);
                            }
                            else
                            {
                                textExport = this.GetTextExport(this.ActiveZone.ActiveEncounter, defaultTextFormat);
                            }
                        }
                        catch
                        {
                            return;
                        }
                        reader = new StringReader(textExport);
                        for (num = 0; reader.Peek() != -1; num++)
                        {
                            if (lcdInfo.LcdType == LcdDeviceType.Monochrome)
                            {
                                graphics.DrawString(reader.ReadLine(), font, brush, 0f, (float) (((int) this.opLcdMono.nudLcd0VSpacing.Value) * num));
                            }
                            else
                            {
                                graphics.DrawString(reader.ReadLine(), font, brush, 0f, (float) (((int) this.opLcdColor.nudLcdMiniVSpacing.Value) * num));
                            }
                        }
                        lcdInfo.SetLcdBitmapView(bitmap, this.lcdYOffset);
                    }
                }
                return;
            Label_02BE:
                if (lcdInfo.LcdType == LcdDeviceType.Monochrome)
                {
                    font = new Font(this.opLcdMono.btnLcdFont.Font.Name, this.opLcdMono.btnLcdFont.Font.Size + ((int) this.opLcdMono.nudLcd1FontOffset.Value));
                }
                else
                {
                    font = new Font(this.opLcdColor.fccLcdPersonal.FontSetting.Name, this.opLcdColor.fccLcdPersonal.FontSetting.Size, this.opLcdColor.fccLcdPersonal.FontSetting.Style);
                    brush2 = new SolidBrush(this.opLcdColor.fccLcdPersonal.BackColorSetting);
                    brush = new SolidBrush(this.opLcdColor.fccLcdPersonal.ForeColorSetting);
                    graphics.Clear(brush2.Color);
                }
                if ((this.ActiveZone.ActiveEncounter != null) && (this.ActiveZone.ActiveEncounter.GetCombatant(ActGlobals.charName) != null))
                {
                    textExport = string.Empty;
                    try
                    {
                        TextExportFormatOptions defaultPersonalTextFormat;
                        if (this.opLcdGeneral.ddlLcdPersonalFormat.SelectedIndex == -1)
                        {
                            defaultPersonalTextFormat = this.defaultPersonalTextFormat;
                        }
                        else
                        {
                            defaultPersonalTextFormat = this.textExportFormats[this.opLcdGeneral.ddlLcdPersonalFormat.SelectedIndex];
                        }
                        textExport = this.GetPersonalTextExport(this.ActiveZone.ActiveEncounter, defaultPersonalTextFormat);
                    }
                    catch
                    {
                        return;
                    }
                    reader = new StringReader(textExport);
                    for (num = 0; reader.Peek() != -1; num++)
                    {
                        if (lcdInfo.LcdType == LcdDeviceType.Monochrome)
                        {
                            graphics.DrawString(reader.ReadLine(), font, brush, 0f, (float) (((int) this.opLcdMono.nudLcd1VSpacing.Value) * num));
                        }
                        else
                        {
                            graphics.DrawString(reader.ReadLine(), font, brush, 0f, (float) (((int) this.opLcdColor.nudLcdPersonalVSpacing.Value) * num));
                        }
                    }
                    lcdInfo.SetLcdBitmapView(bitmap, this.lcdYOffset);
                }
                return;
            Label_04B3:
                list = ActGlobals.oFormSpellTimers.GetTimerFrames();
                if (lcdInfo.LcdType == LcdDeviceType.Monochrome)
                {
                    font = new Font(this.opLcdMono.btnLcdFont.Font.Name, this.opLcdMono.btnLcdFont.Font.Size + ((int) this.opLcdMono.nudLcd2FontOffset.Value));
                    for (int i = 0; i < list.Count; i++)
                    {
                        TimerFrame frame = list[i];
                        Rectangle rect = new Rectangle(100, ((int) this.opLcdMono.nudLcd2VSpacing.Value) * i, 60, ((int) this.opLcdMono.nudLcd2VSpacing.Value) - 1);
                        graphics.DrawString(frame.GetLargestVal(false) + " " + frame.Name, font, brush, 0f, (float) rect.Top);
                        graphics.FillRectangle(brush2, rect);
                        graphics.DrawLine(pen, rect.Left, rect.Top + 1, rect.Left, rect.Bottom);
                        graphics.DrawLine(pen, rect.Left, rect.Bottom, rect.Right, rect.Bottom);
                        if (frame.GetLargestVal(false) > 0)
                        {
                            if (frame.GetLargestVal(false) > frame.WarningValue)
                            {
                                graphics.DrawRectangle(pen, (float) rect.Left, (float) (rect.Top + 2), (((float) frame.GetLargestVal(false)) / 60f) * 60f, (float) (rect.Height - 2));
                            }
                            else
                            {
                                graphics.FillRectangle(brush, (float) rect.Left, (float) (rect.Top + 2), (((float) frame.GetLargestVal(false)) / 60f) * 60f, (float) (rect.Height - 2));
                            }
                        }
                    }
                }
                else
                {
                    Dictionary<string, System.Drawing.Color> drawColors = new Dictionary<string, System.Drawing.Color>();
                    drawColors.Add("ForeColor", this.opColorMisc.ccSpellTimerForeColor.ForeColorSetting);
                    drawColors.Add("BackColor", this.opColorMisc.ccSpellTimerBackColor.ForeColorSetting);
                    drawColors.Add("WarningColor", this.opColorMisc.ccSpellTimerWarnColor.ForeColorSetting);
                    drawColors.Add("ExpiredColor", this.opColorMisc.ccSpellTimerExpireColor.ForeColorSetting);
                    bitmap = ActGlobals.oFormSpellTimers.GenerateSpellTimerView(320, 480, 0.8f, list, 0, drawColors);
                }
                lcdInfo.SetLcdBitmapView(bitmap, this.lcdYOffset);
                return;
            Label_073E:
                if (this.ActiveZone.ActiveEncounter == null)
                {
                    return;
                }
                if (lcdInfo.LcdType == LcdDeviceType.Monochrome)
                {
                    EncounterData activeEncounter = this.ActiveZone.ActiveEncounter;
                    font = new Font(this.opLcdMono.btnLcdFont.Font.Name, this.opLcdMono.btnLcdFont.Font.Size + ((int) this.opLcdMono.nudLcd3FontOffset.Value));
                    List<CombatantData> list2 = new List<CombatantData>(activeEncounter.Items.Values);
                    string sorting = string.Empty;
                    try
                    {
                        TextExportFormatOptions options3;
                        if (this.opLcdGeneral.ddlLcdMiniFormat.SelectedIndex == -1)
                        {
                            options3 = this.defaultTextFormat;
                        }
                        else
                        {
                            options3 = this.textExportFormats[this.opLcdGeneral.ddlLcdMiniFormat.SelectedIndex];
                        }
                        sorting = options3.Sorting;
                        list2.Sort(new CombatantData.DualComparison(options3.Sorting, string.Empty));
                    }
                    catch (Exception exception)
                    {
                        this.WriteExceptionLog(exception, string.Empty);
                    }
                    list2.Reverse();
                    List<CombatantData> allies = new List<CombatantData>();
                    if (this.opGraphing.cbOnlyGraphAllies.Checked)
                    {
                        if (activeEncounter.GetIsSelective() && activeEncounter.GetIgnoreEnemies())
                        {
                            allies = list2;
                        }
                        else
                        {
                            allies = activeEncounter.GetAllies();
                        }
                    }
                    List<StrFloat> list4 = new List<StrFloat>();
                    foreach (CombatantData data3 in list2)
                    {
                        if (((!this.opGraphing.cbOnlyGraphAllies.Checked || (allies.Count <= 0)) || (allies.IndexOf(data3) != -1)) && (!this.opSelectiveParsing.rbSParseExport.Checked || this.SelectiveListGetSelected(data3.Name)))
                        {
                            try
                            {
                                float val = float.Parse(CombatantData.ColumnDefs[sorting].GetSqlData(data3), this.usCulture);
                                if (val > 0f)
                                {
                                    list4.Add(new StrFloat(data3.Name, val));
                                }
                                continue;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                    }
                    float num4 = 1f;
                    foreach (StrFloat num5 in list4)
                    {
                        if (num5.Val > num4)
                        {
                            num4 = (int) num5.Val;
                        }
                    }
                    num4 *= 1.02f;
                    float num6 = 160f / num4;
                    float single1 = 1f / num6;
                    for (int j = 0; j < list4.Count; j++)
                    {
                        Rectangle rectangle2 = new Rectangle(0, ((int) this.opLcdMono.nudLcd3VSpacing.Value) * j, 160, ((int) this.opLcdMono.nudLcd3VSpacing.Value) - 1);
                        int width = (int) ((list4[j].Val / num4) * 160f);
                        graphics.DrawRectangle(pen, rectangle2.Left, rectangle2.Top, width, rectangle2.Height + 1);
                        string text = string.Format("{1:0} {0}", list4[j].Name, list4[j].Val);
                        if ((graphics.MeasureString(text, font).Width < (width - 2)) || (width > 80))
                        {
                            graphics.DrawString(text, font, brush, 2f, (float) (rectangle2.Top + 1));
                        }
                        else
                        {
                            graphics.DrawString(text, font, brush, (float) (width + 2), (float) (rectangle2.Top + 1));
                        }
                    }
                    lcdInfo.SetLcdBitmapView(bitmap, this.lcdYOffset);
                }
                else
                {
                    TextExportFormatOptions options4;
                    if (this.opLcdGeneral.ddlLcdMiniFormat.SelectedIndex == -1)
                    {
                        options4 = this.defaultTextFormat;
                    }
                    else
                    {
                        options4 = this.textExportFormats[this.opLcdGeneral.ddlLcdMiniFormat.SelectedIndex];
                    }
                    lcdInfo.SetLcdBitmapView(this.GenEncounterGraph(this.ActiveZone.ActiveEncounter, 320, 240, options4.Sorting), 0);
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, lcdMode);
            }
        }

        private void FormActMain_OnLogLineRead(bool isImport, LogLineEventArgs logInfo)
        {
            if (!isImport)
            {
                try
                {
                    if (this.shareRegex.IsMatch(logInfo.logLine))
                    {
                        this.AddXmlShareToList(logInfo.logLine);
                    }
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, "XML Snippet\r\n" + logInfo.logLine);
                }
            }
        }

        internal string FTPDeleteFile(string fileName)
        {
            FtpWebRequest request = (FtpWebRequest) WebRequest.Create(("ftp://" + this.opFileHTML.tbExFTPServer.Text + ":" + this.opFileHTML.nudExFTPPort.Value.ToString("0") + this.opFileHTML.tbExFTPPath.Text) + fileName);
            request.Timeout = 0x4e20;
            request.Credentials = new NetworkCredential(this.opFileHTML.tbExFTPUser.Text, this.opFileHTML.tbExFTPPass.Text);
            request.Method = "DELE";
            request.KeepAlive = true;
            FtpWebResponse response = (FtpWebResponse) request.GetResponse();
            if (response.StatusCode != FtpStatusCode.FileActionOK)
            {
                throw new Exception(response.StatusCode.ToString() + " - " + response.StatusDescription);
            }
            return response.StatusDescription;
        }

        private string FTPDisconnect()
        {
            FtpWebRequest request = (FtpWebRequest) WebRequest.Create("ftp://" + this.opFileHTML.tbExFTPServer.Text + ":" + this.opFileHTML.nudExFTPPort.Value.ToString("0") + this.opFileHTML.tbExFTPPath.Text);
            request.Timeout = 0x4e20;
            request.Credentials = new NetworkCredential(this.opFileHTML.tbExFTPUser.Text, this.opFileHTML.tbExFTPPass.Text);
            request.Method = "PWD";
            request.KeepAlive = false;
            FtpWebResponse response = (FtpWebResponse) request.GetResponse();
            return response.StatusDescription;
        }

        internal string FTPUploadFile(string fileName, Stream fileStream, bool binaryMode)
        {
            FtpWebRequest request = (FtpWebRequest) WebRequest.Create(("ftp://" + this.opFileHTML.tbExFTPServer.Text + ":" + this.opFileHTML.nudExFTPPort.Value.ToString("0") + this.opFileHTML.tbExFTPPath.Text) + fileName);
            request.Timeout = 0x4e20;
            request.Credentials = new NetworkCredential(this.opFileHTML.tbExFTPUser.Text, this.opFileHTML.tbExFTPPass.Text);
            request.Method = "STOR";
            request.UseBinary = binaryMode;
            request.UsePassive = this.opFileHTML.rbExFTPPassive.Checked;
            request.KeepAlive = true;
            if (binaryMode)
            {
                BinaryWriter writer = new BinaryWriter(request.GetRequestStream());
                BinaryReader reader = new BinaryReader(fileStream);
                writer.Write(reader.ReadBytes((int) fileStream.Length));
                writer.Flush();
                writer.Close();
            }
            else
            {
                StreamWriter writer2 = new StreamWriter(request.GetRequestStream());
                writer2.Write(new StreamReader(fileStream).ReadToEnd());
                writer2.Flush();
                writer2.Close();
            }
            FtpWebResponse response = (FtpWebResponse) request.GetResponse();
            if (response.StatusCode != FtpStatusCode.ClosingData)
            {
                throw new Exception(response.StatusCode.ToString() + " - " + response.StatusDescription);
            }
            return response.StatusDescription;
        }

        internal Bitmap GenAttackTypeGraph(AttackType AttackTypeSource, int SizeX, int SizeY, string Sorting)
        {
            Bitmap image = new Bitmap(SizeX, SizeY);
            try
            {
                float num3;
                List<MasterSwing> list = new List<MasterSwing>(AttackTypeSource.Items);
                try
                {
                    list.Sort(new MasterSwing.DualComparison(Sorting, Sorting));
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, string.Empty);
                }
                SolidBrush brush = new SolidBrush(this.opColorGraphing.ccEncBarBackFill.ForeColorSetting);
                SolidBrush brush2 = new SolidBrush(this.opColorGraphing.ccEncBarLegendText.ForeColorSetting);
                Pen pen = new Pen(this.opColorGraphing.ccEncBarOutlining.ForeColorSetting);
                Pen pen2 = new Pen(this.opColorGraphing.ccEncBarYLines.ForeColorSetting);
                Dictionary<int, SolidBrush> dictionary = new Dictionary<int, SolidBrush>();
                foreach (KeyValuePair<int, List<string>> pair in CombatantData.SwingTypeToDamageTypeDataLinksOutgoing)
                {
                    dictionary.Add(pair.Key, new SolidBrush(System.Drawing.Color.FromArgb(180, CombatantData.OutgoingDamageTypeDataObjects[pair.Value[0]].TypeColor)));
                }
                Dictionary<int, SolidBrush> dictionary2 = new Dictionary<int, SolidBrush>();
                foreach (KeyValuePair<int, List<string>> pair2 in CombatantData.SwingTypeToDamageTypeDataLinksOutgoing)
                {
                    dictionary2.Add(pair2.Key, new SolidBrush(System.Drawing.Color.FromArgb(0xff, CombatantData.OutgoingDamageTypeDataObjects[pair2.Value[0]].TypeColor)));
                }
                Graphics graphics = Graphics.FromImage(image);
                graphics.SmoothingMode = SmoothingMode.AntiAlias;
                graphics.Clear(brush.Color);
                int num = 0x10;
                Rectangle rect = new Rectangle(4, 4, (image.Width - 1) - (num * 4), (image.Height - 1) - (num * 2));
                graphics.DrawRectangle(pen, rect);
                float bottom = rect.Bottom;
                try
                {
                    num3 = ((float) rect.Width) / ((float) list.Count);
                }
                catch
                {
                    return image;
                }
                float left = rect.Left;
                float damage = 1f;
                foreach (MasterSwing swing in list)
                {
                    if (((float) swing.Damage) > damage)
                    {
                        damage = (float) swing.Damage;
                    }
                }
                int length = (int) damage;
                length = length.ToString().ToCharArray().Length;
                int num7 = (int) Math.Pow(10.0, (double) length);
                while ((num7 / 2) > damage)
                {
                    num7 /= 2;
                }
                if ((((float) num7) / 1.25f) > damage)
                {
                    num7 = System.Convert.ToInt32((float) (((float) num7) / 1.25f));
                }
                float num8 = ((float) rect.Height) / ((float) num7);
                float single1 = 1f / num8;
                Font font = new Font("Arial", 8f);
                graphics.DrawString("0", font, brush2, (float) (rect.Right + 5), (float) rect.Bottom);
                graphics.DrawString(System.Convert.ToInt32(num7).ToString(), font, brush2, (float) (rect.Right + 5), (float) rect.Top);
                try
                {
                    int num9 = System.Convert.ToInt32((float) (bottom - System.Convert.ToInt32((float) ((num7 / 4) * num8))));
                    graphics.DrawLine(pen2, rect.Left, num9, rect.Right, num9);
                    graphics.DrawString((num7 / 4).ToString(), font, brush2, (float) (rect.Right + 5), (float) num9);
                    num9 = System.Convert.ToInt32((float) (bottom - System.Convert.ToInt32((float) (((num7 / 4) * 2) * num8))));
                    graphics.DrawLine(pen2, rect.Left, num9, rect.Right, num9);
                    graphics.DrawString(((num7 / 4) * 2).ToString(), font, brush2, (float) (rect.Right + 5), (float) num9);
                    num9 = System.Convert.ToInt32((float) (bottom - System.Convert.ToInt32((float) (((num7 / 4) * 3) * num8))));
                    graphics.DrawLine(pen2, rect.Left, num9, rect.Right, num9);
                    graphics.DrawString(((num7 / 4) * 3).ToString(), font, brush2, (float) (rect.Right + 5), (float) num9);
                }
                catch
                {
                }
                this.ttg.Items.Clear();
                for (int i = 0; i < list.Count; i++)
                {
                    MasterSwing swing2 = list[i];
                    float x = left;
                    float y = bottom - (((float) swing2.Damage) * num8);
                    float width = num3;
                    float height = ((float) swing2.Damage) * num8;
                    if ((i > 0) && (swing2.Time != list[i - 1].Time))
                    {
                        graphics.DrawLine(pen2, left, (float) rect.Top, left, (float) rect.Bottom);
                    }
                    if (swing2.Critical)
                    {
                        graphics.FillRectangle(dictionary2[swing2.SwingType], x, y, width, height);
                    }
                    else
                    {
                        graphics.FillRectangle(dictionary[swing2.SwingType], x, y, width, height);
                    }
                    graphics.DrawRectangle(pen, x, y, width, height);
                    this.ttg.Items.Add(new ToolTipRect(-1, string.Format("{0}\n{1} -> {2}\n{3} {4}", new object[] { swing2.Time, swing2.Attacker, swing2.Victim, swing2.AttackType, swing2.Damage }), x, (float) rect.Y, width, (float) rect.Height));
                    if ((rect.Width / list.Count) > 15)
                    {
                        if ((rect.Width / list.Count) > 0x19)
                        {
                            graphics.DrawString(swing2.Damage.ToString(true), font, brush2, (float) ((left - 8f) + (num3 / 2f)), (float) (bottom + 2f));
                        }
                        else if ((i % 2) == 0)
                        {
                            graphics.DrawString(swing2.Damage.ToString(true), font, brush2, (float) ((left - 8f) + (num3 / 2f)), (float) (bottom + 12f));
                        }
                        else
                        {
                            graphics.DrawString(swing2.Damage.ToString(true), font, brush2, (float) ((left - 8f) + (num3 / 2f)), (float) (bottom + 2f));
                        }
                    }
                    left += num3;
                }
                graphics.DrawLine(pen2, left, (float) rect.Top, left, (float) rect.Bottom);
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, string.Empty);
            }
            return image;
        }

        internal Bitmap GenCombatantGraph(CombatantData CombatantSource, int SizeX, int SizeY)
        {
            Bitmap image = new Bitmap(SizeX, SizeY);
            try
            {
                int[,] numArray;
                int num = (int) this.opGraphing.nudGraphAvg.Value;
                string str = string.Empty;
                List<string> list = new List<string>();
                for (int i = 0; i < this.opGraphing.clbSoloGraphTypes.Items.Count; i++)
                {
                    if (this.opGraphing.clbSoloGraphTypes.GetItemChecked(i))
                    {
                        list.Add((string) this.opGraphing.clbSoloGraphTypes.Items[i]);
                    }
                }
                int totalSeconds = (int) CombatantSource.Parent.Duration.TotalSeconds;
                bool flag = this.opGraphing.cbGraphRollingAvg.Checked;
                if (flag)
                {
                    numArray = new int[list.Count, totalSeconds + 1];
                }
                else
                {
                    numArray = new int[list.Count, (totalSeconds / num) + 2];
                }
                for (int j = 0; j < list.Count; j++)
                {
                    AttackType attackType = CombatantSource.GetAttackType(ActGlobals.ActLocalization.LocalizationStrings["attackTypeTerm-all"].DisplayedText, list[j]);
                    if (attackType != null)
                    {
                        List<MasterSwing> list2 = new List<MasterSwing>(attackType.Items);
                        for (int num5 = 0; num5 < list2.Count; num5++)
                        {
                            MasterSwing swing = list2[num5];
                            if (swing.Damage > 0)
                            {
                                TimeSpan span = (TimeSpan) (swing.Time - CombatantSource.EncStartTime);
                                int num6 = (int) span.TotalSeconds;
                                if (flag)
                                {
                                    for (int num7 = num6; ((num6 >= 0) && (num7 < (num6 + num))) && (num7 < totalSeconds); num7++)
                                    {
                                        int num1 = numArray[j, num7];
                                        num1[0] += swing.Damage;
                                    }
                                }
                                else
                                {
                                    int num26 = numArray[j, (num6 / num) + 1];
                                    num26[0] += swing.Damage;
                                }
                            }
                        }
                    }
                }
                Font font = new Font("Arial", 8f);
                SolidBrush brush = new SolidBrush(this.opColorGraphing.ccEncBarBackFill.ForeColorSetting);
                SolidBrush brush2 = new SolidBrush(this.opColorGraphing.ccEncBarLegendText.ForeColorSetting);
                SolidBrush brush3 = new SolidBrush(this.opColorGraphing.ccEncBarYLines.ForeColorSetting);
                Pen pen = new Pen(this.opColorGraphing.ccEncBarOutlining.ForeColorSetting);
                Pen pen2 = new Pen(this.opColorGraphing.ccEncBarYLines.ForeColorSetting);
                Graphics graphics = Graphics.FromImage(image);
                graphics.SmoothingMode = SmoothingMode.AntiAlias;
                graphics.Clear(brush.Color);
                int num8 = 0x10;
                Rectangle rect = new Rectangle(4, 4, (image.Width - 1) - (num8 * 8), (image.Height - 1) - (num8 * 2));
                graphics.DrawRectangle(pen, rect);
                int num9 = 0;
                int num10 = (int) CombatantSource.Parent.Duration.TotalSeconds;
                if (!flag)
                {
                    num10 /= num;
                }
                for (int k = 0; k < list.Count; k++)
                {
                    for (int num12 = 0; num12 < num10; num12++)
                    {
                        if ((numArray[k, num12] / num) > num9)
                        {
                            num9 = numArray[k, num12] / num;
                        }
                    }
                }
                int length = num9.ToString().ToCharArray().Length;
                int num14 = (int) Math.Pow(10.0, (double) length);
                while ((num14 / 2) > num9)
                {
                    num14 /= 2;
                }
                if ((((float) num14) / 1.25f) > num9)
                {
                    num14 = System.Convert.ToInt32((float) (((float) num14) / 1.25f));
                }
                float num15 = ((float) rect.Height) / ((float) num14);
                float single1 = 1f / num15;
                float w = ((float) rect.Width) / ((float) num10);
                this.ttg.Items.Clear();
                for (int m = 0; m < list.Count; m++)
                {
                    str = list[m];
                    PointF[] points = new PointF[num10];
                    for (int num18 = 0; num18 < num10; num18++)
                    {
                        points[num18] = new PointF(rect.Left + (w * num18), rect.Bottom - (num15 * (numArray[m, num18] / num)));
                        this.ttg.Items.Add(new ToolTipRect(-1, string.Format("{0} {1}", str, numArray[m, num18] / num), rect.Left + (w * num18), (float) rect.Top, w, (float) rect.Bottom));
                    }
                    Pen pen3 = null;
                    if (CombatantData.OutgoingDamageTypeDataObjects.ContainsKey(list[m]))
                    {
                        pen3 = new Pen(CombatantData.OutgoingDamageTypeDataObjects[list[m]].TypeColor, 1f);
                    }
                    if (CombatantData.IncomingDamageTypeDataObjects.ContainsKey(list[m]))
                    {
                        pen3 = new Pen(CombatantData.IncomingDamageTypeDataObjects[list[m]].TypeColor, 1f);
                    }
                    graphics.DrawLines(pen3, points);
                    graphics.DrawLine(pen3, (int) (rect.Right + 4), (int) ((rect.Top + 0x20) + (0x10 * m)), (int) (rect.Right + 12), (int) ((rect.Top + 0x20) + (0x10 * m)));
                    graphics.DrawString(str, font, brush2, (float) (rect.Right + 0x10), (float) (((rect.Top + 0x20) + (0x10 * m)) - 6));
                }
                bool flag2 = false;
                float num19 = 500f;
                for (int n = 0; n < num10; n++)
                {
                    string str2;
                    if (flag)
                    {
                        str2 = n.ToString();
                    }
                    else
                    {
                        str2 = (n * num).ToString();
                    }
                    this.ttg.Items.Insert(0, new ToolTipRect(-1, string.Format("+{0} ({1} sec average)", str2, num), rect.Left + (w * n), (float) rect.Top, w, (float) rect.Bottom));
                    num19 += w;
                    if ((((n % num) == 0) || !flag) && (num19 > 15f))
                    {
                        if (flag2)
                        {
                            graphics.DrawString(str2, font, brush2, rect.Left + (w * n), (float) (rect.Bottom + 2));
                        }
                        else
                        {
                            graphics.DrawString(str2, font, brush2, rect.Left + (w * n), (float) (rect.Bottom + 12));
                        }
                        flag2 = !flag2;
                        num19 = 0f;
                    }
                }
                try
                {
                    int num21 = rect.Bottom - System.Convert.ToInt32((float) ((num14 / 4) * num15));
                    graphics.DrawLine(pen2, rect.Left, num21, rect.Right, num21);
                    graphics.DrawString((num14 / 4).ToString(), font, brush3, (float) rect.Left, (float) num21);
                    num21 = rect.Bottom - System.Convert.ToInt32((float) (((num14 / 4) * 2) * num15));
                    graphics.DrawLine(pen2, rect.Left, num21, rect.Right, num21);
                    graphics.DrawString(((num14 / 4) * 2).ToString(), font, brush3, (float) rect.Left, (float) num21);
                    num21 = rect.Bottom - System.Convert.ToInt32((float) (((num14 / 4) * 3) * num15));
                    graphics.DrawLine(pen2, rect.Left, num21, rect.Right, num21);
                    graphics.DrawString(((num14 / 4) * 3).ToString(), font, brush3, (float) rect.Left, (float) num21);
                }
                catch
                {
                }
                graphics.DrawString("0 DPS", font, brush2, (float) (rect.Right + 5), (float) rect.Bottom);
                graphics.DrawString(num14 + " DPS", font, brush2, (float) (rect.Right + 5), (float) rect.Top);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
            return image;
        }

        internal Bitmap GenDamageTypeGraph(DamageTypeData DamageTypeSource, int SizeX, int SizeY, string Sorting)
        {
            Bitmap image = new Bitmap(SizeX, SizeY);
            try
            {
                string str2;
                List<AttackType> list = new List<AttackType>(DamageTypeSource.Items.Values);
                this.ttg.Items.Clear();
                List<StrFloat> list2 = new List<StrFloat>();
                AttackType data = null;
                list.Sort(AttackType.ColumnDefs[Sorting].SortComparer);
                list.Reverse();
                foreach (AttackType type2 in list)
                {
                    if (type2.Type == ActGlobals.ActLocalization.LocalizationStrings["attackTypeTerm-all"].DisplayedText)
                    {
                        data = type2;
                        break;
                    }
                }
                if (((str2 = Sorting) != null) && (str2 == "Resist"))
                {
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    dictionary.Add("All", 0);
                    for (int j = 0; j < data.Items.Count; j++)
                    {
                        MasterSwing swing = data.Items[j];
                        string damageType = swing.DamageType;
                        if (damageType.StartsWith("warded/"))
                        {
                            damageType = damageType.Substring(7);
                        }
                        if (!dictionary.ContainsKey(damageType))
                        {
                            dictionary.Add(damageType, 0);
                        }
                        if (swing.Damage > 0)
                        {
                            Dictionary<string, int> dictionary2;
                            string str3;
                            Dictionary<string, int> dictionary3;
                            (dictionary2 = dictionary)[str3 = damageType] = dictionary2[str3] + swing.Damage;
                            (dictionary3 = dictionary)["All"] = dictionary3["All"] + swing.Damage;
                        }
                    }
                    foreach (KeyValuePair<string, int> pair in dictionary)
                    {
                        if (pair.Key != "All")
                        {
                            list2.Add(new StrFloat(pair.Key, ((float) pair.Value) / ((float) dictionary["All"])));
                        }
                    }
                }
                else
                {
                    foreach (AttackType type3 in list)
                    {
                        if (type3.Type != ActGlobals.ActLocalization.LocalizationStrings["attackTypeTerm-all"].DisplayedText)
                        {
                            try
                            {
                                float num2 = float.Parse(AttackType.ColumnDefs[Sorting].GetSqlData(type3), this.usCulture);
                                if (num2 > 0f)
                                {
                                    list2.Add(new StrFloat(type3.Type, num2 / float.Parse(AttackType.ColumnDefs[Sorting].GetSqlData(data), this.usCulture)));
                                }
                                continue;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                    }
                }
                SolidBrush brush = new SolidBrush(System.Drawing.Color.FromArgb(150, this.opColorGraphing.ccEncBarAvgText.ForeColorSetting));
                SolidBrush brush2 = new SolidBrush(this.opColorGraphing.ccEncBarBackFill.ForeColorSetting);
                SolidBrush brush3 = new SolidBrush(this.opColorGraphing.ccEncBarLegendText.ForeColorSetting);
                SolidBrush brush4 = new SolidBrush(this.opColorGraphing.ccEncBarYLines.ForeColorSetting);
                Pen pen = new Pen(this.opColorGraphing.ccEncBarOutlining.ForeColorSetting);
                new Pen(this.opColorGraphing.ccEncBarYLines.ForeColorSetting);
                SolidBrush[] brushArray = new SolidBrush[] { 
                    new SolidBrush(this.opColorGraphing.ccGraphFill1.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill2.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill3.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill4.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill5.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill6.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill7.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill8.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill9.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill10.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill11.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill12.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill13.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill14.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill15.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill16.ForeColorSetting), 
                    new SolidBrush(this.opColorGraphing.ccGraphFill17.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill18.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill19.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill20.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill21.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill22.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill23.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill24.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill25.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill26.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill27.ForeColorSetting), new SolidBrush(this.opColorGraphing.ccGraphFill28.ForeColorSetting)
                 };
                Pen[] penArray = new Pen[] { 
                    new Pen(this.opColorGraphing.ccGraphFill1.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill2.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill3.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill4.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill5.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill6.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill7.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill8.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill9.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill10.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill11.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill12.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill13.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill14.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill15.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill16.ForeColorSetting, 2f), 
                    new Pen(this.opColorGraphing.ccGraphFill17.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill18.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill19.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill20.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill21.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill22.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill23.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill24.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill25.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill26.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill27.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill28.ForeColorSetting, 2f)
                 };
                Font font = new Font("Arial", 8f);
                Graphics graphics = Graphics.FromImage(image);
                graphics.SmoothingMode = SmoothingMode.AntiAlias;
                graphics.Clear(brush2.Color);
                Rectangle rect = new Rectangle(4, 4, image.Height - 8, image.Height - 8);
                graphics.DrawRectangle(pen, rect);
                float startAngle = -90f;
                int num4 = rect.Right + 0x20;
                int top = rect.Top;
                for (int i = 0; i < list2.Count; i++)
                {
                    StrFloat num7 = list2[i];
                    float sweepAngle = num7.Val * 360f;
                    if (i < (penArray.Length - 1))
                    {
                        graphics.FillPie(brushArray[i], (float) (rect.X + 4), (float) (rect.Y + 4), (float) (rect.Width - 8), (float) (rect.Height - 8), startAngle, sweepAngle);
                        graphics.FillRectangle(brushArray[i], num4 - 0x1c, top, 160, 14);
                        graphics.DrawRectangle(pen, num4 - 0x1c, top, 160, 14);
                    }
                    else
                    {
                        graphics.FillPie(brush4, (float) (rect.X + 4), (float) (rect.Y + 4), (float) (rect.Width - 8), (float) (rect.Height - 8), startAngle, sweepAngle);
                        graphics.DrawString(num7.Name, font, brush3, (float) num4, (float) top);
                    }
                    try
                    {
                        int num9 = System.Convert.ToInt32((float) (num7.Val * 100f));
                        graphics.DrawString(num9 + "%", font, brush, (float) (num4 - 0x19), (float) top);
                        graphics.DrawString(num9 + "%", font, brush, (float) (num4 - 0x1b), (float) top);
                        graphics.DrawString(num9 + "%", font, brush, (float) (num4 - 0x1a), (float) (top - 1));
                        graphics.DrawString(num9 + "%", font, brush, (float) (num4 - 0x1a), (float) (top + 1));
                        graphics.DrawString(num9 + "%", font, brush2, (float) (num4 - 0x1a), (float) top);
                    }
                    catch
                    {
                    }
                    graphics.DrawString(num7.Name, font, brush, (float) (num4 + 1), (float) top);
                    graphics.DrawString(num7.Name, font, brush, (float) (num4 - 1), (float) top);
                    graphics.DrawString(num7.Name, font, brush, (float) num4, (float) (top - 1));
                    graphics.DrawString(num7.Name, font, brush, (float) num4, (float) (top + 1));
                    graphics.DrawString(num7.Name, font, brush2, (float) num4, (float) top);
                    startAngle += sweepAngle;
                    top += 14;
                    if (top > (rect.Bottom - 12))
                    {
                        top = rect.Top;
                        num4 += 160;
                    }
                }
                graphics.DrawEllipse(pen, (int) (rect.X + 4), (int) (rect.Y + 4), (int) (rect.Width - 8), (int) (rect.Height - 8));
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
            return image;
        }

        internal Bitmap GenEncounterGraph(EncounterData EncounterSource, int SizeX, int SizeY, string Sorting)
        {
            Bitmap image = new Bitmap(SizeX, SizeY);
            if (EncounterSource != null)
            {
                List<CombatantData> list = new List<CombatantData>(EncounterSource.Items.Values);
                try
                {
                    try
                    {
                        list.Sort(CombatantData.ColumnDefs[Sorting].SortComparer);
                    }
                    catch (Exception exception)
                    {
                        this.WriteExceptionLog(exception, "Failed Sorting");
                    }
                    list.Reverse();
                    List<CombatantData> allies = new List<CombatantData>();
                    if (this.opGraphing.cbOnlyGraphAllies.Checked)
                    {
                        if (EncounterSource.GetIsSelective() && EncounterSource.GetIgnoreEnemies())
                        {
                            allies = list;
                        }
                        else
                        {
                            allies = EncounterSource.GetAllies();
                        }
                    }
                    SolidBrush brush = new SolidBrush(System.Drawing.Color.FromArgb(100, this.opColorGraphing.ccEncBarAvgText.ForeColorSetting));
                    SolidBrush brush2 = new SolidBrush(this.opColorGraphing.ccEncBarBackFill.ForeColorSetting);
                    SolidBrush brush3 = new SolidBrush(this.opColorGraphing.ccEncBarLegendText.ForeColorSetting);
                    Pen pen = new Pen(this.opColorGraphing.ccEncBarOutlining.ForeColorSetting);
                    Pen pen2 = new Pen(this.opColorGraphing.ccEncBarYLines.ForeColorSetting);
                    SolidBrush brush4 = new SolidBrush(this.opColorGraphing.ccEncBarColor1.ForeColorSetting);
                    SolidBrush brush5 = new SolidBrush(this.opColorGraphing.ccEncBarColor2.ForeColorSetting);
                    SolidBrush brush6 = new SolidBrush(this.opColorGraphing.ccEncBarColor3.ForeColorSetting);
                    SolidBrush brush7 = new SolidBrush(this.opColorGraphing.ccEncBarText.ForeColorSetting);
                    Graphics graphics = Graphics.FromImage(image);
                    graphics.SmoothingMode = SmoothingMode.AntiAlias;
                    graphics.Clear(brush2.Color);
                    double num = 0.0;
                    List<StrFloat> list3 = new List<StrFloat>();
                    foreach (CombatantData data in list)
                    {
                        if (((!this.opGraphing.cbOnlyGraphAllies.Checked || (allies.Count <= 0)) || (allies.IndexOf(data) != -1)) && (!this.opSelectiveParsing.rbSParseExport.Checked || this.SelectiveListGetSelected(data.Name)))
                        {
                            try
                            {
                                float val = float.Parse(CombatantData.ColumnDefs[Sorting].GetSqlData(data), this.usCulture);
                                if (val > 0f)
                                {
                                    list3.Add(new StrFloat(data.Name, val));
                                    num += val;
                                }
                                continue;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                    }
                    int num3 = 0x10;
                    Rectangle rect = new Rectangle(4, 4, (image.Width - 1) - (num3 * 4), (image.Height - 1) - num3);
                    graphics.DrawRectangle(pen, rect);
                    this.ttg.Items.Clear();
                    if (list3.Count == 0)
                    {
                        try
                        {
                            Font font = new Font("Arial Black", 12f);
                            graphics = Graphics.FromImage(image);
                            graphics.SmoothingMode = SmoothingMode.AntiAlias;
                            graphics.Clear(this.opColorGraphing.ccEncBarBackFill.ForeColorSetting);
                            graphics.DrawString("No combatants with compatible data to graph...", font, brush3, (float) 16f, (float) 16f);
                        }
                        catch
                        {
                        }
                        return image;
                    }
                    float num4 = rect.Width / list3.Count;
                    float bottom = rect.Bottom;
                    float left = rect.Left;
                    double num7 = 1.0;
                    foreach (StrFloat num8 in list3)
                    {
                        if (num8.Val > num7)
                        {
                            num7 = (int) num8.Val;
                        }
                    }
                    num7 *= 1.1;
                    float num9 = ((float) rect.Height) / ((float) num7);
                    float single1 = 1f / num9;
                    Font font2 = new Font("Arial", 8f);
                    Font font3 = new Font("Courier New", 8f);
                    graphics.DrawString("0", font2, brush3, (float) (rect.Right + 5), (float) rect.Bottom);
                    graphics.DrawString(((int) num7).ToString(), font2, brush3, (float) (rect.Right + 5), (float) rect.Top);
                    try
                    {
                        int num10 = System.Convert.ToInt32((float) (bottom - System.Convert.ToInt32((double) ((num7 / 4.0) * num9))));
                        graphics.DrawLine(pen2, rect.Left, num10, rect.Right, num10);
                        graphics.DrawString(((int) (num7 / 4.0)).ToString(), font2, brush3, (float) (rect.Right + 5), (float) num10);
                        num10 = System.Convert.ToInt32((float) (bottom - System.Convert.ToInt32((double) (((num7 / 4.0) * 2.0) * num9))));
                        graphics.DrawLine(pen2, rect.Left, num10, rect.Right, num10);
                        graphics.DrawString(((int) ((num7 / 4.0) * 2.0)).ToString(), font2, brush3, (float) (rect.Right + 5), (float) num10);
                        num10 = System.Convert.ToInt32((float) (bottom - System.Convert.ToInt32((double) (((num7 / 4.0) * 3.0) * num9))));
                        graphics.DrawLine(pen2, rect.Left, num10, rect.Right, num10);
                        graphics.DrawString(((int) ((num7 / 4.0) * 3.0)).ToString(), font2, brush3, (float) (rect.Right + 5), (float) num10);
                    }
                    catch
                    {
                    }
                    for (int i = 0; i < list3.Count; i++)
                    {
                        SolidBrush brush8;
                        StrFloat num12 = list3[i];
                        float x = left;
                        float y = bottom - (num12.Val * num9);
                        float width = num4;
                        float height = num12.Val * num9;
                        RectangleF ef = new RectangleF(x, y, width, height);
                        this.ttg.Items.Add(new ToolTipRect(-1, string.Format("{0}: {1}", num12.Name, num12.Val), ef.X, (float) rect.Y, ef.Width, (float) rect.Height));
                        string s = ((int) num12.Val).ToString();
                        if ((i % 2) == 0)
                        {
                            if (num12.Name == ActGlobals.charName)
                            {
                                graphics.FillRectangle(brush6, ef);
                            }
                            else
                            {
                                graphics.FillRectangle(brush4, ef);
                            }
                            if (num4 > 15f)
                            {
                                graphics.DrawString(s, font2, brush4, x, (bottom - (num12.Val * num9)) - 14f);
                            }
                            brush8 = brush4;
                        }
                        else
                        {
                            if (num12.Name == ActGlobals.charName)
                            {
                                graphics.FillRectangle(brush6, ef);
                            }
                            else
                            {
                                graphics.FillRectangle(brush5, ef);
                            }
                            if (num4 > 15f)
                            {
                                graphics.DrawString(((int) num12.Val).ToString(), font2, brush5, x, bottom);
                            }
                            graphics.DrawLine(pen, left, (float) rect.Bottom, left, (float) (rect.Bottom + 4));
                            brush8 = brush5;
                        }
                        try
                        {
                            graphics.DrawRectangle(pen, ef.X, ef.Y, ef.Width, ef.Height);
                        }
                        catch
                        {
                        }
                        StringFormat format = new StringFormat {
                            FormatFlags = StringFormatFlags.DirectionVertical
                        };
                        if (graphics.MeasureString(num12.Name, font3, 15, format).Height < ((num12.Val * num9) - 16f))
                        {
                            graphics.DrawString(num12.Name, font3, brush7, (left - 8f) + (num4 / 2f), (bottom - (num12.Val * num9)) + 12f, format);
                        }
                        else
                        {
                            graphics.DrawString(num12.Name, font3, brush8, (left - 8f) + (num4 / 2f), (float) rect.Top, format);
                        }
                        left += num4;
                    }
                    if (this.opGraphing.cbSimpleGraphTotals.Checked)
                    {
                        string text = string.Format("Total: {0:0,0}\nAVG: {1:0,0.00}", num, num / ((double) list3.Count));
                        Font font4 = new Font("Arial Black", (float) (rect.Height / 10));
                        SizeF ef3 = graphics.MeasureString(text, font4);
                        PointF point = new PointF((rect.Right - ef3.Width) - 1f, ((rect.Y + (rect.Height / 2)) - (ef3.Height / 2f)) + 1f);
                        graphics.DrawString(text, font4, brush, point);
                    }
                }
                catch (Exception exception2)
                {
                    this.WriteExceptionLog(exception2, string.Empty);
                }
            }
            return image;
        }

        internal Bitmap GenEncounterGraphAdv(EncounterData EncounterSource, int SizeX, int SizeY, string Sorting)
        {
            Bitmap image = new Bitmap(SizeX, SizeY);
            try
            {
                int[,] numArray;
                int num = (int) this.opGraphing.nudGraphAvg.Value;
                string str = string.Empty;
                bool flag = this.opGraphing.cbGraphRollingAvg.Checked;
                List<CombatantData> list = new List<CombatantData>();
                foreach (KeyValuePair<string, CombatantData> pair in EncounterSource.Items)
                {
                    if (!this.opSelectiveParsing.rbSParseExport.Checked || this.SelectiveListGetSelected(pair.Value.Name))
                    {
                        list.Add(pair.Value);
                    }
                }
                int count = list.Count;
                int totalSeconds = (int) EncounterSource.Duration.TotalSeconds;
                string[] strArray = new string[count];
                if (flag)
                {
                    numArray = new int[count, totalSeconds + 1];
                }
                else
                {
                    numArray = new int[count, (totalSeconds / num) + 2];
                }
                for (int i = 0; i < count; i++)
                {
                    strArray[i] = list[i].Name;
                    AttackType attackType = list[i].GetAttackType(ActGlobals.ActLocalization.LocalizationStrings["attackTypeTerm-all"].DisplayedText, CombatantData.DamageTypeDataOutgoingDamage);
                    if (attackType != null)
                    {
                        List<MasterSwing> list2 = new List<MasterSwing>(attackType.Items);
                        for (int n = 0; n < list2.Count; n++)
                        {
                            MasterSwing swing = list2[n];
                            if (swing.Damage > 0)
                            {
                                TimeSpan span = (TimeSpan) (swing.Time - EncounterSource.StartTime);
                                int num6 = (int) span.TotalSeconds;
                                if (flag)
                                {
                                    for (int num7 = num6; ((num6 >= 0) && (num7 < (num6 + num))) && (num7 < totalSeconds); num7++)
                                    {
                                        int num1 = numArray[i, num7];
                                        num1[0] += swing.Damage;
                                    }
                                }
                                else
                                {
                                    int num27 = numArray[i, (num6 / num) + 1];
                                    num27[0] += swing.Damage;
                                }
                            }
                        }
                    }
                }
                SolidBrush brush = new SolidBrush(this.opColorGraphing.ccEncBarBackFill.ForeColorSetting);
                SolidBrush brush2 = new SolidBrush(this.opColorGraphing.ccEncBarLegendText.ForeColorSetting);
                SolidBrush brush3 = new SolidBrush(this.opColorGraphing.ccEncBarYLines.ForeColorSetting);
                Pen pen = new Pen(this.opColorGraphing.ccEncBarOutlining.ForeColorSetting);
                Pen pen2 = new Pen(this.opColorGraphing.ccEncBarYLines.ForeColorSetting);
                Pen pen3 = new Pen(System.Drawing.Color.Black);
                Font font = new Font("Arial", 8f);
                Pen[] penArray = new Pen[] { 
                    new Pen(this.opColorGraphing.ccGraphFill1.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill2.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill3.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill4.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill5.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill6.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill7.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill8.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill9.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill10.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill11.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill12.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill13.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill14.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill15.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill16.ForeColorSetting, 2f), 
                    new Pen(this.opColorGraphing.ccGraphFill17.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill18.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill19.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill20.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill21.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill22.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill23.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill24.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill25.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill26.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill27.ForeColorSetting, 2f), new Pen(this.opColorGraphing.ccGraphFill28.ForeColorSetting, 2f)
                 };
                Graphics graphics = Graphics.FromImage(image);
                graphics.SmoothingMode = SmoothingMode.AntiAlias;
                graphics.Clear(brush.Color);
                int num8 = 0x10;
                Rectangle rect = new Rectangle(4, 4, (image.Width - 1) - (num8 * 8), (image.Height - 1) - (num8 * 2));
                graphics.DrawRectangle(pen, rect);
                int num9 = 0;
                int length = strArray.Length;
                int num11 = (int) EncounterSource.Duration.TotalSeconds;
                if (!flag)
                {
                    num11 /= num;
                }
                for (int j = 0; j < length; j++)
                {
                    for (int num13 = 0; num13 < num11; num13++)
                    {
                        if ((numArray[j, num13] / num) > num9)
                        {
                            num9 = numArray[j, num13] / num;
                        }
                    }
                }
                int num14 = num9.ToString().ToCharArray().Length;
                int num15 = (int) Math.Pow(10.0, (double) num14);
                while ((num15 / 2) > num9)
                {
                    num15 /= 2;
                }
                if ((((float) num15) / 1.25f) > num9)
                {
                    num15 = System.Convert.ToInt32((float) (((float) num15) / 1.25f));
                }
                float num16 = ((float) rect.Height) / ((float) num15);
                float single1 = 1f / num16;
                float w = ((float) rect.Width) / ((float) num11);
                this.ttg.Items.Clear();
                for (int k = 0; k < length; k++)
                {
                    str = strArray[k];
                    PointF[] points = new PointF[num11];
                    for (int num19 = 0; num19 < num11; num19++)
                    {
                        points[num19] = new PointF(rect.Left + (w * num19), rect.Bottom - (num16 * (numArray[k, num19] / num)));
                        this.ttg.Items.Add(new ToolTipRect(-1, string.Format("{0} {1}", str, numArray[k, num19] / num), rect.Left + (w * num19), (float) rect.Top, w, (float) rect.Bottom));
                    }
                    if (k < penArray.Length)
                    {
                        graphics.DrawLines(penArray[k], points);
                    }
                    else
                    {
                        graphics.DrawLines(pen3, points);
                    }
                    if (k < penArray.Length)
                    {
                        graphics.DrawLine(penArray[k], (int) (rect.Right + 4), (int) ((rect.Top + 0x20) + (0x10 * k)), (int) (rect.Right + 12), (int) ((rect.Top + 0x20) + (0x10 * k)));
                    }
                    else
                    {
                        graphics.DrawLine(pen3, (int) (rect.Right + 4), (int) ((rect.Top + 0x20) + (0x10 * k)), (int) (rect.Right + 12), (int) ((rect.Top + 0x20) + (0x10 * k)));
                    }
                    graphics.DrawString(str, font, brush2, (float) (rect.Right + 0x10), (float) (((rect.Top + 0x20) + (0x10 * k)) - 6));
                }
                bool flag2 = false;
                float num20 = 500f;
                for (int m = 0; m < num11; m++)
                {
                    string str2;
                    if (flag)
                    {
                        str2 = m.ToString();
                    }
                    else
                    {
                        str2 = (m * num).ToString();
                    }
                    this.ttg.Items.Insert(0, new ToolTipRect(-1, string.Format("+{0} ({1} sec average)", str2, num), rect.Left + (w * m), (float) rect.Top, w, (float) rect.Bottom));
                    num20 += w;
                    if ((((m % num) == 0) || !flag) && (num20 > 15f))
                    {
                        if (flag2)
                        {
                            graphics.DrawString(str2, font, brush2, rect.Left + (w * m), (float) (rect.Bottom + 2));
                        }
                        else
                        {
                            graphics.DrawString(str2, font, brush2, rect.Left + (w * m), (float) (rect.Bottom + 12));
                        }
                        flag2 = !flag2;
                        num20 = 0f;
                    }
                }
                try
                {
                    int num22 = rect.Bottom - System.Convert.ToInt32((float) ((num15 / 4) * num16));
                    graphics.DrawLine(pen2, rect.Left, num22, rect.Right, num22);
                    graphics.DrawString((num15 / 4).ToString(), font, brush3, (float) rect.Left, (float) num22);
                    num22 = rect.Bottom - System.Convert.ToInt32((float) (((num15 / 4) * 2) * num16));
                    graphics.DrawLine(pen2, rect.Left, num22, rect.Right, num22);
                    graphics.DrawString(((num15 / 4) * 2).ToString(), font, brush3, (float) rect.Left, (float) num22);
                    num22 = rect.Bottom - System.Convert.ToInt32((float) (((num15 / 4) * 3) * num16));
                    graphics.DrawLine(pen2, rect.Left, num22, rect.Right, num22);
                    graphics.DrawString(((num15 / 4) * 3).ToString(), font, brush3, (float) rect.Left, (float) num22);
                }
                catch
                {
                }
                graphics.DrawString("0 DPS", font, brush2, (float) (rect.Right + 5), (float) rect.Bottom);
                graphics.DrawString(num15 + " DPS", font, brush2, (float) (rect.Right + 5), (float) rect.Top);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
            return image;
        }

        private void GenerateCurrentGraph()
        {
            try
            {
                this.curHtmFs.Seek(0, SeekOrigin.Begin);
                this.curHtmFs.SetLength(0);
                if (this.opFileHTML.cbCurrentGraph.Checked)
                {
                    FileStream stream = new FileStream(this.htmlDir.FullName + @"\current.png", FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                    stream.Seek(0, SeekOrigin.Begin);
                    stream.SetLength(0);
                    this.GenerateEncounterGraph(this.ActiveZone.ActiveEncounter, (int) this.opFileHTML.nudGraphX.Value, (int) this.opFileHTML.nudGraphY.Value, ActGlobals.eDSort).Save(stream, ImageFormat.Png);
                    stream.Close();
                }
                StreamWriter writer = new StreamWriter(this.curHtmFs);
                writer.WriteLine("<html><head><META http-equiv='Content-Type' content='text/html; charset=utf-8'><META HTTP-EQUIV=\"REFRESH\" CONTENT=\"" + System.Convert.ToInt32(this.opFileHTML.nudCGraphDelay.Value) + "\"></head>");
                writer.WriteLine("<BODY BGCOLOR='#000000' TEXT='#FFFFFF' ALINK='#9999FF' LINK='#9999FF' VLINK='#990099'>");
                if (this.opFileHTML.cbCurrentGraph.Checked)
                {
                    writer.WriteLine("<center><img src=\"current.png\"></center>");
                }
                if (this.opFileHTML.cbCurrentTable.Checked)
                {
                    StringBuilder builder = new StringBuilder();
                    builder.Append("<table cellspacing='0' cellpadding='0' border='1' width='100%'>");
                    builder.Append(this.ExportTBodyHTML(this.ActiveZone.ActiveEncounter.Items.Values));
                    builder.Append("</table>");
                    writer.WriteLine(builder.ToString());
                }
                writer.WriteLine("<h4><a href=\"index.html\">Return to Index</a></h4>");
                writer.WriteLine("</BODY></HTML>");
                writer.Flush();
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void GenerateCurrentOdbc()
        {
            try
            {
                EncounterData activeEncounter = this.ActiveZone.ActiveEncounter;
                OdbcConnection selectConnection = new OdbcConnection(this.opOdbc.tbOdbcConnectionString.Text);
                if (selectConnection.State == ConnectionState.Closed)
                {
                    selectConnection.Open();
                }
                OdbcCommand command = selectConnection.CreateCommand();
                List<string> list = new List<string>();
                List<string> tableVals = new List<string>();
                command.CommandText = "DELETE FROM current_table;";
                this.lastSql = command.CommandText;
                command.ExecuteNonQuery();
                OdbcDataAdapter adapter = new OdbcDataAdapter("SELECT * FROM current_table LIMIT 1;", selectConnection);
                DataSet dataSet = new DataSet();
                adapter.Fill(dataSet);
                Dictionary<string, CombatantData.ColumnDef> values = new Dictionary<string, CombatantData.ColumnDef>();
                foreach (DataColumn column in dataSet.Tables[0].Columns)
                {
                    foreach (KeyValuePair<string, CombatantData.ColumnDef> pair in CombatantData.ColumnDefs)
                    {
                        if (column.ColumnName.Equals(pair.Value.SqlDataName, StringComparison.CurrentCultureIgnoreCase))
                        {
                            values.Add(pair.Key, pair.Value);
                        }
                    }
                }
                string str = string.Join<KeyValuePair<string, CombatantData.ColumnDef>>(",", values);
                for (int i = 0; i < activeEncounter.Items.Values.Count; i++)
                {
                    CombatantData data = activeEncounter.Items.Values[i];
                    StringBuilder builder = new StringBuilder();
                    int num2 = 0;
                    foreach (KeyValuePair<string, CombatantData.ColumnDef> pair2 in values)
                    {
                        string input = pair2.Value.SqlDataName.Equals("encid", StringComparison.CurrentCultureIgnoreCase) ? string.Empty : pair2.Value.GetSqlData(data);
                        if (num2 == 0)
                        {
                            builder.AppendFormat("'{0}'", this.SqlSafe(input));
                        }
                        else
                        {
                            builder.AppendFormat(", '{0}'", this.SqlSafe(input));
                        }
                    }
                    if (this.opOdbc.cbSqlSafeMode.Checked)
                    {
                        list.Add(string.Format("INSERT INTO current_table ({0}) VALUES ({1});", str, builder.ToString()));
                    }
                    else
                    {
                        tableVals.Add(builder.ToString());
                    }
                }
                if (!this.opOdbc.cbSqlSafeMode.Checked)
                {
                    list.AddRange(this.BatchSqlCommands("current_table", str, tableVals, 100));
                }
                for (int j = 0; j < list.Count; j++)
                {
                    command.CommandText = this.AccessSafe(selectConnection.ConnectionString, list[j]);
                    this.lastSql = command.CommandText;
                    command.ExecuteNonQuery();
                }
            }
            catch (OdbcException exception)
            {
                ThreadInvokes.RichTextBoxAppendDateTimeLine(this, this.opOdbc.rtbOdbc, exception.Message);
                this.WriteExceptionLog(exception, this.lastSql);
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, string.Empty);
            }
        }

        private void GenerateCurrentTimers()
        {
            try
            {
                FileStream stream = new FileStream(this.htmlDir.FullName + @"\timers.png", FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                stream.Seek(0, SeekOrigin.Begin);
                stream.SetLength(0);
                try
                {
                    ActGlobals.oFormSpellTimersPanel.pb1.Image.Save(stream, ImageFormat.Png);
                }
                catch (NullReferenceException)
                {
                    stream.Close();
                    ActGlobals.oFormSpellTimers.ReinitDisplayPanel();
                    return;
                }
                stream.Close();
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        internal void GenerateFormatPreviewEnc()
        {
            try
            {
                BinaryReader reader = new BinaryReader(Assembly.GetExecutingAssembly().GetManifestResourceStream(base.GetType(), "FormatExample.act"));
                MemoryStream baseInputStream = new MemoryStream(reader.ReadBytes((int) reader.BaseStream.Length));
                Stream xmlStream = new InflaterInputStream(baseInputStream);
                List<EncounterData> list = this.XmlToEncounters(xmlStream);
                this.formatPreviewEnc = list[0];
            }
            catch
            {
            }
        }

        private string GetAssemblyInfo(string FileName)
        {
            FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(FileName);
            StringBuilder builder = new StringBuilder();
            if (!string.IsNullOrEmpty(versionInfo.FileName))
            {
                builder.Append("FileName: " + FileName + "\n");
            }
            if (!string.IsNullOrEmpty(versionInfo.OriginalFilename))
            {
                builder.Append("OriginalFilename: " + versionInfo.OriginalFilename + "\n");
            }
            if (!string.IsNullOrEmpty(versionInfo.FileVersion))
            {
                builder.Append("FileVersion: " + versionInfo.FileVersion + "\n");
            }
            if (!string.IsNullOrEmpty(versionInfo.ProductVersion))
            {
                builder.Append("ProductVersion: " + versionInfo.ProductVersion + "\n");
            }
            if (!string.IsNullOrEmpty(versionInfo.FileDescription))
            {
                builder.Append("FileDescription: " + versionInfo.FileDescription + "\n");
            }
            if (!string.IsNullOrEmpty(versionInfo.ProductName))
            {
                builder.Append("ProductName: " + versionInfo.ProductName + "\n");
            }
            if (!string.IsNullOrEmpty(versionInfo.CompanyName))
            {
                builder.Append("CompanyName: " + versionInfo.CompanyName + "\n");
            }
            if (!string.IsNullOrEmpty(versionInfo.LegalCopyright))
            {
                builder.Append("LegalCopyright: " + versionInfo.LegalCopyright + "\n");
            }
            if (!string.IsNullOrEmpty(versionInfo.LegalTrademarks))
            {
                builder.Append("LegalTrademarks: " + versionInfo.LegalTrademarks + "\n");
            }
            if (!string.IsNullOrEmpty(versionInfo.Comments))
            {
                builder.Append("Comments: " + versionInfo.Comments + "\n");
            }
            return builder.ToString();
        }

        private string GetAssemblyInfoFromSource(string filePath)
        {
            Regex regex = new Regex("\\[assembly: Assembly(\\w+)\\(\"(.+)\"\\)\\]");
            FileStream stream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read);
            StreamReader reader = new StreamReader(stream);
            string str = string.Empty;
            int num = 0;
            do
            {
                string input = reader.ReadLine();
                if (input == null)
                {
                    num++;
                }
                else
                {
                    num = 0;
                    if (regex.IsMatch(input))
                    {
                        str = str + string.Format("{0}: {1}\n", regex.Replace(input, "$1"), regex.Replace(input, "$2"));
                    }
                }
            }
            while (num < 100);
            reader.Close();
            stream.Close();
            return str;
        }

        public List<string> GetAttackTypeColumns(bool RestrictToVisible)
        {
            List<string> list = new List<string>();
            for (int i = 0; i < this.opTableAttackType.clbAT.Items.Count; i++)
            {
                if (!RestrictToVisible || this.opTableAttackType.clbAT.GetItemChecked(i))
                {
                    list.Add((string) this.opTableAttackType.clbAT.Items[i]);
                }
            }
            return list;
        }

        private string GetAttackTypeSwingType(AttackType Data)
        {
            int num = 100;
            List<int> list = new List<int>();
            List<MasterSwing> list2 = new List<MasterSwing>(Data.Items);
            for (int i = 0; i < list2.Count; i++)
            {
                MasterSwing swing = list2[i];
                if (!list.Contains(swing.SwingType))
                {
                    list.Add(swing.SwingType);
                }
            }
            if (list.Count == 1)
            {
                num = list[0];
            }
            return num.ToString();
        }

        public bool GetAutomaticUpdatesAllowed()
        {
            return this.cbAutoCheck.Checked;
        }

        internal bool GetBeforeLogLineEventUsed()
        {
            return (this.BeforeLogLineRead != null);
        }

        private string GetCellDataSpecial(MasterSwing Data)
        {
            return Data.Special;
        }

        public List<string> GetCombatantDataColumns(bool RestrictToVisible)
        {
            List<string> list = new List<string>();
            for (int i = 0; i < this.opTableCombatant.clbCD.Items.Count; i++)
            {
                if (!RestrictToVisible || this.opTableCombatant.clbCD.GetItemChecked(i))
                {
                    list.Add((string) this.opTableCombatant.clbCD.Items[i]);
                }
            }
            return list;
        }

        public List<string> GetDamageTypeDataColumns(bool RestrictToVisible)
        {
            List<string> list = new List<string>();
            for (int i = 0; i < this.opTableDamageType.clbDT.Items.Count; i++)
            {
                if (!RestrictToVisible || this.opTableDamageType.clbDT.GetItemChecked(i))
                {
                    list.Add((string) this.opTableDamageType.clbDT.Items[i]);
                }
            }
            return list;
        }

        private string GetDamageTypeGrouping(DamageTypeData Data)
        {
            string str = string.Empty;
            int num = 0;
            if (Data.Outgoing)
            {
                str = str + "attacker=" + Data.Parent.Name;
                foreach (KeyValuePair<int, List<string>> pair in CombatantData.SwingTypeToDamageTypeDataLinksOutgoing)
                {
                    foreach (string str2 in pair.Value)
                    {
                        if (Data.Type == str2)
                        {
                            str = str + string.Format("&swingtype{0}={1}", (num++ == 0) ? string.Empty : num.ToString(), pair.Key);
                        }
                    }
                }
                return str;
            }
            str = str + "victim=" + Data.Parent.Name;
            foreach (KeyValuePair<int, List<string>> pair2 in CombatantData.SwingTypeToDamageTypeDataLinksIncoming)
            {
                foreach (string str3 in pair2.Value)
                {
                    if (Data.Type == str3)
                    {
                        str = str + string.Format("&swingtype{0}={1}", (num++ == 0) ? string.Empty : num.ToString(), pair2.Key);
                    }
                }
            }
            return str;
        }

        public List<string> GetEncounterDataColumns(bool RestrictToVisible)
        {
            List<string> list = new List<string>();
            for (int i = 0; i < this.opTableEncounter.clbED.Items.Count; i++)
            {
                if (!RestrictToVisible || this.opTableEncounter.clbED.GetItemChecked(i))
                {
                    list.Add((string) this.opTableEncounter.clbED.Items[i]);
                }
            }
            return list;
        }

        private string GetFloatCommas()
        {
            if (!ActGlobals.mainTableShowCommas)
            {
                return "0.00";
            }
            return "#,0.00";
        }

        public System.Drawing.Color[] GetGraphFillColors()
        {
            return new System.Drawing.Color[] { 
                this.opColorGraphing.ccGraphFill1.ForeColorSetting, this.opColorGraphing.ccGraphFill2.ForeColorSetting, this.opColorGraphing.ccGraphFill3.ForeColorSetting, this.opColorGraphing.ccGraphFill4.ForeColorSetting, this.opColorGraphing.ccGraphFill5.ForeColorSetting, this.opColorGraphing.ccGraphFill6.ForeColorSetting, this.opColorGraphing.ccGraphFill7.ForeColorSetting, this.opColorGraphing.ccGraphFill8.ForeColorSetting, this.opColorGraphing.ccGraphFill9.ForeColorSetting, this.opColorGraphing.ccGraphFill10.ForeColorSetting, this.opColorGraphing.ccGraphFill11.ForeColorSetting, this.opColorGraphing.ccGraphFill12.ForeColorSetting, this.opColorGraphing.ccGraphFill13.ForeColorSetting, this.opColorGraphing.ccGraphFill14.ForeColorSetting, this.opColorGraphing.ccGraphFill15.ForeColorSetting, this.opColorGraphing.ccGraphFill16.ForeColorSetting, 
                this.opColorGraphing.ccGraphFill17.ForeColorSetting, this.opColorGraphing.ccGraphFill18.ForeColorSetting, this.opColorGraphing.ccGraphFill19.ForeColorSetting, this.opColorGraphing.ccGraphFill20.ForeColorSetting, this.opColorGraphing.ccGraphFill21.ForeColorSetting, this.opColorGraphing.ccGraphFill22.ForeColorSetting, this.opColorGraphing.ccGraphFill23.ForeColorSetting, this.opColorGraphing.ccGraphFill24.ForeColorSetting, this.opColorGraphing.ccGraphFill25.ForeColorSetting, this.opColorGraphing.ccGraphFill26.ForeColorSetting, this.opColorGraphing.ccGraphFill27.ForeColorSetting, this.opColorGraphing.ccGraphFill28.ForeColorSetting
             };
        }

        private string GetHelpText(string ControlName)
        {
            switch (ControlName)
            {
                case "nudExFileLines":
                case "nudExFilePreset":
                case "lblExFile1":
                case "lblExFile2":
                case "lblExFile3":
                case "btnExFileAddPreset":
                case "btnExFileRemovePreset":
                case "clbExFilePresets":
                    return this.Trans["helpPanel-cbExFile"].DisplayedText;

                case "lblLogPriority":
                case "ddlLogPriority":
                    return this.Trans["helpPanel-LogPriority"].DisplayedText;

                case "rbSampleFixed":
                case "rbSampleTimed":
                    return this.Trans["helpPanel-SampleType"].DisplayedText;

                case "cbCurrentGraph":
                case "cbCurrentTable":
                    return this.Trans["helpPanel-CurrentExports"].DisplayedText;

                case "nudGraphX":
                case "nudGraphY":
                case "lblGraphXY":
                    return this.Trans["helpPanel-GraphSize"].DisplayedText;

                case "rbExFTPActive":
                case "rbExFTPPassive":
                    return this.Trans["helpPanel-ExFTPPASV"].DisplayedText;

                case "tbClipFormat":
                case "tbMiniFormat":
                    return this.Trans["helpPanel-TextFormatPlayers"].DisplayedText;

                case "tbClipFormatAllies":
                case "tbMiniFormatAllies":
                    return this.Trans["helpPanel-TextFormatAllies"].DisplayedText;

                case "btnClipFormatAdd":
                case "btnMiniFormatAdd":
                    return this.Trans["helpPanel-TextFormatAddPreset"].DisplayedText;

                case "btnClipFormatRemove":
                case "btnMiniFormatRemove":
                    return this.Trans["helpPanel-TextFormatRemovePreset"].DisplayedText;

                case "ddlClipFormat":
                case "ddlMiniFormat":
                    return this.Trans["helpPanel-TextFormatPreset"].DisplayedText;

                case "ddlClipSort":
                case "ddlMiniSort":
                    return this.Trans["helpPanel-TextFormatSort"].DisplayedText;

                case "cbMiniAlliesOnly":
                case "cbExportAlliesOnly":
                    return this.Trans["helpPanel-TextFormatAlliesOnly"].DisplayedText;

                case "cbMiniAlliesStats":
                case "cbExportAlliesStats":
                    return this.Trans["helpPanel-TextFormatAlliesStats"].DisplayedText;

                case "rbGraphAdv":
                case "rbGraphSimple":
                    return this.Trans["helpPanel-GraphType"].DisplayedText;

                case "fccMainWindow":
                case "fccWindowColors":
                    return this.Trans["helpPanel-ColorRestart"].DisplayedText;
            }
            if (this.Trans.ContainsKey("helpPanel-" + ControlName))
            {
                return this.Trans["helpPanel-" + ControlName].DisplayedText;
            }
            return string.Empty;
        }

        private string GetIntCommas()
        {
            if (!ActGlobals.mainTableShowCommas)
            {
                return "0";
            }
            return "#,0";
        }

        public string GetPersonalTextExport(EncounterData Encounter, TextExportFormatOptions ExportFormatting)
        {
            try
            {
                List<CombatantData> list;
                string playerFormat = ExportFormatting.PlayerFormat;
                string alliesFormat = ExportFormatting.AlliesFormat;
                bool showOnlyAllies = ExportFormatting.ShowOnlyAllies;
                bool showAlliedInfo = ExportFormatting.ShowAlliedInfo;
                StringBuilder builder = new StringBuilder();
                try
                {
                    list = new List<CombatantData>(Encounter.Items.Values);
                }
                catch
                {
                    return string.Empty;
                }
                List<CombatantData> allies = null;
                List<CombatantData> selectiveAllies = new List<CombatantData>();
                if (showOnlyAllies || showAlliedInfo)
                {
                    if (Encounter.GetIsSelective() && Encounter.GetIgnoreEnemies())
                    {
                        allies = new List<CombatantData>(Encounter.Items.Values);
                    }
                    else
                    {
                        allies = Encounter.GetAllies();
                    }
                    foreach (CombatantData data in allies)
                    {
                        if ((!this.opSelectiveParsing.rbSParseExport.Checked || !this.opSelectiveParsing.cbSParseExportIgnoreOtherAllies.Checked) || this.SelectiveListGetSelected(data.Name))
                        {
                            selectiveAllies.Add(data);
                        }
                    }
                }
                if (showAlliedInfo && (selectiveAllies.Count > 0))
                {
                    foreach (Match match in this.regexFormatTag.Matches(alliesFormat))
                    {
                        string str3 = match.Groups["formatter"].Value;
                        string extraFormat = match.Groups["extra"].Value;
                        string str5 = match.Groups["text"].Value;
                        if (string.IsNullOrEmpty(str3))
                        {
                            builder.Append(str5);
                        }
                        else
                        {
                            if (EncounterData.ExportVariables.ContainsKey(match.Groups["formatter"].Value))
                            {
                                builder.Append(EncounterData.ExportVariables[str3].GetExportString(Encounter, selectiveAllies, extraFormat));
                                continue;
                            }
                            builder.Append(this.formatTagCap1 + match.Groups["formatter"].Value + this.formatTagCap2);
                        }
                    }
                }
                new List<List<string>>();
                for (int i = 0; i < list.Count; i++)
                {
                    CombatantData data2 = list[i];
                    if (data2.Name == ActGlobals.charName)
                    {
                        foreach (Match match2 in this.regexFormatTag.Matches(playerFormat))
                        {
                            string str6 = match2.Groups["formatter"].Value;
                            string str7 = match2.Groups["extra"].Value;
                            string str8 = match2.Groups["text"].Value;
                            if (string.IsNullOrEmpty(str6))
                            {
                                builder.Append(str8);
                            }
                            else
                            {
                                if (CombatantData.ExportVariables.ContainsKey(match2.Groups["formatter"].Value))
                                {
                                    builder.Append(CombatantData.ExportVariables[str6].GetExportString(data2, str7));
                                    continue;
                                }
                                builder.Append(this.formatTagCap1 + match2.Groups["formatter"].Value + this.formatTagCap2);
                            }
                        }
                    }
                }
                string[] strArray = builder.ToString().Split(new char[] { '\n' });
                builder.Length = 0;
                for (int j = 0; j < strArray.Length; j++)
                {
                    builder.AppendFormat("{0}\n", strArray[j]);
                }
                return builder.ToString();
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
            return string.Empty;
        }

        private string GetSqlDataSpecial(MasterSwing Data)
        {
            return Data.Special;
        }

        internal Dictionary<string, int> GetSubNodeCounts(XmlTextReader xReader, ref Dictionary<string, int> xmlNodeCounts)
        {
            XmlDocument document = new XmlDocument();
            string xml = xReader.ReadOuterXml();
            document.LoadXml(xml);
            foreach (XmlNode node in document.ChildNodes[0].ChildNodes)
            {
                try
                {
                    Dictionary<string, int> dictionary;
                    string str2;
                    if (!xmlNodeCounts.ContainsKey(node.Name))
                    {
                        xmlNodeCounts.Add(node.Name, 0);
                    }
                    (dictionary = xmlNodeCounts)[str2 = node.Name] = dictionary[str2] + 1;
                    continue;
                }
                catch
                {
                    continue;
                }
            }
            return xmlNodeCounts;
        }

        private void GetSubNodes(TreeNodeCollection NodeCollection, ref List<TreeNode> NodesSoFar)
        {
            foreach (TreeNode node in NodeCollection)
            {
                NodesSoFar.Add(node);
                if (node.Nodes.Count > 0)
                {
                    this.GetSubNodes(node.Nodes, ref NodesSoFar);
                }
            }
        }

        public string GetTextExport(EncounterData Encounter, TextExportFormatOptions ExportFormatting)
        {
            return this.GetTextExport(Encounter, ExportFormatting, null, 0);
        }

        private string GetTextExport(bool RtfFormat, EncounterData Encounter, TextExportFormatOptions ExportFormatting)
        {
            return this.GetTextExport(false, Encounter, ExportFormatting, null, 0);
        }

        public string GetTextExport(int ZoneListIndex, int EncounterListIndex, TextExportFormatOptions ExportFormatting)
        {
            return this.GetTextExport(this.zoneList[ZoneListIndex].Items[EncounterListIndex], ExportFormatting);
        }

        public string GetTextExport(int ZoneListIndex, int EncounterListIndex, int FormatIndex)
        {
            if (FormatIndex > -1)
            {
                TextExportFormatOptions exportFormatting = this.textExportFormats[FormatIndex];
                return this.GetTextExport(ZoneListIndex, EncounterListIndex, exportFormatting);
            }
            return this.GetTextExport(ZoneListIndex, EncounterListIndex, this.defaultTextFormat);
        }

        public string GetTextExport(EncounterData Encounter, TextExportFormatOptions ExportFormatting, Font TabulateFont, int MaxLines)
        {
            return this.GetTextExport(false, Encounter, ExportFormatting, TabulateFont, MaxLines);
        }

        private string GetTextExport(bool RtfFormat, EncounterData Encounter, TextExportFormatOptions ExportFormatting, Font TabulateFont, int MaxLines)
        {
            if (MaxLines < 1)
            {
                MaxLines = 0x100;
            }
            try
            {
                List<CombatantData> list;
                string playerFormat = ExportFormatting.PlayerFormat;
                string alliesFormat = ExportFormatting.AlliesFormat;
                string sorting = ExportFormatting.Sorting;
                bool showOnlyAllies = ExportFormatting.ShowOnlyAllies;
                bool showAlliedInfo = ExportFormatting.ShowAlliedInfo;
                StringBuilder builder = new StringBuilder();
                try
                {
                    list = new List<CombatantData>(Encounter.Items.Values);
                }
                catch
                {
                    return string.Empty;
                }
                try
                {
                    list.Sort(new CombatantData.DualComparison(sorting, sorting));
                    list.Reverse();
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, "Export Sorting");
                }
                List<CombatantData> allies = null;
                List<CombatantData> selectiveAllies = new List<CombatantData>();
                if (showOnlyAllies || showAlliedInfo)
                {
                    if (Encounter.GetIsSelective() && Encounter.GetIgnoreEnemies())
                    {
                        allies = new List<CombatantData>(Encounter.Items.Values);
                    }
                    else
                    {
                        allies = Encounter.GetAllies();
                    }
                    foreach (CombatantData data in allies)
                    {
                        if ((!this.opSelectiveParsing.rbSParseExport.Checked || !this.opSelectiveParsing.cbSParseExportIgnoreOtherAllies.Checked) || this.SelectiveListGetSelected(data.Name))
                        {
                            selectiveAllies.Add(data);
                        }
                    }
                }
                if (showAlliedInfo && (selectiveAllies.Count > 0))
                {
                    foreach (Match match in this.regexFormatTag.Matches(alliesFormat))
                    {
                        string str4 = match.Groups["formatter"].Value;
                        string extraFormat = match.Groups["extra"].Value;
                        string str6 = match.Groups["text"].Value;
                        if (string.IsNullOrEmpty(str4))
                        {
                            builder.Append(str6);
                        }
                        else
                        {
                            if (EncounterData.ExportVariables.ContainsKey(match.Groups["formatter"].Value))
                            {
                                builder.Append(EncounterData.ExportVariables[str4].GetExportString(Encounter, selectiveAllies, extraFormat));
                                continue;
                            }
                            builder.Append(this.formatTagCap1 + match.Groups["formatter"].Value + this.formatTagCap2);
                        }
                    }
                }
                List<List<string>> list4 = new List<List<string>>();
                for (int i = 0; i < list.Count; i++)
                {
                    CombatantData item = list[i];
                    if (((!this.opTextExports.cbExportFilterSpace.Checked || (item.Name.IndexOf(' ') <= -1)) && ((!showOnlyAllies || (allies.Count <= 0)) || (allies.IndexOf(item) != -1))) && ((item.Name != "Unknown") && (!this.opSelectiveParsing.rbSParseExport.Checked || this.SelectiveListGetSelected(item.Name))))
                    {
                        MatchCollection matchs2 = this.regexFormatTag.Matches(playerFormat);
                        if (TabulateFont != null)
                        {
                            List<string> list5 = new List<string>();
                            foreach (Match match2 in matchs2)
                            {
                                string str7 = match2.Groups["formatter"].Value;
                                string str8 = match2.Groups["extra"].Value;
                                string str9 = match2.Groups["text"].Value;
                                if (string.IsNullOrEmpty(str7))
                                {
                                    list5.Add(str9);
                                }
                                else
                                {
                                    if (CombatantData.ExportVariables.ContainsKey(match2.Groups["formatter"].Value))
                                    {
                                        list5.Add(CombatantData.ExportVariables[str7].GetExportString(item, str8));
                                        continue;
                                    }
                                    list5.Add(this.formatTagCap1 + match2.Groups["formatter"].Value + this.formatTagCap2);
                                }
                            }
                            list4.Add(list5);
                            continue;
                        }
                        foreach (Match match3 in matchs2)
                        {
                            string str10 = match3.Groups["formatter"].Value;
                            string str11 = match3.Groups["extra"].Value;
                            string str12 = match3.Groups["text"].Value;
                            if (string.IsNullOrEmpty(str10))
                            {
                                builder.Append(str12);
                            }
                            else
                            {
                                if (CombatantData.ExportVariables.ContainsKey(match3.Groups["formatter"].Value))
                                {
                                    builder.Append(CombatantData.ExportVariables[str10].GetExportString(item, str11));
                                    continue;
                                }
                                builder.Append(this.formatTagCap1 + match3.Groups["formatter"].Value + this.formatTagCap2);
                            }
                        }
                    }
                }
                if (TabulateFont != null)
                {
                    Graphics graphics = Graphics.FromImage(new Bitmap(1, 1));
                    float num2 = graphics.MeasureString("|  |", TabulateFont).Width - graphics.MeasureString("| |", TabulateFont).Width;
                    List<float> list6 = new List<float>();
                    for (int j = 0; (j < list4.Count) && (j < (MaxLines - 1)); j++)
                    {
                        for (int m = 0; m < list4[j].Count; m++)
                        {
                            float width = graphics.MeasureString(list4[j][m], TabulateFont).Width;
                            if (list6.Count == m)
                            {
                                list6.Add(width);
                            }
                            else if (list6[m] < width)
                            {
                                list6[m] = width;
                            }
                        }
                    }
                    for (int k = 0; (k < list4.Count) && (k < (MaxLines - 1)); k++)
                    {
                        for (int n = 0; n < list4[k].Count; n++)
                        {
                            builder.Append(list4[k][n]);
                            for (float num8 = graphics.MeasureString(list4[k][n], TabulateFont).Width; (num8 + 1f) < list6[n]; num8 += num2)
                            {
                                builder.Append(" ");
                            }
                        }
                    }
                }
                else
                {
                    string[] strArray = builder.ToString().Split(new char[] { '\n' });
                    builder.Length = 0;
                    for (int num9 = 0; (num9 < MaxLines) && (num9 < strArray.Length); num9++)
                    {
                        builder.AppendFormat("{0}\n", strArray[num9]);
                    }
                }
                return builder.ToString();
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, string.Empty);
            }
            return string.Empty;
        }

        public string GetTextExport(int ZoneListIndex, int EncounterListIndex, TextExportFormatOptions ExportFormatting, Font TabulateFont, int MaxLines)
        {
            return this.GetTextExport(this.zoneList[ZoneListIndex].Items[EncounterListIndex], ExportFormatting, TabulateFont, MaxLines);
        }

        public string GetTextExport(int ZoneListIndex, int EncounterListIndex, int FormatIndex, Font TabulateFont, int MaxLines)
        {
            if (FormatIndex > -1)
            {
                TextExportFormatOptions exportFormatting = this.textExportFormats[FormatIndex];
                return this.GetTextExport(ZoneListIndex, EncounterListIndex, exportFormatting, TabulateFont, MaxLines);
            }
            return this.GetTextExport(ZoneListIndex, EncounterListIndex, this.defaultTextFormat, TabulateFont, MaxLines);
        }

        internal void ImportACT()
        {
            this.actFileThreadAlive = true;
            try
            {
                DialogResult result;
                ThreadInvokes.CheckboxSetChecked(this, this.cbLockDG, true);
                OpenFileDialog dialog = new OpenFileDialog();
                if ((this.folderActfiles != null) && this.folderActfiles.Exists)
                {
                    dialog.InitialDirectory = this.folderActfiles.FullName;
                }
                dialog.Filter = "ACT Data File (*.act)|*.act";
                try
                {
                    result = dialog.ShowDialog();
                }
                catch (SecurityException exception)
                {
                    MessageBox.Show(this.Trans["messageBoxTitle-localSecurityPolicy"].DisplayedText + exception.Message, this.Trans["messageBoxTitle-localSecurityPolicy"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    this.WriteExceptionLog(exception, "SecurityException");
                    return;
                }
                if (result == DialogResult.OK)
                {
                    this.folderActfiles = new DirectoryInfo(Path.GetDirectoryName(dialog.FileName));
                    FileInfo info = new FileInfo(dialog.FileName);
                    if (info.Exists)
                    {
                        ThreadInvokes.ControlSetText(this, this.ioImportAct.lblActImportStatus, "Importing...");
                        FileStream baseInputStream = null;
                        try
                        {
                            baseInputStream = info.Open(FileMode.Open, FileAccess.Read, FileShare.Read);
                        }
                        catch (IOException exception2)
                        {
                            ThreadInvokes.ControlSetText(this, this.ioImportAct.lblActImportStatus, exception2.Message);
                            this.WriteExceptionLog(exception2, string.Empty);
                            return;
                        }
                        Stream xmlStream = new InflaterInputStream(baseInputStream);
                        try
                        {
                            List<EncounterData> collection = this.XmlToEncounters(xmlStream);
                            if (collection.Count == 1)
                            {
                                this.zoneList[0].Items.Add(collection[0]);
                            }
                            else
                            {
                                ZoneData item = new ZoneData(collection[0].StartTime, info.Name, false, false, false);
                                int count = this.zoneList.Count;
                                for (int i = 1; i < this.zoneList.Count; i++)
                                {
                                    if (this.zoneList[i].StartTime > collection[0].StartTime)
                                    {
                                        count = i;
                                        break;
                                    }
                                }
                                item.Items.AddRange(collection);
                                this.zoneList.Insert(count, item);
                            }
                            ThreadInvokes.ControlSetText(this, this.ioImportAct.lblActImportStatus, info.Name + " imported.");
                        }
                        catch (ThreadAbortException)
                        {
                            baseInputStream.Close();
                            xmlStream.Close();
                        }
                        catch (SharpZipBaseException exception3)
                        {
                            ThreadInvokes.ControlSetText(this, this.ioImportAct.lblActImportStatus, "Import File is Corrupt:\n" + exception3.Message);
                            this.WriteExceptionLog(exception3, "Import File is Corrupt");
                        }
                        catch (Exception exception4)
                        {
                            ThreadInvokes.ControlSetText(this, this.ioImportAct.lblActImportStatus, "Unknown error:\n" + exception4.Message);
                            this.WriteExceptionLog(exception4, "Unknown error");
                        }
                        baseInputStream.Close();
                        xmlStream.Close();
                    }
                }
                ThreadInvokes.TreeViewClear(this, this.tvDG);
                this.refreshTree = true;
                ThreadInvokes.CheckboxSetChecked(this, this.cbLockDG, false);
            }
            catch (Exception exception5)
            {
                this.WriteExceptionLog(exception5, string.Empty);
            }
            finally
            {
                this.actFileThreadAlive = false;
            }
        }

        internal void ImportClip()
        {
            this.importThreadAlive = true;
            ActGlobals.oFormImportProgress.ResetFileStats();
            ActGlobals.oFormImportProgress.waitCharName.WaitOne();
            if (!string.IsNullOrEmpty(ActGlobals.oFormImportProgress.charName))
            {
                ThreadInvokes.ControlSetText(this, this.opDataCorrectionMisc.tbCharName, ActGlobals.oFormImportProgress.charName);
            }
            else
            {
                ThreadInvokes.ControlSetText(this, this.opDataCorrectionMisc.tbCharName, ActGlobals.charName);
            }
            this.SetCharName(false);
            ActGlobals.oFormImportProgress.StartOperationStats();
            try
            {
                if (this.LogFileChanged != null)
                {
                    this.LogFileChanged(true, "Clipboard");
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "ImportClip->LogFileChanged event");
            }
            try
            {
                bool isChecked = this.cbLockDG.Checked;
                ThreadInvokes.CheckboxSetChecked(this, this.cbLockDG, true);
                Application.DoEvents();
                DateTime now = DateTime.Now;
                string s = string.Empty;
                if (Clipboard.ContainsText())
                {
                    s = Clipboard.GetText();
                }
                else
                {
                    MessageBox.Show(this.Trans["messageBox-clipboardNoText"].DisplayedText, this.Trans["messageBoxTitle-clipboardNoText"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    this.importThreadAlive = false;
                    return;
                }
                try
                {
                    this.readThreadLock = true;
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblLogFile, "Parsing Paused...");
                }
                catch
                {
                }
                ActGlobals.oFormImportProgress.progressBar1.Value = 0;
                ActGlobals.oFormImportProgress.SetProgress(-1);
                int length = s.Length;
                StringReader reader = new StringReader(s);
                string str2 = string.Empty;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                bool flag2 = false;
                this.ChangeZone("Import Zone");
                this.inCombat = false;
                ActGlobals.oFormImportProgress.ResumeStats();
                while (!flag2)
                {
                    try
                    {
                        str2 = reader.ReadLine();
                        if (!string.IsNullOrEmpty(str2))
                        {
                            ActGlobals.oFormImportProgress.AddLines(1);
                            ActGlobals.oFormImportProgress.AddChars(2);
                            ActGlobals.oFormImportProgress.AddChars((long) str2.Length);
                            this.GlobalTimeSorter++;
                            this.LastKnownTime = this.GetDateTimeFromLog(str2);
                            num2 = 0;
                            num3++;
                            num4 += str2.Length + 2;
                            if ((num3 % 0x3e8) == 0)
                            {
                                float num5 = (((float) num4) / ((float) length)) * 100f;
                                ActGlobals.oFormImportProgress.SetProgress((int) num5);
                            }
                            this.ParseRawLogLine(true, this.LastKnownTime, str2);
                        }
                        else
                        {
                            num2++;
                        }
                        if (num2 > 0x3e8)
                        {
                            break;
                        }
                        continue;
                    }
                    catch (ThreadAbortException)
                    {
                        flag2 = true;
                        continue;
                    }
                    catch (Exception exception2)
                    {
                        ActGlobals.oFormImportProgress.FreezeStats();
                        DialogResult result = MessageBox.Show(string.Format(this.Trans["messageBox-importParseError"].DisplayedText, str2, num4, exception2.Message), "Parsing Failed", MessageBoxButtons.YesNo, MessageBoxIcon.Hand);
                        this.WriteExceptionLog(exception2, num4 + "\n" + str2);
                        if (result == DialogResult.No)
                        {
                            flag2 = true;
                        }
                        ActGlobals.oFormImportProgress.ResumeStats();
                        continue;
                    }
                }
                ActGlobals.oFormImportProgress.FreezeStats();
                ActGlobals.oFormImportProgress.EndOperationStats();
                ThreadInvokes.CheckboxSetChecked(this, this.cbLockDG, isChecked);
                this.EndCombat(false);
                this.ActiveZone = this.zoneList[this.zoneList.Count - 1];
                this.currentZone = this.ActiveZone.ZoneName;
                if (this.ActiveZone.ActiveEncounter != null)
                {
                    this.inCombat = this.ActiveZone.ActiveEncounter.Active;
                }
                if (this.inCombat)
                {
                    this.lastHostileTime = this.ActiveZone.ActiveEncounter.EndTime;
                }
                this.SetCharName(true);
                try
                {
                    this.readThreadLock = false;
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblLogFile, "Parsing Resumed...");
                }
                catch
                {
                }
                ActGlobals.oFormImportProgress.SetProgress(-1);
                ThreadInvokes.TreeViewClear(this, this.tvDG);
                this.refreshTree = true;
            }
            finally
            {
                this.importThreadAlive = false;
            }
            try
            {
                if (this.LogFileChanged != null)
                {
                    this.LogFileChanged(false, this.LogFilePath);
                }
            }
            catch (Exception exception3)
            {
                this.WriteExceptionLog(exception3, "ImportClip->LogFileChanged event");
            }
        }

        public bool ImportControlChilderenText(string controlName, string controlText, bool found, Control c)
        {
            for (int i = 0; i < c.Controls.Count; i++)
            {
                if (found)
                {
                    return found;
                }
                Control control = c.Controls[i];
                found = this.ImportControlChilderenText(controlName, controlText, found, control);
                if (control.Name == controlName)
                {
                    control.Text = controlText;
                    found = true;
                }
            }
            return found;
        }

        public void ImportControlTextXML(Stream Input)
        {
            XmlTextReader reader = new XmlTextReader(Input);
            try
            {
                while (reader.Read())
                {
                    if (reader.NodeType == XmlNodeType.Element)
                    {
                        try
                        {
                            if (reader.LocalName == "Control")
                            {
                                bool found = false;
                                Control c = this;
                                string attribute = reader.GetAttribute("UniqueName");
                                string controlText = reader.GetAttribute("Text");
                                if (!ActGlobals.oFormActMain.ImportControlChilderenText(attribute, controlText, found, c))
                                {
                                    throw new ArgumentException(string.Format("Control {0} could not be located in the windows form.", attribute));
                                }
                            }
                            continue;
                        }
                        catch (Exception exception)
                        {
                            this.WriteExceptionLog(exception, string.Format(this.Trans["messageBox-xmlReadError"].DisplayedText, reader.LineNumber, reader.LocalName, exception.Message));
                            continue;
                        }
                    }
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, this.Trans["messageBox-xmlSyntaxError"].DisplayedText);
            }
            reader.Close();
        }

        public void ImportControlTextXML(string FilePath)
        {
            this.ImportControlTextXML(new FileInfo(FilePath).OpenRead());
        }

        internal void ImportFile()
        {
            DateTime dtBegin = new DateTime(this.ioImportLog.calImportFrom.SelectionStart.Year, this.ioImportLog.calImportFrom.SelectionStart.Month, this.ioImportLog.calImportFrom.SelectionStart.Day, this.ioImportLog.dtImportFromTime.Value.Hour, this.ioImportLog.dtImportFromTime.Value.Minute, this.ioImportLog.dtImportFromTime.Value.Second);
            DateTime dtEnd = new DateTime(this.ioImportLog.calImportTo.SelectionStart.Year, this.ioImportLog.calImportTo.SelectionStart.Month, this.ioImportLog.calImportTo.SelectionStart.Day, this.ioImportLog.dtImportToTime.Value.Hour, this.ioImportLog.dtImportToTime.Value.Minute, this.ioImportLog.dtImportToTime.Value.Second);
            this.ImportFile(true, this.ioImportLog.cbContToEndCombat.Checked, dtBegin, dtEnd);
        }

        private bool ImportFile(bool userInterfaceDriven, bool extendToCombatEnd, DateTime dtBegin, DateTime dtEnd)
        {
            bool flag4;
            this.importThreadAlive = true;
            ActGlobals.oFormImportProgress.ResetFileStats();
            if (userInterfaceDriven)
            {
                ActGlobals.oFormImportProgress.waitCharName.WaitOne();
                if (!string.IsNullOrEmpty(ActGlobals.oFormImportProgress.charName))
                {
                    ThreadInvokes.ControlSetText(this, this.opDataCorrectionMisc.tbCharName, ActGlobals.oFormImportProgress.charName);
                }
                else
                {
                    ThreadInvokes.ControlSetText(this, this.opDataCorrectionMisc.tbCharName, ActGlobals.charName);
                }
                this.SetCharName(false);
                ActGlobals.oFormImportProgress.StartOperationStats();
            }
            string logFilePath = this.logFilePath;
            this.logFilePath = this.importStream.Name;
            try
            {
                if (this.LogFileChanged != null)
                {
                    this.LogFileChanged(true, this.LogFilePath);
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "ImportFile->LogFileChanged event");
            }
            try
            {
                DateTime time2;
                bool isChecked = this.cbLockDG.Checked;
                ThreadInvokes.CheckboxSetChecked(this, this.cbLockDG, true);
                try
                {
                    this.readThreadLock = true;
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblLogFile, "Parsing Paused...");
                }
                catch
                {
                }
                Application.DoEvents();
                DateTime now = DateTime.Now;
                int num2 = 0;
                bool flag2 = false;
                if (userInterfaceDriven)
                {
                    if (this.ioImportLog.rbImportFromBegining.Checked)
                    {
                        dtBegin = DateTime.MinValue;
                    }
                    if (this.ioImportLog.rbImportToEnd.Checked)
                    {
                        if (this.inCombat)
                        {
                            dtEnd = this.LastKnownTime;
                        }
                        else
                        {
                            dtEnd = DateTime.MaxValue;
                        }
                    }
                }
                ActGlobals.oFormImportProgress.SetProgress(-1);
                Application.DoEvents();
                StreamReader reader = new StreamReader(this.importStream, this.LogEncoding);
                string str2 = string.Empty;
                long startPos = 0;
                long length = this.importStream.Length;
                bool flag3 = false;
                this.ChangeZone("Import Zone");
                this.LastKnownTime = DateTime.MinValue;
                if (this.ioImportLog.rbImportToDateTime.Checked || !userInterfaceDriven)
                {
                    while (!flag3)
                    {
                        try
                        {
                            str2 = reader.ReadLine();
                            if (!string.IsNullOrEmpty(str2))
                            {
                                try
                                {
                                    time2 = this.GetDateTimeFromLog(str2);
                                }
                                catch
                                {
                                    continue;
                                }
                                if (time2 == DateTime.MinValue)
                                {
                                    continue;
                                }
                                if (time2 < dtEnd)
                                {
                                    reader.BaseStream.Seek(0x100000, SeekOrigin.Current);
                                    reader.DiscardBufferedData();
                                    continue;
                                }
                                if (reader.BaseStream.Position > 0x100000)
                                {
                                    length = reader.BaseStream.Position;
                                }
                                else
                                {
                                    length = reader.BaseStream.Length;
                                }
                            }
                            else
                            {
                                if (reader.BaseStream.Position < reader.BaseStream.Length)
                                {
                                    continue;
                                }
                                if (reader.BaseStream.Position > 0x100000)
                                {
                                    length = reader.BaseStream.Position;
                                }
                                else
                                {
                                    length = reader.BaseStream.Length;
                                }
                            }
                            break;
                        }
                        catch (ThreadAbortException)
                        {
                            flag3 = true;
                            continue;
                        }
                        catch (Exception exception2)
                        {
                            this.WriteExceptionLog(exception2, reader.BaseStream.Position + "\n" + str2);
                            if (userInterfaceDriven && (MessageBox.Show(string.Format(this.Trans["messageBox-importParseError"].DisplayedText, str2, reader.BaseStream.Position, exception2.Message), "Parsing Failed", MessageBoxButtons.YesNo, MessageBoxIcon.Hand) == DialogResult.No))
                            {
                                flag3 = true;
                            }
                            continue;
                        }
                    }
                    reader.BaseStream.Seek(0, SeekOrigin.Begin);
                    reader.DiscardBufferedData();
                }
                if (this.ioImportLog.rbImportFromDateTime.Checked || !userInterfaceDriven)
                {
                    while (!flag3)
                    {
                        try
                        {
                            str2 = reader.ReadLine();
                            if (!string.IsNullOrEmpty(str2))
                            {
                                try
                                {
                                    time2 = this.GetDateTimeFromLog(str2);
                                }
                                catch
                                {
                                    continue;
                                }
                                if (time2 == DateTime.MinValue)
                                {
                                    continue;
                                }
                                if (time2 < dtBegin)
                                {
                                    reader.BaseStream.Seek(0x100000, SeekOrigin.Current);
                                    reader.DiscardBufferedData();
                                    continue;
                                }
                                if (reader.BaseStream.Position > 0x100000)
                                {
                                    reader.BaseStream.Seek(-1048576, SeekOrigin.Current);
                                    reader.DiscardBufferedData();
                                    startPos = reader.BaseStream.Position;
                                }
                                else
                                {
                                    reader.BaseStream.Seek(0, SeekOrigin.Begin);
                                    reader.DiscardBufferedData();
                                    startPos = reader.BaseStream.Position;
                                }
                            }
                            else
                            {
                                if (reader.BaseStream.Position < reader.BaseStream.Length)
                                {
                                    continue;
                                }
                                if (reader.BaseStream.Length > 0x100000)
                                {
                                    reader.BaseStream.Seek(-1048576, SeekOrigin.Current);
                                    reader.DiscardBufferedData();
                                    startPos = reader.BaseStream.Position;
                                }
                                else
                                {
                                    reader.BaseStream.Seek(0, SeekOrigin.Begin);
                                    reader.DiscardBufferedData();
                                    startPos = reader.BaseStream.Position;
                                }
                            }
                            break;
                        }
                        catch (ThreadAbortException)
                        {
                            flag3 = true;
                            continue;
                        }
                        catch (Exception exception3)
                        {
                            this.WriteExceptionLog(exception3, reader.BaseStream.Position + "\n" + str2);
                            if (userInterfaceDriven && (MessageBox.Show(string.Format(this.Trans["messageBox-importParseError"].DisplayedText, str2, reader.BaseStream.Position, exception3.Message), "Parsing Failed", MessageBoxButtons.YesNo, MessageBoxIcon.Hand) == DialogResult.No))
                            {
                                flag3 = true;
                            }
                            continue;
                        }
                    }
                }
                this.FindZoneName(this.importStream.Name, startPos);
                this.inCombat = false;
                ActGlobals.oFormImportProgress.ResumeStats();
                long position = reader.BaseStream.Position;
                while (!flag3)
                {
                    try
                    {
                        str2 = reader.ReadLine();
                        ActGlobals.oFormImportProgress.AddLines(1);
                        ActGlobals.oFormImportProgress.AddChars(2);
                        long num5 = reader.BaseStream.Position;
                        if (!string.IsNullOrEmpty(str2))
                        {
                            ActGlobals.oFormImportProgress.AddChars((long) str2.Length);
                            this.GlobalTimeSorter++;
                            time2 = this.GetDateTimeFromLog(str2);
                            this.LastKnownTime = time2;
                            num2++;
                            if ((num2 % 0x3e8) == 0)
                            {
                                float num = (((float) (reader.BaseStream.Position - startPos)) / ((float) (length - startPos))) * 100f;
                                if (num < 100f)
                                {
                                    ActGlobals.oFormImportProgress.SetProgress((int) num);
                                }
                                Application.DoEvents();
                            }
                            if ((time2 >= dtBegin) && ((time2 <= dtEnd) || (extendToCombatEnd && this.inCombat)))
                            {
                                flag2 = true;
                                this.ParseRawLogLine(true, time2, str2);
                                continue;
                            }
                            if (time2 <= dtEnd)
                            {
                                continue;
                            }
                            break;
                        }
                        if (reader.BaseStream.Position == reader.BaseStream.Length)
                        {
                            break;
                        }
                        continue;
                    }
                    catch (ThreadAbortException)
                    {
                        flag3 = true;
                        continue;
                    }
                    catch (Exception exception4)
                    {
                        this.WriteExceptionLog(exception4, reader.BaseStream.Position + "\n" + this.lastLogLine);
                        if (userInterfaceDriven)
                        {
                            ActGlobals.oFormImportProgress.FreezeStats();
                            if (MessageBox.Show(string.Format(this.Trans["messageBox-importParseError"].DisplayedText, str2, reader.BaseStream.Position, exception4.Message), "Parsing Failed", MessageBoxButtons.YesNo, MessageBoxIcon.Hand) == DialogResult.No)
                            {
                                flag3 = true;
                            }
                            ActGlobals.oFormImportProgress.ResumeStats();
                        }
                        continue;
                    }
                }
                ActGlobals.oFormImportProgress.FreezeStats();
                if (!flag2)
                {
                    MessageBox.Show(this.Trans["messageBox-importDateTimeFail"].DisplayedText, this.Trans["messageBoxTitle-importFail"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    ActGlobals.oFormImportProgress.SetProgress(-1);
                }
                this.importStream.Close();
                DateTime time1 = DateTime.Now - now;
                ThreadInvokes.CheckboxSetChecked(this, this.cbLockDG, isChecked);
                this.EndCombat(false);
                this.ActiveZone = this.zoneList[this.zoneList.Count - 1];
                if ((this.logStream != null) && this.logStream.CanRead)
                {
                    this.FindZoneName(this.logStream.Name, this.logStream.Position);
                }
                else
                {
                    this.currentZone = this.ActiveZone.ZoneName;
                }
                if (this.ActiveZone.ActiveEncounter != null)
                {
                    this.inCombat = this.ActiveZone.ActiveEncounter.Active;
                }
                if (this.inCombat)
                {
                    this.lastHostileTime = this.ActiveZone.ActiveEncounter.EndTime;
                }
                this.SetCharName(true);
                try
                {
                    this.readThreadLock = false;
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblLogFile, "Parsing Resumed...");
                }
                catch
                {
                }
                ActGlobals.oFormImportProgress.SetProgress(-1);
                if (userInterfaceDriven)
                {
                    ActGlobals.oFormImportProgress.EndOperationStats();
                }
                ThreadInvokes.TreeViewClear(this, this.tvDG);
                if (userInterfaceDriven)
                {
                    this.refreshTree = true;
                }
                flag4 = flag2;
            }
            finally
            {
                this.importThreadAlive = false;
                this.logFilePath = logFilePath;
                try
                {
                    if (this.LogFileChanged != null)
                    {
                        this.LogFileChanged(false, this.LogFilePath);
                    }
                }
                catch (Exception exception5)
                {
                    this.WriteExceptionLog(exception5, "ImportFile->LogFileChanged event");
                }
            }
            return flag4;
        }

        [Obsolete]
        public string IngToAtk(string attackingType)
        {
            return attackingType;
        }

        internal void InitACT()
        {
            this.ReadThreadLock = true;
            base.ResumeLayout(true);
            this.PlaySoundMethod = new PlaySoundDelegate(this.PlaySoundWmpApi);
            this.opSound.tbarTtsVol.Enabled = true;
            this.opSound.tbarWavVol.Enabled = true;
            this.PopulateNewConfig();
            Process currentProcess = Process.GetCurrentProcess();
            this.lblVersion.Text = string.Concat(new object[] { currentProcess.MainModule.FileVersionInfo.FileMajorPart, ".", currentProcess.MainModule.FileVersionInfo.FileMinorPart, ".", currentProcess.MainModule.FileVersionInfo.FileBuildPart, "     Release: ", currentProcess.MainModule.FileVersionInfo.FilePrivatePart });
            DirectoryInfo info = new DirectoryInfo(Path.GetTempPath() + @"\AdvancedCombatTracker");
            info.Create();
            foreach (FileInfo info2 in info.GetFiles("*.*"))
            {
                try
                {
                    info2.Delete();
                }
                catch
                {
                }
            }
            this.folderAct = new DirectoryInfo(Application.StartupPath);
            try
            {
                this.folderMedia = new DirectoryInfo(new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.System)).Parent.FullName + @"\Media");
            }
            catch
            {
                this.folderMedia = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyMusic));
            }
            if (!this.folderMedia.Exists)
            {
                this.folderMedia = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyMusic));
            }
            this.folderExports = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory));
            string str = Path.GetFileNameWithoutExtension(currentProcess.MainModule.FileName) + ".config.xml";
            this.appDataFolder = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\Advanced Combat Tracker");
            this.appDataFolder.Create();
            this.appDataFolder.CreateSubdirectory("Config");
            this.appDataFolder.CreateSubdirectory("Plugins");
            FileInfo info3 = new FileInfo(this.appDataFolder.FullName + @"\Config\" + str);
            string path = this.appDataFolder.FullName + @"\" + Path.GetFileNameWithoutExtension(currentProcess.MainModule.FileName) + ".log";
            try
            {
                this.debugFile = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read);
                this.debugFile.Seek(0, SeekOrigin.End);
            }
            catch
            {
                this.debugFile = new MemoryStream();
            }
            dW = new StreamWriter(this.debugFile, Encoding.UTF8);
            dW.WriteLine("Application-Start " + DateTime.Now.ToString("s") + " (v" + this.lblVersion.Text + " | CLR v" + Environment.Version.ToString(4) + " | OS " + Environment.OSVersion.ToString() + ")");
            this.ResetHtml();
            this.PopulateOptions();
            this.PopulateIo();
            this.SetupEQ2EnglishEnvironment();
            if (!info3.Exists)
            {
                ActGlobals.oFormSpellTimersPanel.Height++;
                this.opGraphing.ddlGraphPriority.Text = "Normal";
                this.opMisc.ddlLogPriority.Text = "Above Normal";
                this.btnCheckVer.Enabled = false;
                this.flpOptionControls.Controls.Clear();
                this.flpIoControls.Controls.Clear();
                this.flpIoControls.Controls.Add(this.ioImportLog);
                this.flpIoControls.Controls.Add(this.gbIoHelp);
                this.switchToLogLabel = true;
                ActGlobals.oFormStartupWizard.Show();
                this.zoneList.Add(new ZoneData(DateTime.Now, "Import", false, false, false));
                this.activeZone = new ZoneData(DateTime.Now, this.currentZone, this.opMisc.cbZoneAllListing.Checked, this.opSelectiveParsing.rbSParseFull.Checked, this.opSelectiveParsing.cbSParseIgnoreEnemies.Checked);
                this.zoneList.Add(this.activeZone);
                this.lvDG.Clear();
                this.tmrTick.Enabled = true;
                ActGlobals.oFormStartupWizard.Show();
                this.ReadThreadLock = false;
                string str3 = Path.GetFileNameWithoutExtension(currentProcess.MainModule.FileName) + ".historydb.xml";
                FileInfo info4 = new FileInfo(this.AppDataFolder.FullName + @"\" + str3);
                if (info4.Exists)
                {
                    this.LoadXmlRecords(info4.FullName);
                }
                return;
            }
            if (info3.Exists)
            {
                this.LoadNewSettings(info3.FullName);
            }
            DateTime now = DateTime.Now;
            try
            {
                FileInfo closedFile = new FileInfo(this.logFilePath);
                if ((!string.IsNullOrEmpty(this.logFilePath) && !this.noLoad) && closedFile.Exists)
                {
                    this.SetCharName(true);
                    this.SplitLogFile(closedFile);
                    try
                    {
                        now = this.FindZoneName(this.logFilePath, closedFile.Length);
                    }
                    catch (FileNotFoundException)
                    {
                        now = DateTime.Now;
                    }
                    this.OpenLog(false, true);
                }
                else
                {
                    this.SetCharName(false);
                }
            }
            catch
            {
                this.SetCharName(false);
            }
            this.zoneList.Add(new ZoneData(DateTime.Now, "Import", false, false, false));
            this.activeZone = new ZoneData(now, this.currentZone, this.opMisc.cbZoneAllListing.Checked, this.opSelectiveParsing.rbSParseFull.Checked, this.opSelectiveParsing.cbSParseIgnoreEnemies.Checked);
            this.zoneList.Add(this.activeZone);
            this.lvDG.Clear();
            try
            {
                DirectoryInfo info6 = new DirectoryInfo(Path.GetDirectoryName(currentProcess.MainModule.FileName));
                foreach (FileInfo info7 in info6.GetFiles("update*.exe"))
                {
                    try
                    {
                        info7.Delete();
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
            this.opMisc.btnCpuAffinityApply_Click(null, new EventArgs());
            this.lvDG.SetExStyles();
            this.ValidateTableSetup();
            this.ValidateLists();
            this.ResetCheckLogs();
            this.selectiveListRebuild = true;
            this.flpOptionControls.Controls.Clear();
            this.flpIoControls.Controls.Clear();
            this.flpIoControls.Controls.Add(this.ioImportLog);
            this.flpIoControls.Controls.Add(this.gbIoHelp);
            this.xmlSettings.FinializeComboBoxes();
            if ((this.BeforeLogLineRead == null) && !this.suppressStartupWizardQuestion)
            {
                switch (MessageBox.Show("You do not appear to have any log parsing plugins enabled.  ACT cannot parse game logs without this support.\n\nWould you like to show the Startup Wizard to assist you in downloading and enabling one?\n\nClick [Cancel] to never show this message again.", "Parsing event not handled", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation))
                {
                    case DialogResult.Cancel:
                        this.suppressStartupWizardQuestion = true;
                        break;

                    case DialogResult.Yes:
                        ActGlobals.oFormStartupWizard.Show();
                        goto Label_0719;
                }
            }
        Label_0719:
            if (this.cbAutoCheck.Checked)
            {
                ActGlobals.oFormUpdater.Check();
            }
            if (this.minimizeOnStart)
            {
                base.WindowState = FormWindowState.Minimized;
            }
            this.ReadThreadLock = false;
            if (this.cbRecordsSave.Checked)
            {
                string str4 = Path.GetFileNameWithoutExtension(currentProcess.MainModule.FileName) + ".historydb.xml";
                FileInfo info8 = new FileInfo(this.AppDataFolder.FullName + @"\" + str4);
                if (info8.Exists)
                {
                    this.LoadXmlRecords(info8.FullName);
                }
            }
            new Thread(new ThreadStart(this.SubDoAutoImports)) { IsBackground = true }.Start();
        }

        private void InitializeComponent()
        {
            this.components = new Container();
            ComponentResourceManager manager = new ComponentResourceManager(typeof(FormActMain));
            TreeNode node = new TreeNode("XML File Import/Export");
            TreeNode node2 = new TreeNode("XML Share Snippets");
            TreeNode node3 = new TreeNode("XML Config Subscriptions");
            TreeNode node4 = new TreeNode("Configuration Import/Export", new TreeNode[] { node, node2, node3 });
            TreeNode node5 = new TreeNode("General");
            TreeNode node6 = new TreeNode("Monochrome");
            TreeNode node7 = new TreeNode("Color");
            TreeNode node8 = new TreeNode("Logitech LCD Display", new TreeNode[] { node5, node6, node7 });
            TreeNode node9 = new TreeNode("Import a Log File");
            TreeNode node10 = new TreeNode("Import the Clipboard");
            TreeNode node11 = new TreeNode("Import an *.act File");
            TreeNode node12 = new TreeNode("Import Encounters", new TreeNode[] { node9, node10, node11 });
            TreeNode node13 = new TreeNode("Export to an *.act File");
            TreeNode node14 = new TreeNode("Export to an HTML Page");
            TreeNode node15 = new TreeNode("Export to SQL/ODBC");
            TreeNode node16 = new TreeNode("Export to an XML File");
            TreeNode node17 = new TreeNode("Export Encounters", new TreeNode[] { node13, node14, node15, node16 });
            this.tmrTick = new System.Windows.Forms.Timer(this.components);
            this.tvDG = new TreeView();
            this.cmsTView = new ContextMenuStrip(this.components);
            this.exportToClipboardToolStripMenuItem = new ToolStripMenuItem();
            this.exportCustomToClipboardToolStripMenuItem = new ToolStripMenuItem();
            this.toolStripSeparator3 = new ToolStripSeparator();
            this.exportToMacroFileToolStripMenuItem = new ToolStripMenuItem();
            this.exportCustomToMacroFileToolStripMenuItem = new ToolStripMenuItem();
            this.toolStripSeparator7 = new ToolStripSeparator();
            this.exportToEQ2HTMLToolStripMenuItem = new ToolStripMenuItem();
            this.toolStripSeparator1 = new ToolStripSeparator();
            this.renameToolStripMenuItem = new ToolStripMenuItem();
            this.cmitbRenameEnc = new ToolStripTextBox();
            this.deleteToolStripMenuItem = new ToolStripMenuItem();
            this.toolStripSeparator2 = new ToolStripSeparator();
            this.viewLogsToolStripMenuItem = new ToolStripMenuItem();
            this.viewTimelineToolStripMenuItem = new ToolStripMenuItem();
            this.viewEncounterVCRToolStripMenuItem = new ToolStripMenuItem();
            this.avoidanceReportToolStripMenuItem1 = new ToolStripMenuItem();
            this.setEncounterAlliesToolStripMenuItem = new ToolStripMenuItem();
            this.toolStripSeparator4 = new ToolStripSeparator();
            this.deathReportToolStripMenuItem = new ToolStripMenuItem();
            this.specialAttacksReportToolStripMenuItem = new ToolStripMenuItem();
            this.avoidanceReportToolStripMenuItem = new ToolStripMenuItem();
            this.toolStripSeparator5 = new ToolStripSeparator();
            this.lookupByCombatantToolStripMenuItem = new ToolStripMenuItem();
            this.toolStripSeparator6 = new ToolStripSeparator();
            this.calculateSpellTimerToolStripMenuItem = new ToolStripMenuItem();
            this.btnRefresh = new Button();
            this.btnClear = new Button();
            this.cbLockDG = new CheckBox();
            this.btnEndEnc = new Button();
            this.tc1 = new TabControl();
            this.tpMain = new TabPage();
            this.vSplit = new Splitter();
            this.pRightView = new Panel();
            this.hSplit = new Splitter();
            this.pDG = new Panel();
            this.btnNavBack = new Button();
            this.lvDG = new ListViewXP();
            this.ilSorting = new ImageList(this.components);
            this.lblDG = new Label();
            this.pGraphing = new Panel();
            this.pbDG = new PictureBox();
            this.cmsGraph = new ContextMenuStrip(this.components);
            this.refreshToolStripMenuItem5 = new ToolStripMenuItem();
            this.copyToolStripMenuItem = new ToolStripMenuItem();
            this.saveAsToolStripMenuItem = new ToolStripMenuItem();
            this.cmiEnabled = new ToolStripMenuItem();
            this.pCList = new Panel();
            this.lbGraph = new ListBox();
            this.lblGraphList = new Label();
            this.pLeftView = new Panel();
            this.pTv = new Panel();
            this.pTvBtns = new Panel();
            this.tableLayoutPanel11 = new TableLayoutPanel();
            this.btnCDSearch = new Button();
            this.btnMergeChecked = new Button();
            this.btnDeleteChecked = new Button();
            this.cbShowChecks = new CheckBox();
            this.tpOptions = new TabPage();
            this.flpOptionControls = new FlowLayoutPanel();
            this.gbHelp = new GroupBox();
            this.lblHelpText = new Label();
            this.splitter1 = new Splitter();
            this.tableLayoutPanel12 = new TableLayoutPanel();
            this.tbOptionsSearch = new TextBox();
            this.tvOptions = new TreeView();
            this.btnOptionSearchClear = new Button();
            this.tpTriggers = new TabPage();
            this.tcTriggers = new TabControl();
            this.tabPage0 = new TabPage();
            this.tvCustomTriggers = new TreeView();
            this.cmsCustomTrigger = new ContextMenuStrip(this.components);
            this.copyAsSharableXMLToolStripMenuItem = new ToolStripMenuItem();
            this.copyAsSharableXMLToolStripMenuItem2 = new ToolStripMenuItem();
            this.flowLayoutPanel1 = new FlowLayoutPanel();
            this.label90 = new Label();
            this.tbTriggerCategory = new TextBox();
            this.cbTriggerCategoryRestrict = new CheckBox();
            this.label91 = new Label();
            this.tbTriggerTimer = new TextBox();
            this.cbTriggerTimer = new CheckBox();
            this.cbTriggerTabbed = new CheckBox();
            this.panel8 = new Panel();
            this.btnSndTriggerBrowse = new Button();
            this.btnSndTriggerPlay = new Button();
            this.rbSndTriggerTTS = new RadioButton();
            this.rbSndTriggerWAV = new RadioButton();
            this.label40 = new Label();
            this.rbSndTriggerBeep = new RadioButton();
            this.rbSndTriggerNone = new RadioButton();
            this.tbSndTrigger = new TextBox();
            this.btnAddTrigger = new Button();
            this.btnRemoveTrigger = new Button();
            this.tbTriggerText = new TextBox();
            this.linkRegex = new LinkLabel();
            this.ilTriggerTabs = new ImageList(this.components);
            this.tpPlugins = new TabPage();
            this.tcPlugins = new TabControl();
            this.tabPage1 = new TabPage();
            this.groupBox3 = new GroupBox();
            this.linkLabelGetPlugins = new LinkLabel();
            this.rtbPluginInfo = new RichTextBox();
            this.panel15 = new Panel();
            this.btnAddPluginPanel = new Button();
            this.tbPluginPath = new TextBox();
            this.btnPluginBrowse = new Button();
            this.lblPluginFileInfo = new Label();
            this.pPluginInfos = new Panel();
            this.tpImportExport = new TabPage();
            this.flpIoControls = new FlowLayoutPanel();
            this.gbIoHelp = new GroupBox();
            this.lblIoHelp = new Label();
            this.splitter2 = new Splitter();
            this.tvIo = new TreeView();
            this.tpHistory = new TabPage();
            this.groupBox5 = new GroupBox();
            this.label76 = new Label();
            this.nudHistoryDelete = new NumericUpDown();
            this.btnHistoryDelete = new Button();
            this.label73 = new Label();
            this.cbRecordsSave = new CheckBox();
            this.groupBox27 = new GroupBox();
            this.btnRecordsSelectZones = new Button();
            this.btnRecordsSelectEncs = new Button();
            this.btnRecordsDelete = new Button();
            this.btnRecordsImport = new Button();
            this.clbRecordResults = new CheckedListBox();
            this.groupBox4 = new GroupBox();
            this.tableLayoutPanel10 = new TableLayoutPanel();
            this.mcRecords = new MonthCalendar();
            this.label72 = new Label();
            this.label75 = new Label();
            this.label74 = new Label();
            this.panel14 = new Panel();
            this.tableLayoutPanel9 = new TableLayoutPanel();
            this.dtRecordEndDate = new DateTimePicker();
            this.dtRecordEndTime = new DateTimePicker();
            this.tableLayoutPanel8 = new TableLayoutPanel();
            this.dtRecordStartDate = new DateTimePicker();
            this.dtRecordStartTime = new DateTimePicker();
            this.cbRecordSearchEncs = new CheckBox();
            this.cbRecordSearchZones = new CheckBox();
            this.btnRecordSearchDateTime = new Button();
            this.btnRecordSearchText = new Button();
            this.tbRecordSearchText = new TextBox();
            this.tpAbout = new TabPage();
            this.webBrowser1 = new WebBrowser();
            this.groupBox14 = new GroupBox();
            this.rtbFeedback = new RichTextBox();
            this.cmRtbEdit = new ContextMenu();
            this.cmiRtbCut = new MenuItem();
            this.cmiRtbCopy = new MenuItem();
            this.cmiRtbPaste = new MenuItem();
            this.cmiRtbDelete = new MenuItem();
            this.menuItem54 = new MenuItem();
            this.cmiRtbSelect = new MenuItem();
            this.menuItem1 = new MenuItem();
            this.label24 = new Label();
            this.btnFeedbackSubmit = new Button();
            this.cbFeedbackLogs = new CheckBox();
            this.tbFeedbackEmail = new TextBox();
            this.gbAbout = new GroupBox();
            this.linkLabelAppData = new LinkLabel();
            this.pbPaypal = new PictureBox();
            this.cbAutoCheck = new CheckBox();
            this.btnCheckVer = new Button();
            this.label5 = new Label();
            this.linkURL = new LinkLabel();
            this.label4 = new Label();
            this.linkEmail = new LinkLabel();
            this.lblVersion = new Label();
            this.label7 = new Label();
            this.label19 = new Label();
            this.tmrTen = new System.Windows.Forms.Timer(this.components);
            this.cbbMiniParse = new CheckBox();
            this.cbbShowTimers = new CheckBox();
            this.tbClipboard = new TextBox();
            this.cmsEList = new ContextMenuStrip(this.components);
            this.refreshToolStripMenuItem = new ToolStripMenuItem();
            this.copyAsFormattedPlainTextToolStripMenuItem4 = new ToolStripMenuItem();
            this.copyCellToolStripMenuItem4 = new ToolStripMenuItem();
            this.appendCellToolStripMenuItem4 = new ToolStripMenuItem();
            this.toolStripMenuItem4 = new ToolStripMenuItem();
            this.cmsATSort = new ContextMenuStrip(this.components);
            this.refreshToolStripMenuItem1 = new ToolStripMenuItem();
            this.selectThisActionInViewLogsToolStripMenuItem = new ToolStripMenuItem();
            this.copyAsFormattedPlainTextToolStripMenuItem = new ToolStripMenuItem();
            this.copyAsHTMLToolStripMenuItem = new ToolStripMenuItem();
            this.copyAsXMLToolStripMenuItem = new ToolStripMenuItem();
            this.copyAsCSVToolStripMenuItem = new ToolStripMenuItem();
            this.copyCellToolStripMenuItem = new ToolStripMenuItem();
            this.appendCellToolStripMenuItem = new ToolStripMenuItem();
            this.toolStripMenuItem1 = new ToolStripMenuItem();
            this.cmsMDSort = new ContextMenuStrip(this.components);
            this.refreshToolStripMenuItem2 = new ToolStripMenuItem();
            this.copyAsFormattedPlainTextToolStripMenuItem1 = new ToolStripMenuItem();
            this.copyAsHTMLToolStripMenuItem1 = new ToolStripMenuItem();
            this.copyAsXMLToolStripMenuItem1 = new ToolStripMenuItem();
            this.copyAsCSVToolStripMenuItem1 = new ToolStripMenuItem();
            this.copyCellToolStripMenuItem1 = new ToolStripMenuItem();
            this.appendCellToolStripMenuItem1 = new ToolStripMenuItem();
            this.appendNewlineToolStripMenuItem = new ToolStripMenuItem();
            this.cmsCDSort = new ContextMenuStrip(this.components);
            this.refreshToolStripMenuItem3 = new ToolStripMenuItem();
            this.copyAsFormattedPlainTextToolStripMenuItem2 = new ToolStripMenuItem();
            this.copyAsHTMLToolStripMenuItem2 = new ToolStripMenuItem();
            this.copyAsXMLToolStripMenuItem2 = new ToolStripMenuItem();
            this.copyAsCSVToolStripMenuItem2 = new ToolStripMenuItem();
            this.copyCellToolStripMenuItem2 = new ToolStripMenuItem();
            this.appendCellToolStripMenuItem2 = new ToolStripMenuItem();
            this.toolStripMenuItem2 = new ToolStripMenuItem();
            this.cmsEDSort = new ContextMenuStrip(this.components);
            this.refreshToolStripMenuItem4 = new ToolStripMenuItem();
            this.copyAsFormattedPlainTextToolStripMenuItem3 = new ToolStripMenuItem();
            this.copyAsHTMLToolStripMenuItem3 = new ToolStripMenuItem();
            this.copyAsXMLToolStripMenuItem3 = new ToolStripMenuItem();
            this.copyAsCSVToolStripMenuItem3 = new ToolStripMenuItem();
            this.copyCellToolStripMenuItem3 = new ToolStripMenuItem();
            this.appendCellToolStripMenuItem3 = new ToolStripMenuItem();
            this.toolStripMenuItem3 = new ToolStripMenuItem();
            this.tmrTenths = new System.Windows.Forms.Timer(this.components);
            this.notifyIcon1 = new NotifyIcon(this.components);
            this.toolTip1 = new ToolTip(this.components);
            this.cmsTableSetup = new ContextMenuStrip(this.components);
            this.cmsTView.SuspendLayout();
            this.tc1.SuspendLayout();
            this.tpMain.SuspendLayout();
            this.pRightView.SuspendLayout();
            this.pDG.SuspendLayout();
            this.pGraphing.SuspendLayout();
            ((ISupportInitialize) this.pbDG).BeginInit();
            this.cmsGraph.SuspendLayout();
            this.pCList.SuspendLayout();
            this.pLeftView.SuspendLayout();
            this.pTv.SuspendLayout();
            this.pTvBtns.SuspendLayout();
            this.tableLayoutPanel11.SuspendLayout();
            this.tpOptions.SuspendLayout();
            this.flpOptionControls.SuspendLayout();
            this.gbHelp.SuspendLayout();
            this.tableLayoutPanel12.SuspendLayout();
            this.tpTriggers.SuspendLayout();
            this.tcTriggers.SuspendLayout();
            this.tabPage0.SuspendLayout();
            this.cmsCustomTrigger.SuspendLayout();
            this.flowLayoutPanel1.SuspendLayout();
            this.panel8.SuspendLayout();
            this.tpPlugins.SuspendLayout();
            this.tcPlugins.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.panel15.SuspendLayout();
            this.tpImportExport.SuspendLayout();
            this.flpIoControls.SuspendLayout();
            this.gbIoHelp.SuspendLayout();
            this.tpHistory.SuspendLayout();
            this.groupBox5.SuspendLayout();
            this.nudHistoryDelete.BeginInit();
            this.groupBox27.SuspendLayout();
            this.groupBox4.SuspendLayout();
            this.tableLayoutPanel10.SuspendLayout();
            this.tableLayoutPanel9.SuspendLayout();
            this.tableLayoutPanel8.SuspendLayout();
            this.tpAbout.SuspendLayout();
            this.groupBox14.SuspendLayout();
            this.gbAbout.SuspendLayout();
            ((ISupportInitialize) this.pbPaypal).BeginInit();
            this.cmsEList.SuspendLayout();
            this.cmsATSort.SuspendLayout();
            this.cmsMDSort.SuspendLayout();
            this.cmsCDSort.SuspendLayout();
            this.cmsEDSort.SuspendLayout();
            base.SuspendLayout();
            this.tmrTick.Interval = 0x3e8;
            this.tmrTick.Tick += new EventHandler(this.tmrTick_Tick);
            this.tvDG.ContextMenuStrip = this.cmsTView;
            this.tvDG.Dock = DockStyle.Fill;
            this.tvDG.HideSelection = false;
            this.tvDG.Location = new Point(0, 1);
            this.tvDG.Name = "tvDG";
            this.tvDG.PathSeparator = " | ";
            this.tvDG.Size = new Size(0xd3, 0x1b4);
            this.tvDG.TabIndex = 3;
            this.tvDG.AfterCheck += new TreeViewEventHandler(this.tv1_AfterCheck);
            this.tvDG.AfterExpand += new TreeViewEventHandler(this.tv1_AfterExpand);
            this.tvDG.AfterSelect += new TreeViewEventHandler(this.tv1_AfterSelect);
            this.tvDG.MouseDown += new MouseEventHandler(this.tv1_MouseDown);
            this.cmsTView.Items.AddRange(new ToolStripItem[] { 
                this.exportToClipboardToolStripMenuItem, this.exportCustomToClipboardToolStripMenuItem, this.exportToMacroFileToolStripMenuItem, this.exportCustomToMacroFileToolStripMenuItem, this.exportToEQ2HTMLToolStripMenuItem, this.toolStripSeparator1, this.renameToolStripMenuItem, this.deleteToolStripMenuItem, this.toolStripSeparator2, this.viewLogsToolStripMenuItem, this.viewTimelineToolStripMenuItem, this.viewEncounterVCRToolStripMenuItem, this.avoidanceReportToolStripMenuItem1, this.setEncounterAlliesToolStripMenuItem, this.toolStripSeparator4, this.deathReportToolStripMenuItem, 
                this.specialAttacksReportToolStripMenuItem, this.avoidanceReportToolStripMenuItem, this.toolStripSeparator5, this.lookupByCombatantToolStripMenuItem, this.toolStripSeparator6, this.calculateSpellTimerToolStripMenuItem
             });
            this.cmsTView.Name = "cmsTView";
            this.cmsTView.Size = new Size(0xf2, 0x198);
            this.cmsTView.Opening += new CancelEventHandler(this.cmsTView_Opening);
            this.exportToClipboardToolStripMenuItem.Name = "exportToClipboardToolStripMenuItem";
            this.exportToClipboardToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.exportToClipboardToolStripMenuItem.Text = "Export to Clipboard";
            this.exportToClipboardToolStripMenuItem.Click += new EventHandler(this.cmiTVExport_Click);
            this.exportCustomToClipboardToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[] { this.toolStripSeparator3 });
            this.exportCustomToClipboardToolStripMenuItem.Name = "exportCustomToClipboardToolStripMenuItem";
            this.exportCustomToClipboardToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.exportCustomToClipboardToolStripMenuItem.Text = "Export Custom to Clipboard";
            this.toolStripSeparator3.Name = "toolStripSeparator3";
            this.toolStripSeparator3.Size = new Size(0x39, 6);
            this.exportToMacroFileToolStripMenuItem.Name = "exportToMacroFileToolStripMenuItem";
            this.exportToMacroFileToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.exportToMacroFileToolStripMenuItem.Text = "Export all checked to Macro File";
            this.exportToMacroFileToolStripMenuItem.Click += new EventHandler(this.exportToMacroFileToolStripMenuItem_Click);
            this.exportCustomToMacroFileToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[] { this.toolStripSeparator7 });
            this.exportCustomToMacroFileToolStripMenuItem.Name = "exportCustomToMacroFileToolStripMenuItem";
            this.exportCustomToMacroFileToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.exportCustomToMacroFileToolStripMenuItem.Text = "Export specific to Macro File";
            this.toolStripSeparator7.Name = "toolStripSeparator7";
            this.toolStripSeparator7.Size = new Size(0x39, 6);
            this.exportToEQ2HTMLToolStripMenuItem.Name = "exportToEQ2HTMLToolStripMenuItem";
            this.exportToEQ2HTMLToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.exportToEQ2HTMLToolStripMenuItem.Text = "Export to EQ2 HTML";
            this.exportToEQ2HTMLToolStripMenuItem.Click += new EventHandler(this.cmiTVExportHTML_Click);
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new Size(0xee, 6);
            this.renameToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[] { this.cmitbRenameEnc });
            this.renameToolStripMenuItem.Name = "renameToolStripMenuItem";
            this.renameToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.renameToolStripMenuItem.Text = "Rename";
            this.cmitbRenameEnc.Name = "cmitbRenameEnc";
            this.cmitbRenameEnc.Size = new Size(200, 0x17);
            this.cmitbRenameEnc.KeyUp += new KeyEventHandler(this.cmitbRenameEnc_KeyUp);
            this.cmitbRenameEnc.Click += new EventHandler(this.cmitbRenameEnc_Click);
            this.deleteToolStripMenuItem.Name = "deleteToolStripMenuItem";
            this.deleteToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.deleteToolStripMenuItem.Text = "Delete";
            this.deleteToolStripMenuItem.Click += new EventHandler(this.cmiTVDelete_Click);
            this.toolStripSeparator2.Name = "toolStripSeparator2";
            this.toolStripSeparator2.Size = new Size(0xee, 6);
            this.viewLogsToolStripMenuItem.Name = "viewLogsToolStripMenuItem";
            this.viewLogsToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.viewLogsToolStripMenuItem.Text = "View Logs";
            this.viewLogsToolStripMenuItem.Click += new EventHandler(this.cmiViewLogs_Click);
            this.viewTimelineToolStripMenuItem.Name = "viewTimelineToolStripMenuItem";
            this.viewTimelineToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.viewTimelineToolStripMenuItem.Text = "View Timeline";
            this.viewTimelineToolStripMenuItem.Click += new EventHandler(this.viewTimelineToolStripMenuItem_Click);
            this.viewEncounterVCRToolStripMenuItem.Name = "viewEncounterVCRToolStripMenuItem";
            this.viewEncounterVCRToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.viewEncounterVCRToolStripMenuItem.Text = "View Encounter VCR";
            this.viewEncounterVCRToolStripMenuItem.Click += new EventHandler(this.viewEncounterVCRToolStripMenuItem_Click);
            this.avoidanceReportToolStripMenuItem1.Name = "avoidanceReportToolStripMenuItem1";
            this.avoidanceReportToolStripMenuItem1.Size = new Size(0xf1, 0x16);
            this.avoidanceReportToolStripMenuItem1.Text = "Avoidance Report";
            this.avoidanceReportToolStripMenuItem1.Click += new EventHandler(this.avoidanceReportToolStripMenuItem1_Click);
            this.setEncounterAlliesToolStripMenuItem.Name = "setEncounterAlliesToolStripMenuItem";
            this.setEncounterAlliesToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.setEncounterAlliesToolStripMenuItem.Text = "Set Encounter Allies";
            this.setEncounterAlliesToolStripMenuItem.Click += new EventHandler(this.setEncounterAlliesToolStripMenuItem_Click);
            this.toolStripSeparator4.Name = "toolStripSeparator4";
            this.toolStripSeparator4.Size = new Size(0xee, 6);
            this.deathReportToolStripMenuItem.Name = "deathReportToolStripMenuItem";
            this.deathReportToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.deathReportToolStripMenuItem.Text = "Death Report";
            this.deathReportToolStripMenuItem.Click += new EventHandler(this.cmiDeathReport_Click);
            this.specialAttacksReportToolStripMenuItem.Name = "specialAttacksReportToolStripMenuItem";
            this.specialAttacksReportToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.specialAttacksReportToolStripMenuItem.Text = "Special Attacks Report";
            this.specialAttacksReportToolStripMenuItem.Click += new EventHandler(this.specialAttacksReportToolStripMenuItem_Click);
            this.avoidanceReportToolStripMenuItem.Name = "avoidanceReportToolStripMenuItem";
            this.avoidanceReportToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.avoidanceReportToolStripMenuItem.Text = "Avoidance Report";
            this.avoidanceReportToolStripMenuItem.Click += new EventHandler(this.avoidanceReportToolStripMenuItem_Click);
            this.toolStripSeparator5.Name = "toolStripSeparator5";
            this.toolStripSeparator5.Size = new Size(0xee, 6);
            this.lookupByCombatantToolStripMenuItem.Name = "lookupByCombatantToolStripMenuItem";
            this.lookupByCombatantToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.lookupByCombatantToolStripMenuItem.Text = "Lookup by Combatant";
            this.lookupByCombatantToolStripMenuItem.Click += new EventHandler(this.lookupByCombatantToolStripMenuItem_Click);
            this.toolStripSeparator6.Name = "toolStripSeparator6";
            this.toolStripSeparator6.Size = new Size(0xee, 6);
            this.calculateSpellTimerToolStripMenuItem.Name = "calculateSpellTimerToolStripMenuItem";
            this.calculateSpellTimerToolStripMenuItem.Size = new Size(0xf1, 0x16);
            this.calculateSpellTimerToolStripMenuItem.Text = "Calculate Spell Timer";
            this.calculateSpellTimerToolStripMenuItem.Click += new EventHandler(this.cmiMedianDelay_Click);
            this.btnRefresh.Dock = DockStyle.Fill;
            this.btnRefresh.Location = new Point(1, 0x1a);
            this.btnRefresh.Margin = new Padding(1);
            this.btnRefresh.Name = "btnRefresh";
            this.btnRefresh.Size = new Size(0x67, 0x17);
            this.btnRefresh.TabIndex = 4;
            this.btnRefresh.Text = "&Refresh List";
            this.btnRefresh.Click += new EventHandler(this.btnRefresh_Click);
            this.btnClear.Dock = DockStyle.Fill;
            this.btnClear.Location = new Point(0x6a, 0x1a);
            this.btnClear.Margin = new Padding(1);
            this.btnClear.Name = "btnClear";
            this.btnClear.Size = new Size(0x67, 0x17);
            this.btnClear.TabIndex = 5;
            this.btnClear.Text = "&Clear Encounters";
            this.btnClear.Click += new EventHandler(this.btnClear_Click);
            this.cbLockDG.Location = new Point(2, 0x1c);
            this.cbLockDG.Name = "cbLockDG";
            this.cbLockDG.Size = new Size(0xd0, 0x10);
            this.cbLockDG.TabIndex = 1;
            this.cbLockDG.Text = "&Disable Table Auto-Refresh";
            this.btnEndEnc.Dock = DockStyle.Fill;
            this.btnEndEnc.Location = new Point(0x6a, 1);
            this.btnEndEnc.Margin = new Padding(1);
            this.btnEndEnc.Name = "btnEndEnc";
            this.btnEndEnc.Size = new Size(0x67, 0x17);
            this.btnEndEnc.TabIndex = 3;
            this.btnEndEnc.Text = "&End Encounter";
            this.btnEndEnc.Click += new EventHandler(this.btnEndEnc_Click);
            this.tc1.Controls.Add(this.tpMain);
            this.tc1.Controls.Add(this.tpOptions);
            this.tc1.Controls.Add(this.tpTriggers);
            this.tc1.Controls.Add(this.tpPlugins);
            this.tc1.Controls.Add(this.tpImportExport);
            this.tc1.Controls.Add(this.tpHistory);
            this.tc1.Controls.Add(this.tpAbout);
            this.tc1.Dock = DockStyle.Fill;
            this.tc1.Location = new Point(0, 4);
            this.tc1.Name = "tc1";
            this.tc1.SelectedIndex = 0;
            this.tc1.Size = new Size(0x3c7, 0x233);
            this.tc1.TabIndex = 0;
            this.tpMain.Controls.Add(this.vSplit);
            this.tpMain.Controls.Add(this.pRightView);
            this.tpMain.Controls.Add(this.pLeftView);
            this.tpMain.Location = new Point(4, 0x16);
            this.tpMain.Name = "tpMain";
            this.tpMain.Size = new Size(0x3bf, 0x219);
            this.tpMain.TabIndex = 0;
            this.tpMain.Text = "Main";
            this.tpMain.UseVisualStyleBackColor = true;
            this.vSplit.Location = new Point(0xd7, 0);
            this.vSplit.MinExtra = 0xd7;
            this.vSplit.MinSize = 0xd7;
            this.vSplit.Name = "vSplit";
            this.vSplit.Size = new Size(3, 0x219);
            this.vSplit.TabIndex = 0x11;
            this.vSplit.TabStop = false;
            this.pRightView.Controls.Add(this.hSplit);
            this.pRightView.Controls.Add(this.pDG);
            this.pRightView.Controls.Add(this.pGraphing);
            this.pRightView.Dock = DockStyle.Fill;
            this.pRightView.Location = new Point(0xd7, 0);
            this.pRightView.Name = "pRightView";
            this.pRightView.Padding = new Padding(2, 4, 0, 0);
            this.pRightView.Size = new Size(0x2e8, 0x219);
            this.pRightView.TabIndex = 0x10;
            this.hSplit.Dock = DockStyle.Bottom;
            this.hSplit.Location = new Point(2, 0x10c);
            this.hSplit.Name = "hSplit";
            this.hSplit.Size = new Size(0x2e6, 5);
            this.hSplit.TabIndex = 0x10;
            this.hSplit.TabStop = false;
            this.pDG.Controls.Add(this.btnNavBack);
            this.pDG.Controls.Add(this.lvDG);
            this.pDG.Controls.Add(this.lblDG);
            this.pDG.Dock = DockStyle.Fill;
            this.pDG.Location = new Point(2, 4);
            this.pDG.Name = "pDG";
            this.pDG.Padding = new Padding(1, 1, 1, 5);
            this.pDG.Size = new Size(0x2e6, 0x10d);
            this.pDG.TabIndex = 15;
            this.pDG.Resize += new EventHandler(this.pDG_Resize);
            this.btnNavBack.Anchor = AnchorStyles.Right | AnchorStyles.Top;
            this.btnNavBack.FlatStyle = FlatStyle.Popup;
            this.btnNavBack.Image = Resources.back;
            this.btnNavBack.Location = new Point(720, 1);
            this.btnNavBack.Name = "btnNavBack";
            this.btnNavBack.Size = new Size(20, 0x13);
            this.btnNavBack.TabIndex = 5;
            this.btnNavBack.Click += new EventHandler(this.btnNavBack_Click);
            this.lvDG.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.lvDG.AutoArrange = false;
            this.lvDG.Font = new Font("Tahoma", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.lvDG.FullRowSelect = true;
            this.lvDG.GridLines = true;
            this.lvDG.Location = new Point(1, 0x15);
            this.lvDG.MultiSelect = false;
            this.lvDG.Name = "lvDG";
            this.lvDG.ShowGroups = false;
            this.lvDG.Size = new Size(740, 0xf3);
            this.lvDG.SmallImageList = this.ilSorting;
            this.lvDG.TabIndex = 4;
            this.lvDG.UseCompatibleStateImageBehavior = false;
            this.lvDG.View = View.Details;
            this.lvDG.VirtualMode = true;
            this.lvDG.ColumnClick += new ColumnClickEventHandler(this.lvDG_ColumnClick);
            this.lvDG.ItemActivate += new EventHandler(this.lvDG_ItemActivate);
            this.lvDG.RetrieveVirtualItem += new RetrieveVirtualItemEventHandler(this.lvDG_RetrieveVirtualItem);
            this.lvDG.MouseDown += new MouseEventHandler(this.lvDG_MouseDown);
            this.ilSorting.ImageStream = (ImageListStreamer) manager.GetObject("ilSorting.ImageStream");
            this.ilSorting.TransparentColor = System.Drawing.Color.Transparent;
            this.ilSorting.Images.SetKeyName(0, "sort-asc.ico");
            this.ilSorting.Images.SetKeyName(1, "sort-dec.ico");
            this.lblDG.AutoEllipsis = true;
            this.lblDG.BackColor = System.Drawing.Color.LightSteelBlue;
            this.lblDG.BorderStyle = BorderStyle.Fixed3D;
            this.lblDG.Dock = DockStyle.Top;
            this.lblDG.Font = new Font("Tahoma", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.lblDG.ForeColor = System.Drawing.Color.MidnightBlue;
            this.lblDG.Location = new Point(1, 1);
            this.lblDG.Name = "lblDG";
            this.lblDG.Size = new Size(740, 20);
            this.lblDG.TabIndex = 14;
            this.lblDG.Text = "Encounters";
            this.lblDG.TextAlign = ContentAlignment.MiddleLeft;
            this.pGraphing.Controls.Add(this.pbDG);
            this.pGraphing.Controls.Add(this.pCList);
            this.pGraphing.Dock = DockStyle.Bottom;
            this.pGraphing.Location = new Point(2, 0x111);
            this.pGraphing.Name = "pGraphing";
            this.pGraphing.Padding = new Padding(1, 0, 1, 1);
            this.pGraphing.Size = new Size(0x2e6, 0x108);
            this.pGraphing.TabIndex = 14;
            this.pbDG.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.pbDG.BackColor = SystemColors.ControlLightLight;
            this.pbDG.BorderStyle = BorderStyle.Fixed3D;
            this.pbDG.ContextMenuStrip = this.cmsGraph;
            this.pbDG.Cursor = Cursors.Cross;
            this.pbDG.Location = new Point(0, 0);
            this.pbDG.Name = "pbDG";
            this.pbDG.Size = new Size(0x2e6, 0x108);
            this.pbDG.TabIndex = 0x12;
            this.pbDG.TabStop = false;
            this.pbDG.DoubleClick += new EventHandler(this.pb1_DoubleClick);
            this.pbDG.MouseMove += new MouseEventHandler(this.pb1_MouseMove);
            this.cmsGraph.Items.AddRange(new ToolStripItem[] { this.refreshToolStripMenuItem5, this.copyToolStripMenuItem, this.saveAsToolStripMenuItem, this.cmiEnabled });
            this.cmsGraph.Name = "cmsGraph";
            this.cmsGraph.Size = new Size(0x7a, 0x5c);
            this.refreshToolStripMenuItem5.Name = "refreshToolStripMenuItem5";
            this.refreshToolStripMenuItem5.Size = new Size(0x79, 0x16);
            this.refreshToolStripMenuItem5.Text = "Refresh";
            this.refreshToolStripMenuItem5.Click += new EventHandler(this.cmiRefresh_Click);
            this.copyToolStripMenuItem.Name = "copyToolStripMenuItem";
            this.copyToolStripMenuItem.Size = new Size(0x79, 0x16);
            this.copyToolStripMenuItem.Text = "Copy";
            this.copyToolStripMenuItem.Click += new EventHandler(this.cmiCopy_Click);
            this.saveAsToolStripMenuItem.Name = "saveAsToolStripMenuItem";
            this.saveAsToolStripMenuItem.Size = new Size(0x79, 0x16);
            this.saveAsToolStripMenuItem.Text = "Save as...";
            this.saveAsToolStripMenuItem.Click += new EventHandler(this.cmiSave_Click);
            this.cmiEnabled.Checked = true;
            this.cmiEnabled.CheckOnClick = true;
            this.cmiEnabled.CheckState = CheckState.Checked;
            this.cmiEnabled.Name = "cmiEnabled";
            this.cmiEnabled.Size = new Size(0x79, 0x16);
            this.cmiEnabled.Text = "Enabled";
            this.pCList.Anchor = AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Top;
            this.pCList.Controls.Add(this.lbGraph);
            this.pCList.Controls.Add(this.lblGraphList);
            this.pCList.Location = new Point(0x260, 0);
            this.pCList.Name = "pCList";
            this.pCList.Padding = new Padding(4, 0, 0, 0);
            this.pCList.Size = new Size(0x88, 0x108);
            this.pCList.TabIndex = 13;
            this.pCList.Visible = false;
            this.lbGraph.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.lbGraph.Enabled = false;
            this.lbGraph.IntegralHeight = false;
            this.lbGraph.Location = new Point(6, 0x10);
            this.lbGraph.Name = "lbGraph";
            this.lbGraph.SelectionMode = SelectionMode.MultiExtended;
            this.lbGraph.Size = new Size(0x7f, 0xf9);
            this.lbGraph.TabIndex = 6;
            this.lbGraph.MouseHover += new EventHandler(this.lbGraph_MouseHover);
            this.lbGraph.MouseUp += new MouseEventHandler(this.lbGraph_MouseUp);
            this.lblGraphList.Location = new Point(6, 0);
            this.lblGraphList.Name = "lblGraphList";
            this.lblGraphList.Size = new Size(0x72, 0x10);
            this.lblGraphList.TabIndex = 0;
            this.lblGraphList.Text = "Combatants shown:";
            this.pLeftView.Controls.Add(this.pTv);
            this.pLeftView.Controls.Add(this.pTvBtns);
            this.pLeftView.Dock = DockStyle.Left;
            this.pLeftView.Location = new Point(0, 0);
            this.pLeftView.Name = "pLeftView";
            this.pLeftView.Padding = new Padding(0, 4, 4, 0);
            this.pLeftView.Size = new Size(0xd7, 0x219);
            this.pLeftView.TabIndex = 15;
            this.pTv.Controls.Add(this.tvDG);
            this.pTv.Dock = DockStyle.Fill;
            this.pTv.Location = new Point(0, 4);
            this.pTv.Name = "pTv";
            this.pTv.Padding = new Padding(0, 1, 0, 0);
            this.pTv.Size = new Size(0xd3, 0x1b5);
            this.pTv.TabIndex = 13;
            this.pTvBtns.Controls.Add(this.tableLayoutPanel11);
            this.pTvBtns.Controls.Add(this.btnMergeChecked);
            this.pTvBtns.Controls.Add(this.btnDeleteChecked);
            this.pTvBtns.Controls.Add(this.cbShowChecks);
            this.pTvBtns.Controls.Add(this.cbLockDG);
            this.pTvBtns.Dock = DockStyle.Bottom;
            this.pTvBtns.Location = new Point(0, 0x1b9);
            this.pTvBtns.Name = "pTvBtns";
            this.pTvBtns.Size = new Size(0xd3, 0x60);
            this.pTvBtns.TabIndex = 12;
            this.tableLayoutPanel11.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            this.tableLayoutPanel11.ColumnCount = 2;
            this.tableLayoutPanel11.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel11.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel11.Controls.Add(this.btnClear, 1, 1);
            this.tableLayoutPanel11.Controls.Add(this.btnEndEnc, 1, 0);
            this.tableLayoutPanel11.Controls.Add(this.btnRefresh, 0, 1);
            this.tableLayoutPanel11.Controls.Add(this.btnCDSearch, 0, 0);
            this.tableLayoutPanel11.Location = new Point(0, 0x2e);
            this.tableLayoutPanel11.Name = "tableLayoutPanel11";
            this.tableLayoutPanel11.RowCount = 2;
            this.tableLayoutPanel11.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel11.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel11.Size = new Size(210, 50);
            this.tableLayoutPanel11.TabIndex = 8;
            this.btnCDSearch.Dock = DockStyle.Fill;
            this.btnCDSearch.Location = new Point(1, 1);
            this.btnCDSearch.Margin = new Padding(1);
            this.btnCDSearch.Name = "btnCDSearch";
            this.btnCDSearch.Size = new Size(0x67, 0x17);
            this.btnCDSearch.TabIndex = 2;
            this.btnCDSearch.Text = "&Search...";
            this.btnCDSearch.Click += new EventHandler(this.btnCDSearch_Click);
            this.btnMergeChecked.FlatStyle = FlatStyle.Popup;
            this.btnMergeChecked.Location = new Point(0x72, 6);
            this.btnMergeChecked.Name = "btnMergeChecked";
            this.btnMergeChecked.Size = new Size(0x60, 20);
            this.btnMergeChecked.TabIndex = 7;
            this.btnMergeChecked.Text = "Merge Checked";
            this.btnMergeChecked.Visible = false;
            this.btnMergeChecked.Click += new EventHandler(this.btnMergeChecked_Click);
            this.btnDeleteChecked.FlatStyle = FlatStyle.Popup;
            this.btnDeleteChecked.Location = new Point(0x12, 6);
            this.btnDeleteChecked.Name = "btnDeleteChecked";
            this.btnDeleteChecked.Size = new Size(0x60, 20);
            this.btnDeleteChecked.TabIndex = 6;
            this.btnDeleteChecked.Text = "Delete Checked";
            this.btnDeleteChecked.Visible = false;
            this.btnDeleteChecked.Click += new EventHandler(this.btnDeleteChecked_Click);
            this.cbShowChecks.Location = new Point(2, 8);
            this.cbShowChecks.Name = "cbShowChecks";
            this.cbShowChecks.Size = new Size(0xd0, 0x10);
            this.cbShowChecks.TabIndex = 0;
            this.cbShowChecks.Text = "Show Checkboxes (Merge/Delete)";
            this.cbShowChecks.CheckedChanged += new EventHandler(this.btnShowChecks_Click);
            this.tpOptions.Controls.Add(this.flpOptionControls);
            this.tpOptions.Controls.Add(this.splitter1);
            this.tpOptions.Controls.Add(this.tableLayoutPanel12);
            this.tpOptions.Location = new Point(4, 0x16);
            this.tpOptions.Name = "tpOptions";
            this.tpOptions.Size = new Size(0x3bf, 0x219);
            this.tpOptions.TabIndex = 10;
            this.tpOptions.Text = "Options";
            this.tpOptions.UseVisualStyleBackColor = true;
            this.flpOptionControls.AutoScroll = true;
            this.flpOptionControls.BorderStyle = BorderStyle.Fixed3D;
            this.flpOptionControls.Controls.Add(this.gbHelp);
            this.flpOptionControls.Dock = DockStyle.Fill;
            this.flpOptionControls.Location = new Point(0xe4, 0);
            this.flpOptionControls.Name = "flpOptionControls";
            this.flpOptionControls.Size = new Size(0x2db, 0x219);
            this.flpOptionControls.TabIndex = 0;
            this.gbHelp.Controls.Add(this.lblHelpText);
            this.gbHelp.Location = new Point(3, 3);
            this.gbHelp.Name = "gbHelp";
            this.gbHelp.Padding = new Padding(8);
            this.gbHelp.Size = new Size(0x1f5, 0x188);
            this.gbHelp.TabIndex = 0x1c;
            this.gbHelp.TabStop = false;
            this.gbHelp.Text = "Help";
            this.lblHelpText.Dock = DockStyle.Fill;
            this.lblHelpText.Location = new Point(8, 0x15);
            this.lblHelpText.Name = "lblHelpText";
            this.lblHelpText.Size = new Size(0x1e5, 0x16b);
            this.lblHelpText.TabIndex = 1;
            this.splitter1.Location = new Point(0xe1, 0);
            this.splitter1.Name = "splitter1";
            this.splitter1.Size = new Size(3, 0x219);
            this.splitter1.TabIndex = 2;
            this.splitter1.TabStop = false;
            this.tableLayoutPanel12.ColumnCount = 2;
            this.tableLayoutPanel12.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100f));
            this.tableLayoutPanel12.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, 60f));
            this.tableLayoutPanel12.Controls.Add(this.tbOptionsSearch, 0, 0);
            this.tableLayoutPanel12.Controls.Add(this.tvOptions, 0, 1);
            this.tableLayoutPanel12.Controls.Add(this.btnOptionSearchClear, 1, 0);
            this.tableLayoutPanel12.Dock = DockStyle.Left;
            this.tableLayoutPanel12.Location = new Point(0, 0);
            this.tableLayoutPanel12.Name = "tableLayoutPanel12";
            this.tableLayoutPanel12.RowCount = 2;
            this.tableLayoutPanel12.RowStyles.Add(new RowStyle(SizeType.Absolute, 24f));
            this.tableLayoutPanel12.RowStyles.Add(new RowStyle());
            this.tableLayoutPanel12.Size = new Size(0xe1, 0x219);
            this.tableLayoutPanel12.TabIndex = 0;
            this.tbOptionsSearch.Dock = DockStyle.Top;
            this.tbOptionsSearch.ForeColor = SystemColors.GrayText;
            this.tbOptionsSearch.Location = new Point(3, 3);
            this.tbOptionsSearch.Name = "tbOptionsSearch";
            this.tbOptionsSearch.Size = new Size(0x9f, 20);
            this.tbOptionsSearch.TabIndex = 2;
            this.tbOptionsSearch.Text = "Search Options...";
            this.tbOptionsSearch.TextChanged += new EventHandler(this.tbOptionsSearch_TextChanged);
            this.tbOptionsSearch.Enter += new EventHandler(this.tbOptionsSearch_Enter);
            this.tbOptionsSearch.Leave += new EventHandler(this.tbOptionsSearch_Leave);
            this.tvOptions.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.tableLayoutPanel12.SetColumnSpan(this.tvOptions, 2);
            this.tvOptions.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.tvOptions.HideSelection = false;
            this.tvOptions.Location = new Point(3, 0x1b);
            this.tvOptions.Name = "tvOptions";
            node.Name = "Node3";
            node.Text = "XML File Import/Export";
            node2.Name = "Node1";
            node2.Text = "XML Share Snippets";
            node3.Name = "Node2";
            node3.Text = "XML Config Subscriptions";
            node4.Name = "Node0";
            node4.Text = "Configuration Import/Export";
            node5.Name = "Node5";
            node5.Text = "General";
            node6.Name = "Node6";
            node6.Text = "Monochrome";
            node7.Name = "Node7";
            node7.Text = "Color";
            node8.Name = "Node4";
            node8.Text = "Logitech LCD Display";
            this.tvOptions.Nodes.AddRange(new TreeNode[] { node4, node8 });
            this.tvOptions.Size = new Size(0xdb, 0x1fb);
            this.tvOptions.TabIndex = 0;
            this.tvOptions.AfterSelect += new TreeViewEventHandler(this.tvOptions_AfterSelect);
            this.btnOptionSearchClear.Dock = DockStyle.Fill;
            this.btnOptionSearchClear.Location = new Point(0xa6, 1);
            this.btnOptionSearchClear.Margin = new Padding(1);
            this.btnOptionSearchClear.Name = "btnOptionSearchClear";
            this.btnOptionSearchClear.Size = new Size(0x3a, 0x16);
            this.btnOptionSearchClear.TabIndex = 3;
            this.btnOptionSearchClear.Text = "Clear";
            this.btnOptionSearchClear.UseVisualStyleBackColor = false;
            this.btnOptionSearchClear.Click += new EventHandler(this.btnOptionSearchClear_Click);
            this.tpTriggers.Controls.Add(this.tcTriggers);
            this.tpTriggers.Location = new Point(4, 0x16);
            this.tpTriggers.Name = "tpTriggers";
            this.tpTriggers.Size = new Size(0x3bf, 0x219);
            this.tpTriggers.TabIndex = 5;
            this.tpTriggers.Text = "Custom Triggers";
            this.tpTriggers.UseVisualStyleBackColor = true;
            this.tcTriggers.Controls.Add(this.tabPage0);
            this.tcTriggers.Dock = DockStyle.Fill;
            this.tcTriggers.ImageList = this.ilTriggerTabs;
            this.tcTriggers.Location = new Point(0, 0);
            this.tcTriggers.Multiline = true;
            this.tcTriggers.Name = "tcTriggers";
            this.tcTriggers.SelectedIndex = 0;
            this.tcTriggers.Size = new Size(0x3bf, 0x219);
            this.tcTriggers.TabIndex = 1;
            this.tabPage0.Controls.Add(this.tvCustomTriggers);
            this.tabPage0.Controls.Add(this.flowLayoutPanel1);
            this.tabPage0.Controls.Add(this.panel8);
            this.tabPage0.Controls.Add(this.btnAddTrigger);
            this.tabPage0.Controls.Add(this.btnRemoveTrigger);
            this.tabPage0.Controls.Add(this.tbTriggerText);
            this.tabPage0.Controls.Add(this.linkRegex);
            this.tabPage0.Location = new Point(4, 0x17);
            this.tabPage0.Name = "tabPage0";
            this.tabPage0.Padding = new Padding(3);
            this.tabPage0.Size = new Size(0x3b7, 510);
            this.tabPage0.TabIndex = 0;
            this.tabPage0.Text = "Triggers";
            this.tabPage0.UseVisualStyleBackColor = true;
            this.tvCustomTriggers.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.tvCustomTriggers.CheckBoxes = true;
            this.tvCustomTriggers.ContextMenuStrip = this.cmsCustomTrigger;
            this.tvCustomTriggers.Font = new Font("Lucida Console", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.tvCustomTriggers.FullRowSelect = true;
            this.tvCustomTriggers.HideSelection = false;
            this.tvCustomTriggers.Location = new Point(0, 0x49);
            this.tvCustomTriggers.Name = "tvCustomTriggers";
            this.tvCustomTriggers.Size = new Size(0x3b3, 0x1b5);
            this.tvCustomTriggers.TabIndex = 0x25;
            this.tvCustomTriggers.AfterCheck += new TreeViewEventHandler(this.tvCustomTriggers_AfterCheck);
            this.tvCustomTriggers.AfterSelect += new TreeViewEventHandler(this.tvCustomTriggers_AfterSelect);
            this.cmsCustomTrigger.Items.AddRange(new ToolStripItem[] { this.copyAsSharableXMLToolStripMenuItem, this.copyAsSharableXMLToolStripMenuItem2 });
            this.cmsCustomTrigger.Name = "cmsCustomTrigger";
            this.cmsCustomTrigger.Size = new Size(0x11c, 0x30);
            this.cmsCustomTrigger.Opening += new CancelEventHandler(this.cmsCustomTrigger_Opening);
            this.copyAsSharableXMLToolStripMenuItem.Enabled = false;
            this.copyAsSharableXMLToolStripMenuItem.Name = "copyAsSharableXMLToolStripMenuItem";
            this.copyAsSharableXMLToolStripMenuItem.Size = new Size(0x11b, 0x16);
            this.copyAsSharableXMLToolStripMenuItem.Text = "Copy as Sharable XML";
            this.copyAsSharableXMLToolStripMenuItem.ToolTipText = "Paste into chat for other copies of ACT to import";
            this.copyAsSharableXMLToolStripMenuItem.Click += new EventHandler(this.copyAsSharableXMLToolStripMenuItem_Click);
            this.copyAsSharableXMLToolStripMenuItem2.Enabled = false;
            this.copyAsSharableXMLToolStripMenuItem2.Name = "copyAsSharableXMLToolStripMenuItem2";
            this.copyAsSharableXMLToolStripMenuItem2.Size = new Size(0x11b, 0x16);
            this.copyAsSharableXMLToolStripMenuItem2.Text = "Copy as Double-Encoded Sharable XML";
            this.copyAsSharableXMLToolStripMenuItem2.ToolTipText = "Paste into Forums for other copies of ACT to import";
            this.copyAsSharableXMLToolStripMenuItem2.Click += new EventHandler(this.copyAsSharableXMLToolStripMenuItem2_Click);
            this.flowLayoutPanel1.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            this.flowLayoutPanel1.Controls.Add(this.label90);
            this.flowLayoutPanel1.Controls.Add(this.tbTriggerCategory);
            this.flowLayoutPanel1.Controls.Add(this.cbTriggerCategoryRestrict);
            this.flowLayoutPanel1.Controls.Add(this.label91);
            this.flowLayoutPanel1.Controls.Add(this.tbTriggerTimer);
            this.flowLayoutPanel1.Controls.Add(this.cbTriggerTimer);
            this.flowLayoutPanel1.Controls.Add(this.cbTriggerTabbed);
            this.flowLayoutPanel1.Location = new Point(0, 0x2f);
            this.flowLayoutPanel1.Name = "flowLayoutPanel1";
            this.flowLayoutPanel1.Size = new Size(0x3b7, 0x1a);
            this.flowLayoutPanel1.TabIndex = 8;
            this.label90.AutoSize = true;
            this.label90.Location = new Point(3, 0);
            this.label90.Name = "label90";
            this.label90.Padding = new Padding(0, 5, 3, 0);
            this.label90.Size = new Size(0x34, 0x12);
            this.label90.TabIndex = 0;
            this.label90.Text = "Category";
            this.label90.TextAlign = ContentAlignment.MiddleLeft;
            this.tbTriggerCategory.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            this.tbTriggerCategory.Location = new Point(0x3d, 3);
            this.tbTriggerCategory.Name = "tbTriggerCategory";
            this.tbTriggerCategory.Size = new Size(0xe1, 20);
            this.tbTriggerCategory.TabIndex = 1;
            this.cbTriggerCategoryRestrict.AutoSize = true;
            this.cbTriggerCategoryRestrict.ForeColor = System.Drawing.Color.Blue;
            this.cbTriggerCategoryRestrict.Location = new Point(0x124, 3);
            this.cbTriggerCategoryRestrict.Name = "cbTriggerCategoryRestrict";
            this.cbTriggerCategoryRestrict.Padding = new Padding(0, 1, 0, 0);
            this.cbTriggerCategoryRestrict.Size = new Size(0x93, 0x12);
            this.cbTriggerCategoryRestrict.TabIndex = 7;
            this.cbTriggerCategoryRestrict.Text = "Restrict to Category Zone";
            this.toolTip1.SetToolTip(this.cbTriggerCategoryRestrict, "If the Category label doesn't match the current zone, the Custom Trigger will not be checked");
            this.cbTriggerCategoryRestrict.UseVisualStyleBackColor = true;
            this.label91.AutoSize = true;
            this.label91.Location = new Point(0x1bd, 0);
            this.label91.Name = "label91";
            this.label91.Padding = new Padding(5, 5, 0, 0);
            this.label91.Size = new Size(0x65, 0x12);
            this.label91.TabIndex = 8;
            this.label91.Text = "Timer or Tab name";
            this.label91.TextAlign = ContentAlignment.MiddleLeft;
            this.tbTriggerTimer.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            this.tbTriggerTimer.Location = new Point(0x228, 3);
            this.tbTriggerTimer.Name = "tbTriggerTimer";
            this.tbTriggerTimer.Size = new Size(0x6a, 20);
            this.tbTriggerTimer.TabIndex = 5;
            this.cbTriggerTimer.AutoSize = true;
            this.cbTriggerTimer.Location = new Point(0x298, 3);
            this.cbTriggerTimer.Name = "cbTriggerTimer";
            this.cbTriggerTimer.Padding = new Padding(0, 1, 0, 0);
            this.cbTriggerTimer.Size = new Size(0x54, 0x12);
            this.cbTriggerTimer.TabIndex = 4;
            this.cbTriggerTimer.Text = "Trigger timer";
            this.toolTip1.SetToolTip(this.cbTriggerTimer, "When the Custom Trigger matches log text, the specified spell timer will be activated, if it exists");
            this.cbTriggerTabbed.AutoSize = true;
            this.cbTriggerTabbed.Location = new Point(0x2f2, 3);
            this.cbTriggerTabbed.Name = "cbTriggerTabbed";
            this.cbTriggerTabbed.Padding = new Padding(0, 1, 0, 0);
            this.cbTriggerTabbed.Size = new Size(0x69, 0x12);
            this.cbTriggerTabbed.TabIndex = 6;
            this.cbTriggerTabbed.Text = "Add Results Tab";
            this.toolTip1.SetToolTip(this.cbTriggerTabbed, "A tab of matching log lines will be created");
            this.panel8.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            this.panel8.Controls.Add(this.btnSndTriggerBrowse);
            this.panel8.Controls.Add(this.btnSndTriggerPlay);
            this.panel8.Controls.Add(this.rbSndTriggerTTS);
            this.panel8.Controls.Add(this.rbSndTriggerWAV);
            this.panel8.Controls.Add(this.label40);
            this.panel8.Controls.Add(this.rbSndTriggerBeep);
            this.panel8.Controls.Add(this.rbSndTriggerNone);
            this.panel8.Controls.Add(this.tbSndTrigger);
            this.panel8.Location = new Point(0, 2);
            this.panel8.Name = "panel8";
            this.panel8.Size = new Size(0x313, 0x18);
            this.panel8.TabIndex = 4;
            this.btnSndTriggerBrowse.Anchor = AnchorStyles.Right | AnchorStyles.Top;
            this.btnSndTriggerBrowse.Location = new Point(0x2d3, 0);
            this.btnSndTriggerBrowse.Name = "btnSndTriggerBrowse";
            this.btnSndTriggerBrowse.Size = new Size(0x18, 0x17);
            this.btnSndTriggerBrowse.TabIndex = 6;
            this.btnSndTriggerBrowse.Text = "...";
            this.btnSndTriggerBrowse.Click += new EventHandler(this.btnSndTriggerBrowse_Click);
            this.btnSndTriggerPlay.Anchor = AnchorStyles.Right | AnchorStyles.Top;
            this.btnSndTriggerPlay.Image = Resources.play;
            this.btnSndTriggerPlay.Location = new Point(0x2eb, 0);
            this.btnSndTriggerPlay.Name = "btnSndTriggerPlay";
            this.btnSndTriggerPlay.Size = new Size(40, 0x17);
            this.btnSndTriggerPlay.TabIndex = 7;
            this.btnSndTriggerPlay.Click += new EventHandler(this.btnSndTriggerPlay_Click);
            this.rbSndTriggerTTS.FlatStyle = FlatStyle.System;
            this.rbSndTriggerTTS.Location = new Point(0xff, 0);
            this.rbSndTriggerTTS.Name = "rbSndTriggerTTS";
            this.rbSndTriggerTTS.Size = new Size(0x2c, 0x18);
            this.rbSndTriggerTTS.TabIndex = 3;
            this.rbSndTriggerTTS.Text = "TTS:";
            this.rbSndTriggerTTS.CheckedChanged += new EventHandler(this.tbSndTrigger_Update);
            this.rbSndTriggerWAV.FlatStyle = FlatStyle.System;
            this.rbSndTriggerWAV.Location = new Point(0xcb, 0);
            this.rbSndTriggerWAV.Name = "rbSndTriggerWAV";
            this.rbSndTriggerWAV.Size = new Size(50, 0x18);
            this.rbSndTriggerWAV.TabIndex = 2;
            this.rbSndTriggerWAV.Text = "WAV:";
            this.rbSndTriggerWAV.CheckedChanged += new EventHandler(this.tbSndTrigger_Update);
            this.label40.Location = new Point(0, 0);
            this.label40.Name = "label40";
            this.label40.Size = new Size(0x60, 0x18);
            this.label40.TabIndex = 0x21;
            this.label40.Text = "Custom trigger:";
            this.label40.TextAlign = ContentAlignment.MiddleLeft;
            this.rbSndTriggerBeep.FlatStyle = FlatStyle.System;
            this.rbSndTriggerBeep.Location = new Point(0x98, 0);
            this.rbSndTriggerBeep.Name = "rbSndTriggerBeep";
            this.rbSndTriggerBeep.Size = new Size(0x2f, 0x18);
            this.rbSndTriggerBeep.TabIndex = 1;
            this.rbSndTriggerBeep.Text = "Beep";
            this.rbSndTriggerBeep.CheckedChanged += new EventHandler(this.tbSndTrigger_Update);
            this.rbSndTriggerNone.Checked = true;
            this.rbSndTriggerNone.FlatStyle = FlatStyle.System;
            this.rbSndTriggerNone.Location = new Point(0x60, 0);
            this.rbSndTriggerNone.Name = "rbSndTriggerNone";
            this.rbSndTriggerNone.Size = new Size(0x34, 0x18);
            this.rbSndTriggerNone.TabIndex = 0;
            this.rbSndTriggerNone.TabStop = true;
            this.rbSndTriggerNone.Text = "None";
            this.rbSndTriggerNone.CheckedChanged += new EventHandler(this.tbSndTrigger_Update);
            this.tbSndTrigger.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            this.tbSndTrigger.Enabled = false;
            this.tbSndTrigger.Location = new Point(300, 0);
            this.tbSndTrigger.Name = "tbSndTrigger";
            this.tbSndTrigger.Size = new Size(0x1a1, 20);
            this.tbSndTrigger.TabIndex = 5;
            this.tbSndTrigger.TextChanged += new EventHandler(this.tbSndTrigger_Update);
            this.btnAddTrigger.Anchor = AnchorStyles.Right | AnchorStyles.Top;
            this.btnAddTrigger.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.btnAddTrigger.Location = new Point(0x31d, 2);
            this.btnAddTrigger.Name = "btnAddTrigger";
            this.btnAddTrigger.Size = new Size(0x4b, 0x17);
            this.btnAddTrigger.TabIndex = 0;
            this.btnAddTrigger.Text = "Add/Edit";
            this.btnAddTrigger.Click += new EventHandler(this.btnAddTrigger_Click);
            this.btnRemoveTrigger.Anchor = AnchorStyles.Right | AnchorStyles.Top;
            this.btnRemoveTrigger.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.btnRemoveTrigger.Location = new Point(0x368, 2);
            this.btnRemoveTrigger.Name = "btnRemoveTrigger";
            this.btnRemoveTrigger.Size = new Size(0x4b, 0x17);
            this.btnRemoveTrigger.TabIndex = 1;
            this.btnRemoveTrigger.Text = "Remove";
            this.btnRemoveTrigger.Click += new EventHandler(this.btnRemoveTrigger_Click);
            this.tbTriggerText.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            this.tbTriggerText.Font = new Font("Lucida Console", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.tbTriggerText.Location = new Point(0x76, 0x1a);
            this.tbTriggerText.Name = "tbTriggerText";
            this.tbTriggerText.Size = new Size(0x33d, 0x13);
            this.tbTriggerText.TabIndex = 3;
            this.tbTriggerText.Text = ".*?Text to match.*";
            this.linkRegex.Location = new Point(0, 0x1a);
            this.linkRegex.Name = "linkRegex";
            this.linkRegex.Size = new Size(0x70, 0x10);
            this.linkRegex.TabIndex = 2;
            this.linkRegex.TabStop = true;
            this.linkRegex.Text = "Regular Expression:";
            this.linkRegex.TextAlign = ContentAlignment.BottomLeft;
            this.linkRegex.LinkClicked += new LinkLabelLinkClickedEventHandler(this.linkRegex_LinkClicked);
            this.ilTriggerTabs.ImageStream = (ImageListStreamer) manager.GetObject("ilTriggerTabs.ImageStream");
            this.ilTriggerTabs.TransparentColor = System.Drawing.Color.Transparent;
            this.ilTriggerTabs.Images.SetKeyName(0, "tpAge0.png");
            this.ilTriggerTabs.Images.SetKeyName(1, "tpAge1.png");
            this.ilTriggerTabs.Images.SetKeyName(2, "tpAge2.png");
            this.ilTriggerTabs.Images.SetKeyName(3, "tpAge3.png");
            this.ilTriggerTabs.Images.SetKeyName(4, "tpAge4.png");
            this.ilTriggerTabs.Images.SetKeyName(5, "tpAge5.png");
            this.ilTriggerTabs.Images.SetKeyName(6, "tpAge6.png");
            this.tpPlugins.Controls.Add(this.tcPlugins);
            this.tpPlugins.Location = new Point(4, 0x16);
            this.tpPlugins.Name = "tpPlugins";
            this.tpPlugins.Padding = new Padding(3);
            this.tpPlugins.Size = new Size(0x3bf, 0x219);
            this.tpPlugins.TabIndex = 7;
            this.tpPlugins.Text = "Plugins";
            this.tpPlugins.UseVisualStyleBackColor = true;
            this.tcPlugins.Controls.Add(this.tabPage1);
            this.tcPlugins.Dock = DockStyle.Fill;
            this.tcPlugins.Location = new Point(3, 3);
            this.tcPlugins.Multiline = true;
            this.tcPlugins.Name = "tcPlugins";
            this.tcPlugins.SelectedIndex = 0;
            this.tcPlugins.Size = new Size(0x3b9, 0x213);
            this.tcPlugins.TabIndex = 0;
            this.tabPage1.Controls.Add(this.groupBox3);
            this.tabPage1.Controls.Add(this.panel15);
            this.tabPage1.Controls.Add(this.pPluginInfos);
            this.tabPage1.Location = new Point(4, 0x16);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new Padding(3);
            this.tabPage1.Size = new Size(0x3b1, 0x1f9);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Plugin Listing";
            this.tabPage1.UseVisualStyleBackColor = true;
            this.groupBox3.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.groupBox3.Controls.Add(this.linkLabelGetPlugins);
            this.groupBox3.Controls.Add(this.rtbPluginInfo);
            this.groupBox3.Location = new Point(0x21f, 3);
            this.groupBox3.Name = "groupBox3";
            this.groupBox3.Size = new Size(0x18c, 0x1f0);
            this.groupBox3.TabIndex = 1;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = "Plugin Info";
            this.linkLabelGetPlugins.Anchor = AnchorStyles.Right | AnchorStyles.Top;
            this.linkLabelGetPlugins.AutoSize = true;
            this.linkLabelGetPlugins.Location = new Point(0x148, 0);
            this.linkLabelGetPlugins.Name = "linkLabelGetPlugins";
            this.linkLabelGetPlugins.Size = new Size(0x3d, 13);
            this.linkLabelGetPlugins.TabIndex = 1;
            this.linkLabelGetPlugins.TabStop = true;
            this.linkLabelGetPlugins.Text = "Get Plugins";
            this.linkLabelGetPlugins.LinkClicked += new LinkLabelLinkClickedEventHandler(this.linkLabelGetPlugins_LinkClicked);
            this.rtbPluginInfo.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.rtbPluginInfo.DetectUrls = false;
            this.rtbPluginInfo.Location = new Point(6, 0x13);
            this.rtbPluginInfo.Name = "rtbPluginInfo";
            this.rtbPluginInfo.ReadOnly = true;
            this.rtbPluginInfo.Size = new Size(0x17f, 0x1d7);
            this.rtbPluginInfo.TabIndex = 0;
            this.rtbPluginInfo.Text = "";
            this.panel15.Controls.Add(this.btnAddPluginPanel);
            this.panel15.Controls.Add(this.tbPluginPath);
            this.panel15.Controls.Add(this.btnPluginBrowse);
            this.panel15.Controls.Add(this.lblPluginFileInfo);
            this.panel15.Location = new Point(3, 3);
            this.panel15.Name = "panel15";
            this.panel15.Size = new Size(0x216, 0x41);
            this.panel15.TabIndex = 4;
            this.btnAddPluginPanel.Location = new Point(0x1c8, 0x1c);
            this.btnAddPluginPanel.Name = "btnAddPluginPanel";
            this.btnAddPluginPanel.Size = new Size(0x4b, 0x22);
            this.btnAddPluginPanel.TabIndex = 1;
            this.btnAddPluginPanel.Text = "Add/Enable Plugin";
            this.btnAddPluginPanel.UseMnemonic = false;
            this.btnAddPluginPanel.UseVisualStyleBackColor = true;
            this.btnAddPluginPanel.Click += new EventHandler(this.btnAddPluginPanel_Click);
            this.tbPluginPath.Location = new Point(3, 5);
            this.tbPluginPath.Name = "tbPluginPath";
            this.tbPluginPath.ReadOnly = true;
            this.tbPluginPath.Size = new Size(0x1bf, 20);
            this.tbPluginPath.TabIndex = 2;
            this.btnPluginBrowse.Location = new Point(0x1c8, 3);
            this.btnPluginBrowse.Name = "btnPluginBrowse";
            this.btnPluginBrowse.Size = new Size(0x4b, 0x17);
            this.btnPluginBrowse.TabIndex = 0;
            this.btnPluginBrowse.Text = "Browse...";
            this.btnPluginBrowse.UseVisualStyleBackColor = true;
            this.btnPluginBrowse.Click += new EventHandler(this.btnPluginBrowse_Click);
            this.lblPluginFileInfo.Location = new Point(4, 0x1c);
            this.lblPluginFileInfo.Name = "lblPluginFileInfo";
            this.lblPluginFileInfo.Size = new Size(0x1be, 0x22);
            this.lblPluginFileInfo.TabIndex = 3;
            this.pPluginInfos.Anchor = AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.pPluginInfos.AutoScroll = true;
            this.pPluginInfos.BackColor = System.Drawing.Color.White;
            this.pPluginInfos.BorderStyle = BorderStyle.Fixed3D;
            this.pPluginInfos.Location = new Point(3, 0x4a);
            this.pPluginInfos.Name = "pPluginInfos";
            this.pPluginInfos.Size = new Size(0x216, 0x1ac);
            this.pPluginInfos.TabIndex = 0;
            this.tpImportExport.Controls.Add(this.flpIoControls);
            this.tpImportExport.Controls.Add(this.splitter2);
            this.tpImportExport.Controls.Add(this.tvIo);
            this.tpImportExport.Location = new Point(4, 0x16);
            this.tpImportExport.Name = "tpImportExport";
            this.tpImportExport.Size = new Size(0x3bf, 0x219);
            this.tpImportExport.TabIndex = 11;
            this.tpImportExport.Text = "Import/Export";
            this.tpImportExport.UseVisualStyleBackColor = true;
            this.flpIoControls.AutoScroll = true;
            this.flpIoControls.BorderStyle = BorderStyle.Fixed3D;
            this.flpIoControls.Controls.Add(this.gbIoHelp);
            this.flpIoControls.Dock = DockStyle.Fill;
            this.flpIoControls.Location = new Point(0xde, 0);
            this.flpIoControls.Name = "flpIoControls";
            this.flpIoControls.Size = new Size(0x2e1, 0x219);
            this.flpIoControls.TabIndex = 2;
            this.gbIoHelp.Controls.Add(this.lblIoHelp);
            this.gbIoHelp.Location = new Point(3, 3);
            this.gbIoHelp.Name = "gbIoHelp";
            this.gbIoHelp.Padding = new Padding(8);
            this.gbIoHelp.Size = new Size(0x1f5, 0x188);
            this.gbIoHelp.TabIndex = 0x1d;
            this.gbIoHelp.TabStop = false;
            this.gbIoHelp.Text = "Help";
            this.lblIoHelp.Dock = DockStyle.Fill;
            this.lblIoHelp.Location = new Point(8, 0x15);
            this.lblIoHelp.Name = "lblIoHelp";
            this.lblIoHelp.Size = new Size(0x1e5, 0x16b);
            this.lblIoHelp.TabIndex = 1;
            this.splitter2.Location = new Point(0xdb, 0);
            this.splitter2.Name = "splitter2";
            this.splitter2.Size = new Size(3, 0x219);
            this.splitter2.TabIndex = 1;
            this.splitter2.TabStop = false;
            this.tvIo.Dock = DockStyle.Left;
            this.tvIo.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.tvIo.HideSelection = false;
            this.tvIo.Location = new Point(0, 0);
            this.tvIo.Name = "tvIo";
            node9.Name = "Node1";
            node9.Text = "Import a Log File";
            node10.Name = "Node3";
            node10.Text = "Import the Clipboard";
            node11.Name = "Node4";
            node11.Text = "Import an *.act File";
            node12.Name = "Node0";
            node12.Text = "Import Encounters";
            node13.Name = "Node5";
            node13.Text = "Export to an *.act File";
            node14.Name = "Node6";
            node14.Text = "Export to an HTML Page";
            node15.Name = "Node7";
            node15.Text = "Export to SQL/ODBC";
            node16.Name = "Node8";
            node16.Text = "Export to an XML File";
            node17.Name = "Node2";
            node17.Text = "Export Encounters";
            this.tvIo.Nodes.AddRange(new TreeNode[] { node12, node17 });
            this.tvIo.Size = new Size(0xdb, 0x219);
            this.tvIo.TabIndex = 0;
            this.tvIo.AfterSelect += new TreeViewEventHandler(this.tvIo_AfterSelect);
            this.tpHistory.Controls.Add(this.groupBox5);
            this.tpHistory.Controls.Add(this.groupBox27);
            this.tpHistory.Controls.Add(this.groupBox4);
            this.tpHistory.Location = new Point(4, 0x16);
            this.tpHistory.Name = "tpHistory";
            this.tpHistory.Size = new Size(0x3bf, 0x219);
            this.tpHistory.TabIndex = 8;
            this.tpHistory.Text = "History Database";
            this.tpHistory.UseVisualStyleBackColor = true;
            this.groupBox5.Controls.Add(this.label76);
            this.groupBox5.Controls.Add(this.nudHistoryDelete);
            this.groupBox5.Controls.Add(this.btnHistoryDelete);
            this.groupBox5.Controls.Add(this.label73);
            this.groupBox5.Controls.Add(this.cbRecordsSave);
            this.groupBox5.Location = new Point(3, 0x146);
            this.groupBox5.Name = "groupBox5";
            this.groupBox5.Size = new Size(0x165, 120);
            this.groupBox5.TabIndex = 1;
            this.groupBox5.TabStop = false;
            this.groupBox5.Text = "Management";
            this.label76.AutoSize = true;
            this.label76.Location = new Point(0x135, 0x5d);
            this.label76.Name = "label76";
            this.label76.Size = new Size(0x1d, 13);
            this.label76.TabIndex = 3;
            this.label76.Text = "days";
            this.nudHistoryDelete.Location = new Point(0xfc, 90);
            int[] bits = new int[4];
            bits[0] = 0x16d;
            this.nudHistoryDelete.Maximum = new decimal(bits);
            this.nudHistoryDelete.Name = "nudHistoryDelete";
            this.nudHistoryDelete.Size = new Size(0x36, 20);
            this.nudHistoryDelete.TabIndex = 2;
            int[] numArray2 = new int[4];
            numArray2[0] = 0x1c;
            this.nudHistoryDelete.Value = new decimal(numArray2);
            this.btnHistoryDelete.Location = new Point(6, 0x58);
            this.btnHistoryDelete.Name = "btnHistoryDelete";
            this.btnHistoryDelete.Size = new Size(240, 0x17);
            this.btnHistoryDelete.TabIndex = 1;
            this.btnHistoryDelete.Text = "Delete history older than a specified amount:";
            this.btnHistoryDelete.UseVisualStyleBackColor = false;
            this.btnHistoryDelete.Click += new EventHandler(this.btnHistoryDelete_Click);
            this.label73.Location = new Point(6, 0x27);
            this.label73.Name = "label73";
            this.label73.Size = new Size(0x156, 0x2e);
            this.label73.TabIndex = 1;
            this.label73.Text = "If checked, ACT will save session records to file and load them on start-up.   Enabling this feature will automatically load a previously saved database file.";
            this.cbRecordsSave.AutoSize = true;
            this.cbRecordsSave.Checked = true;
            this.cbRecordsSave.CheckState = CheckState.Checked;
            this.cbRecordsSave.Location = new Point(6, 0x13);
            this.cbRecordsSave.Name = "cbRecordsSave";
            this.cbRecordsSave.Size = new Size(130, 0x11);
            this.cbRecordsSave.TabIndex = 0;
            this.cbRecordsSave.Text = "Enable History Saving";
            this.cbRecordsSave.UseVisualStyleBackColor = true;
            this.cbRecordsSave.CheckedChanged += new EventHandler(this.cbRecordsSave_CheckedChanged);
            this.groupBox27.Anchor = AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.groupBox27.Controls.Add(this.btnRecordsSelectZones);
            this.groupBox27.Controls.Add(this.btnRecordsSelectEncs);
            this.groupBox27.Controls.Add(this.btnRecordsDelete);
            this.groupBox27.Controls.Add(this.btnRecordsImport);
            this.groupBox27.Controls.Add(this.clbRecordResults);
            this.groupBox27.Location = new Point(0x16e, 3);
            this.groupBox27.Name = "groupBox27";
            this.groupBox27.Size = new Size(0x1ba, 0x213);
            this.groupBox27.TabIndex = 2;
            this.groupBox27.TabStop = false;
            this.groupBox27.Text = "Search Results";
            this.btnRecordsSelectZones.Anchor = AnchorStyles.Left | AnchorStyles.Bottom;
            this.btnRecordsSelectZones.Font = new Font("Microsoft Sans Serif", 6.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.btnRecordsSelectZones.Location = new Point(0x128, 0x1f1);
            this.btnRecordsSelectZones.Name = "btnRecordsSelectZones";
            this.btnRecordsSelectZones.Size = new Size(140, 0x10);
            this.btnRecordsSelectZones.TabIndex = 3;
            this.btnRecordsSelectZones.Text = "Check Listed Zones";
            this.btnRecordsSelectZones.Click += new EventHandler(this.btnRecordsSelectZones_Click);
            this.btnRecordsSelectEncs.Anchor = AnchorStyles.Left | AnchorStyles.Bottom;
            this.btnRecordsSelectEncs.Font = new Font("Microsoft Sans Serif", 6.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.btnRecordsSelectEncs.Location = new Point(0x128, 0x201);
            this.btnRecordsSelectEncs.Name = "btnRecordsSelectEncs";
            this.btnRecordsSelectEncs.Size = new Size(140, 0x10);
            this.btnRecordsSelectEncs.TabIndex = 4;
            this.btnRecordsSelectEncs.Text = "Check Listed Encounters";
            this.btnRecordsSelectEncs.Click += new EventHandler(this.btnRecordsSelectEncs_Click);
            this.btnRecordsDelete.Anchor = AnchorStyles.Left | AnchorStyles.Bottom;
            this.btnRecordsDelete.Location = new Point(0x97, 0x1f6);
            this.btnRecordsDelete.Name = "btnRecordsDelete";
            this.btnRecordsDelete.Size = new Size(0x8b, 0x17);
            this.btnRecordsDelete.TabIndex = 2;
            this.btnRecordsDelete.Text = "Delete Checked Records";
            this.btnRecordsDelete.UseVisualStyleBackColor = true;
            this.btnRecordsDelete.Click += new EventHandler(this.btnRecordsDelete_Click);
            this.btnRecordsImport.Anchor = AnchorStyles.Left | AnchorStyles.Bottom;
            this.btnRecordsImport.Location = new Point(6, 0x1f6);
            this.btnRecordsImport.Name = "btnRecordsImport";
            this.btnRecordsImport.Size = new Size(0x8b, 0x17);
            this.btnRecordsImport.TabIndex = 1;
            this.btnRecordsImport.Text = "Import Checked";
            this.btnRecordsImport.UseVisualStyleBackColor = true;
            this.btnRecordsImport.Click += new EventHandler(this.btnRecordsImport_Click);
            this.clbRecordResults.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.clbRecordResults.IntegralHeight = false;
            this.clbRecordResults.Location = new Point(6, 0x13);
            this.clbRecordResults.Name = "clbRecordResults";
            this.clbRecordResults.Size = new Size(430, 0x1dd);
            this.clbRecordResults.TabIndex = 0;
            this.clbRecordResults.ThreeDCheckBoxes = true;
            this.clbRecordResults.SelectedIndexChanged += new EventHandler(this.clbRecordResults_SelectedIndexChanged);
            this.groupBox4.Controls.Add(this.tableLayoutPanel10);
            this.groupBox4.Controls.Add(this.label75);
            this.groupBox4.Controls.Add(this.label74);
            this.groupBox4.Controls.Add(this.panel14);
            this.groupBox4.Controls.Add(this.tableLayoutPanel9);
            this.groupBox4.Controls.Add(this.tableLayoutPanel8);
            this.groupBox4.Controls.Add(this.cbRecordSearchEncs);
            this.groupBox4.Controls.Add(this.cbRecordSearchZones);
            this.groupBox4.Controls.Add(this.btnRecordSearchDateTime);
            this.groupBox4.Controls.Add(this.btnRecordSearchText);
            this.groupBox4.Controls.Add(this.tbRecordSearchText);
            this.groupBox4.Location = new Point(3, 3);
            this.groupBox4.Name = "groupBox4";
            this.groupBox4.Size = new Size(0x165, 0x13d);
            this.groupBox4.TabIndex = 0;
            this.groupBox4.TabStop = false;
            this.groupBox4.Text = "Search History";
            this.tableLayoutPanel10.ColumnCount = 2;
            this.tableLayoutPanel10.ColumnStyles.Add(new ColumnStyle());
            this.tableLayoutPanel10.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100f));
            this.tableLayoutPanel10.Controls.Add(this.mcRecords, 0, 0);
            this.tableLayoutPanel10.Controls.Add(this.label72, 1, 0);
            this.tableLayoutPanel10.Location = new Point(9, 0x8d);
            this.tableLayoutPanel10.Name = "tableLayoutPanel10";
            this.tableLayoutPanel10.RowCount = 1;
            this.tableLayoutPanel10.RowStyles.Add(new RowStyle(SizeType.Percent, 100f));
            this.tableLayoutPanel10.Size = new Size(0x153, 170);
            this.tableLayoutPanel10.TabIndex = 11;
            this.mcRecords.Dock = DockStyle.Fill;
            this.mcRecords.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.mcRecords.Location = new Point(2, 9);
            this.mcRecords.Margin = new Padding(2, 9, 2, 9);
            this.mcRecords.MaxSelectionCount = 0x16d;
            this.mcRecords.Name = "mcRecords";
            this.mcRecords.TabIndex = 5;
            this.mcRecords.DateChanged += new DateRangeEventHandler(this.mcRecords_DateChanged);
            this.label72.BorderStyle = BorderStyle.Fixed3D;
            this.label72.Dock = DockStyle.Fill;
            this.label72.Location = new Point(0xea, 0);
            this.label72.Name = "label72";
            this.label72.Size = new Size(0x66, 170);
            this.label72.TabIndex = 1;
            this.label72.Text = "Search results will have bold dates in the calendar.\r\n\r\nSelecting a date or range in the calendar, or an entry in the Search results will select that Date/Time range with the pickers.";
            this.label72.TextAlign = ContentAlignment.MiddleCenter;
            this.label75.AutoSize = true;
            this.label75.Location = new Point(6, 0x76);
            this.label75.Name = "label75";
            this.label75.Size = new Size(0x1a, 13);
            this.label75.TabIndex = 10;
            this.label75.Text = "End";
            this.label74.AutoSize = true;
            this.label74.Location = new Point(6, 0x5b);
            this.label74.Name = "label74";
            this.label74.Size = new Size(0x1d, 13);
            this.label74.TabIndex = 10;
            this.label74.Text = "Start";
            this.panel14.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Top;
            this.panel14.BorderStyle = BorderStyle.Fixed3D;
            this.panel14.Location = new Point(6, 0x44);
            this.panel14.Name = "panel14";
            this.panel14.Size = new Size(0x156, 10);
            this.panel14.TabIndex = 9;
            this.tableLayoutPanel9.ColumnCount = 2;
            this.tableLayoutPanel9.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel9.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel9.Controls.Add(this.dtRecordEndDate, 0, 0);
            this.tableLayoutPanel9.Controls.Add(this.dtRecordEndTime, 1, 0);
            this.tableLayoutPanel9.Location = new Point(0x40, 0x6f);
            this.tableLayoutPanel9.Margin = new Padding(0);
            this.tableLayoutPanel9.Name = "tableLayoutPanel9";
            this.tableLayoutPanel9.RowCount = 1;
            this.tableLayoutPanel9.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel9.Size = new Size(200, 0x1b);
            this.tableLayoutPanel9.TabIndex = 8;
            this.dtRecordEndDate.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.dtRecordEndDate.Checked = false;
            this.dtRecordEndDate.CustomFormat = "";
            this.dtRecordEndDate.Format = DateTimePickerFormat.Short;
            this.dtRecordEndDate.Location = new Point(3, 3);
            this.dtRecordEndDate.Name = "dtRecordEndDate";
            this.dtRecordEndDate.Size = new Size(0x5e, 20);
            this.dtRecordEndDate.TabIndex = 0;
            this.dtRecordEndDate.ValueChanged += new EventHandler(this.dtRecordEndDate_ValueChanged);
            this.dtRecordEndTime.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.dtRecordEndTime.Checked = false;
            this.dtRecordEndTime.CustomFormat = "";
            this.dtRecordEndTime.Format = DateTimePickerFormat.Time;
            this.dtRecordEndTime.Location = new Point(0x67, 3);
            this.dtRecordEndTime.Name = "dtRecordEndTime";
            this.dtRecordEndTime.ShowUpDown = true;
            this.dtRecordEndTime.Size = new Size(0x5e, 20);
            this.dtRecordEndTime.TabIndex = 1;
            this.tableLayoutPanel8.ColumnCount = 2;
            this.tableLayoutPanel8.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel8.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel8.Controls.Add(this.dtRecordStartDate, 0, 0);
            this.tableLayoutPanel8.Controls.Add(this.dtRecordStartTime, 1, 0);
            this.tableLayoutPanel8.Location = new Point(0x40, 0x54);
            this.tableLayoutPanel8.Margin = new Padding(0);
            this.tableLayoutPanel8.Name = "tableLayoutPanel8";
            this.tableLayoutPanel8.RowCount = 1;
            this.tableLayoutPanel8.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
            this.tableLayoutPanel8.Size = new Size(200, 0x1b);
            this.tableLayoutPanel8.TabIndex = 8;
            this.dtRecordStartDate.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.dtRecordStartDate.Checked = false;
            this.dtRecordStartDate.CustomFormat = "";
            this.dtRecordStartDate.Format = DateTimePickerFormat.Short;
            this.dtRecordStartDate.Location = new Point(3, 3);
            this.dtRecordStartDate.Name = "dtRecordStartDate";
            this.dtRecordStartDate.Size = new Size(0x5e, 20);
            this.dtRecordStartDate.TabIndex = 0;
            this.dtRecordStartDate.ValueChanged += new EventHandler(this.dtRecordStartDate_ValueChanged);
            this.dtRecordStartTime.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.dtRecordStartTime.Checked = false;
            this.dtRecordStartTime.CustomFormat = "";
            this.dtRecordStartTime.Format = DateTimePickerFormat.Time;
            this.dtRecordStartTime.Location = new Point(0x67, 3);
            this.dtRecordStartTime.Name = "dtRecordStartTime";
            this.dtRecordStartTime.ShowUpDown = true;
            this.dtRecordStartTime.Size = new Size(0x5e, 20);
            this.dtRecordStartTime.TabIndex = 1;
            this.cbRecordSearchEncs.AutoSize = true;
            this.cbRecordSearchEncs.Checked = true;
            this.cbRecordSearchEncs.CheckState = CheckState.Checked;
            this.cbRecordSearchEncs.Location = new Point(0x84, 0x2d);
            this.cbRecordSearchEncs.Name = "cbRecordSearchEncs";
            this.cbRecordSearchEncs.Size = new Size(0x87, 0x11);
            this.cbRecordSearchEncs.TabIndex = 2;
            this.cbRecordSearchEncs.Text = "Search encounter titles";
            this.cbRecordSearchEncs.UseVisualStyleBackColor = true;
            this.cbRecordSearchZones.AutoSize = true;
            this.cbRecordSearchZones.Location = new Point(6, 0x2d);
            this.cbRecordSearchZones.Name = "cbRecordSearchZones";
            this.cbRecordSearchZones.Size = new Size(120, 0x11);
            this.cbRecordSearchZones.TabIndex = 1;
            this.cbRecordSearchZones.Text = "Search zone names";
            this.cbRecordSearchZones.UseVisualStyleBackColor = true;
            this.btnRecordSearchDateTime.Location = new Point(0x111, 0x54);
            this.btnRecordSearchDateTime.Name = "btnRecordSearchDateTime";
            this.btnRecordSearchDateTime.Size = new Size(0x4b, 0x37);
            this.btnRecordSearchDateTime.TabIndex = 4;
            this.btnRecordSearchDateTime.Text = "Search by Date/Time";
            this.btnRecordSearchDateTime.UseVisualStyleBackColor = false;
            this.btnRecordSearchDateTime.Click += new EventHandler(this.btnRecordSearchDateTime_Click);
            this.btnRecordSearchText.Location = new Point(0x111, 0x11);
            this.btnRecordSearchText.Name = "btnRecordSearchText";
            this.btnRecordSearchText.Size = new Size(0x4b, 0x2d);
            this.btnRecordSearchText.TabIndex = 3;
            this.btnRecordSearchText.Text = "Search by Text";
            this.btnRecordSearchText.UseVisualStyleBackColor = false;
            this.btnRecordSearchText.Click += new EventHandler(this.btnRecordSearchText_Click);
            this.tbRecordSearchText.Location = new Point(6, 0x13);
            this.tbRecordSearchText.Name = "tbRecordSearchText";
            this.tbRecordSearchText.Size = new Size(0x105, 20);
            this.tbRecordSearchText.TabIndex = 0;
            this.tbRecordSearchText.KeyUp += new KeyEventHandler(this.tbRecordSearchText_KeyUp);
            this.tpAbout.AutoScroll = true;
            this.tpAbout.Controls.Add(this.webBrowser1);
            this.tpAbout.Controls.Add(this.groupBox14);
            this.tpAbout.Controls.Add(this.gbAbout);
            this.tpAbout.Location = new Point(4, 0x16);
            this.tpAbout.Name = "tpAbout";
            this.tpAbout.Size = new Size(0x3bf, 0x219);
            this.tpAbout.TabIndex = 3;
            this.tpAbout.Text = "About";
            this.tpAbout.UseVisualStyleBackColor = true;
            this.webBrowser1.AllowNavigation = false;
            this.webBrowser1.AllowWebBrowserDrop = false;
            this.webBrowser1.Anchor = AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom | AnchorStyles.Top;
            this.webBrowser1.IsWebBrowserContextMenuEnabled = false;
            this.webBrowser1.Location = new Point(0x206, 8);
            this.webBrowser1.MinimumSize = new Size(20, 20);
            this.webBrowser1.Name = "webBrowser1";
            this.webBrowser1.ScriptErrorsSuppressed = true;
            this.webBrowser1.Size = new Size(0x1b6, 0x20e);
            this.webBrowser1.TabIndex = 4;
            this.webBrowser1.Url = new Uri("about:blank", UriKind.Absolute);
            this.webBrowser1.WebBrowserShortcutsEnabled = false;
            this.groupBox14.Controls.Add(this.rtbFeedback);
            this.groupBox14.Controls.Add(this.label24);
            this.groupBox14.Controls.Add(this.btnFeedbackSubmit);
            this.groupBox14.Controls.Add(this.cbFeedbackLogs);
            this.groupBox14.Controls.Add(this.tbFeedbackEmail);
            this.groupBox14.Location = new Point(3, 0xa2);
            this.groupBox14.Name = "groupBox14";
            this.groupBox14.Size = new Size(0x1fd, 0xe0);
            this.groupBox14.TabIndex = 3;
            this.groupBox14.TabStop = false;
            this.groupBox14.Text = "Send Bugs or Feedback";
            this.rtbFeedback.ContextMenu = this.cmRtbEdit;
            this.rtbFeedback.Location = new Point(8, 0x60);
            this.rtbFeedback.MaxLength = 0x2710;
            this.rtbFeedback.Name = "rtbFeedback";
            this.rtbFeedback.Size = new Size(0x1ef, 120);
            this.rtbFeedback.TabIndex = 0;
            this.rtbFeedback.Text = "Type comments here, then click Submit.";
            this.cmRtbEdit.MenuItems.AddRange(new MenuItem[] { this.cmiRtbCut, this.cmiRtbCopy, this.cmiRtbPaste, this.cmiRtbDelete, this.menuItem54, this.cmiRtbSelect, this.menuItem1 });
            this.cmiRtbCut.Index = 0;
            this.cmiRtbCut.Text = "Cut";
            this.cmiRtbCut.Click += new EventHandler(this.cmiRtbCMI_Click);
            this.cmiRtbCopy.Index = 1;
            this.cmiRtbCopy.Text = "Copy";
            this.cmiRtbCopy.Click += new EventHandler(this.cmiRtbCMI_Click);
            this.cmiRtbPaste.Index = 2;
            this.cmiRtbPaste.Text = "Paste";
            this.cmiRtbPaste.Click += new EventHandler(this.cmiRtbCMI_Click);
            this.cmiRtbDelete.Index = 3;
            this.cmiRtbDelete.Text = "Delete";
            this.cmiRtbDelete.Click += new EventHandler(this.cmiRtbCMI_Click);
            this.menuItem54.Index = 4;
            this.menuItem54.Text = "-";
            this.cmiRtbSelect.Index = 5;
            this.cmiRtbSelect.Text = "Select All";
            this.cmiRtbSelect.Click += new EventHandler(this.cmiRtbCMI_Click);
            this.menuItem1.Index = 6;
            this.menuItem1.Text = "Undo";
            this.menuItem1.Click += new EventHandler(this.cmiRtbCMI_Click);
            this.label24.Location = new Point(8, 0x10);
            this.label24.Name = "label24";
            this.label24.Size = new Size(0x120, 80);
            this.label24.TabIndex = 4;
            this.label24.Text = manager.GetString("label24.Text");
            this.btnFeedbackSubmit.Location = new Point(0x130, 0x48);
            this.btnFeedbackSubmit.Name = "btnFeedbackSubmit";
            this.btnFeedbackSubmit.Size = new Size(0xc7, 0x17);
            this.btnFeedbackSubmit.TabIndex = 3;
            this.btnFeedbackSubmit.Text = "Submit";
            this.btnFeedbackSubmit.Click += new EventHandler(this.btnFeedbackSubmit_Click);
            this.cbFeedbackLogs.Checked = true;
            this.cbFeedbackLogs.CheckState = CheckState.Checked;
            this.cbFeedbackLogs.Location = new Point(0x138, 40);
            this.cbFeedbackLogs.Name = "cbFeedbackLogs";
            this.cbFeedbackLogs.Size = new Size(0xbf, 0x20);
            this.cbFeedbackLogs.TabIndex = 2;
            this.cbFeedbackLogs.Text = "Include error logs from          \"Advanced Combat Tracker.log\"";
            this.tbFeedbackEmail.Location = new Point(0x130, 0x10);
            this.tbFeedbackEmail.MaxLength = 100;
            this.tbFeedbackEmail.Name = "tbFeedbackEmail";
            this.tbFeedbackEmail.Size = new Size(0xc7, 20);
            this.tbFeedbackEmail.TabIndex = 1;
            this.tbFeedbackEmail.Text = "<Optional return email address>";
            this.tbFeedbackEmail.KeyUp += new KeyEventHandler(this.tbFeedbackEmail_KeyUp);
            this.gbAbout.Controls.Add(this.linkLabelAppData);
            this.gbAbout.Controls.Add(this.pbPaypal);
            this.gbAbout.Controls.Add(this.cbAutoCheck);
            this.gbAbout.Controls.Add(this.btnCheckVer);
            this.gbAbout.Controls.Add(this.label5);
            this.gbAbout.Controls.Add(this.linkURL);
            this.gbAbout.Controls.Add(this.label4);
            this.gbAbout.Controls.Add(this.linkEmail);
            this.gbAbout.Controls.Add(this.lblVersion);
            this.gbAbout.Controls.Add(this.label7);
            this.gbAbout.Controls.Add(this.label19);
            this.gbAbout.Location = new Point(8, 8);
            this.gbAbout.Name = "gbAbout";
            this.gbAbout.Size = new Size(0x1f8, 0x68);
            this.gbAbout.TabIndex = 0;
            this.gbAbout.TabStop = false;
            this.gbAbout.Text = "About";
            this.linkLabelAppData.AutoSize = true;
            this.linkLabelAppData.Location = new Point(8, 80);
            this.linkLabelAppData.Name = "linkLabelAppData";
            this.linkLabelAppData.Size = new Size(0x54, 13);
            this.linkLabelAppData.TabIndex = 0x1d;
            this.linkLabelAppData.TabStop = true;
            this.linkLabelAppData.Text = "App Data Folder";
            this.linkLabelAppData.LinkClicked += new LinkLabelLinkClickedEventHandler(this.linkLabelAppData_LinkClicked);
            this.pbPaypal.Cursor = Cursors.Hand;
            this.pbPaypal.Image = (Image) manager.GetObject("pbPaypal.Image");
            this.pbPaypal.Location = new Point(0x1b4, 0x10);
            this.pbPaypal.Name = "pbPaypal";
            this.pbPaypal.Size = new Size(0x3e, 0x1f);
            this.pbPaypal.TabIndex = 0x1c;
            this.pbPaypal.TabStop = false;
            this.pbPaypal.Click += new EventHandler(this.pbPaypal_Click);
            this.cbAutoCheck.Checked = true;
            this.cbAutoCheck.CheckState = CheckState.Checked;
            this.cbAutoCheck.Location = new Point(0xcb, 80);
            this.cbAutoCheck.Name = "cbAutoCheck";
            this.cbAutoCheck.Size = new Size(0x80, 0x10);
            this.cbAutoCheck.TabIndex = 2;
            this.cbAutoCheck.Text = "Auto Version Check";
            this.btnCheckVer.Location = new Point(370, 0x4e);
            this.btnCheckVer.Name = "btnCheckVer";
            this.btnCheckVer.Size = new Size(0x80, 20);
            this.btnCheckVer.TabIndex = 3;
            this.btnCheckVer.Text = "Check Version Now";
            this.btnCheckVer.Click += new EventHandler(this.btnCheckVer_Click);
            this.label5.Location = new Point(8, 0x30);
            this.label5.Name = "label5";
            this.label5.Size = new Size(0x30, 0x10);
            this.label5.TabIndex = 2;
            this.label5.Text = "Version:";
            this.linkURL.Location = new Point(0x40, 0x20);
            this.linkURL.Name = "linkURL";
            this.linkURL.Size = new Size(120, 0x10);
            this.linkURL.TabIndex = 1;
            this.linkURL.TabStop = true;
            this.linkURL.Text = "Main Website";
            this.linkURL.LinkClicked += new LinkLabelLinkClickedEventHandler(this.linkURL_LinkClicked);
            this.label4.Location = new Point(8, 0x10);
            this.label4.Name = "label4";
            this.label4.Size = new Size(0x100, 0x10);
            this.label4.TabIndex = 0;
            this.label4.Text = "Made by Aditu of <Cataclysm> (EQ2-Permafrost)";
            this.linkEmail.Location = new Point(0x108, 0x10);
            this.linkEmail.Name = "linkEmail";
            this.linkEmail.Size = new Size(0x98, 0x10);
            this.linkEmail.TabIndex = 0;
            this.linkEmail.TabStop = true;
            this.linkEmail.Text = "aditu@maine.rr.com";
            this.linkEmail.LinkClicked += new LinkLabelLinkClickedEventHandler(this.linkEmail_LinkClicked);
            this.lblVersion.Location = new Point(0x40, 0x30);
            this.lblVersion.Name = "lblVersion";
            this.lblVersion.Size = new Size(200, 0x10);
            this.lblVersion.TabIndex = 2;
            this.lblVersion.Text = "1.0.0.0";
            this.label7.Location = new Point(8, 0x20);
            this.label7.Name = "label7";
            this.label7.Size = new Size(0x30, 0x10);
            this.label7.TabIndex = 2;
            this.label7.Text = "Visit:";
            this.label19.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.label19.ForeColor = System.Drawing.Color.Blue;
            this.label19.Location = new Point(200, 0x20);
            this.label19.Name = "label19";
            this.label19.Size = new Size(160, 0x10);
            this.label19.TabIndex = 2;
            this.label19.Text = "/join eq.serverwide.actparse";
            this.tmrTen.Interval = 0x2710;
            this.tmrTen.Tick += new EventHandler(this.tmrTen_Tick);
            this.cbbMiniParse.Anchor = AnchorStyles.Right | AnchorStyles.Top;
            this.cbbMiniParse.Appearance = Appearance.Button;
            this.cbbMiniParse.Location = new Point(0x387, 0);
            this.cbbMiniParse.Name = "cbbMiniParse";
            this.cbbMiniParse.Size = new Size(0x40, 0x18);
            this.cbbMiniParse.TabIndex = 1;
            this.cbbMiniParse.Text = "Show Mini";
            this.cbbMiniParse.TextAlign = ContentAlignment.MiddleCenter;
            this.toolTip1.SetToolTip(this.cbbMiniParse, "Show Mini Parse Window\r\nRight-Click will set the window to click-through");
            this.cbbMiniParse.CheckedChanged += new EventHandler(this.cbbMiniParse_CheckedChanged);
            this.cbbMiniParse.MouseUp += new MouseEventHandler(this.cbbMiniParse_MouseUp);
            this.cbbShowTimers.Anchor = AnchorStyles.Right | AnchorStyles.Top;
            this.cbbShowTimers.Appearance = Appearance.Button;
            this.cbbShowTimers.Location = new Point(0x337, 0);
            this.cbbShowTimers.Name = "cbbShowTimers";
            this.cbbShowTimers.Size = new Size(80, 0x18);
            this.cbbShowTimers.TabIndex = 0;
            this.cbbShowTimers.Text = "Show Timers";
            this.cbbShowTimers.TextAlign = ContentAlignment.MiddleCenter;
            this.toolTip1.SetToolTip(this.cbbShowTimers, "Show Spell Timers Window\r\nRight-Click will set the window to click-through");
            this.cbbShowTimers.CheckedChanged += new EventHandler(this.cbbShowTimers_CheckedChanged);
            this.cbbShowTimers.MouseUp += new MouseEventHandler(this.cbbShowTimers_MouseUp);
            this.tbClipboard.Location = new Point(0x1f0, 0x90);
            this.tbClipboard.Multiline = true;
            this.tbClipboard.Name = "tbClipboard";
            this.tbClipboard.Size = new Size(0x70, 80);
            this.tbClipboard.TabIndex = 9;
            this.tbClipboard.Visible = false;
            this.cmsEList.Items.AddRange(new ToolStripItem[] { this.refreshToolStripMenuItem, this.copyAsFormattedPlainTextToolStripMenuItem4, this.copyCellToolStripMenuItem4, this.appendCellToolStripMenuItem4, this.toolStripMenuItem4 });
            this.cmsEList.Name = "cmsEList";
            this.cmsEList.Size = new Size(0xe5, 0x72);
            this.refreshToolStripMenuItem.Name = "refreshToolStripMenuItem";
            this.refreshToolStripMenuItem.Size = new Size(0xe4, 0x16);
            this.refreshToolStripMenuItem.Text = "Refresh";
            this.refreshToolStripMenuItem.Click += new EventHandler(this.cmiDGRefresh_Click);
            this.copyAsFormattedPlainTextToolStripMenuItem4.Name = "copyAsFormattedPlainTextToolStripMenuItem4";
            this.copyAsFormattedPlainTextToolStripMenuItem4.Size = new Size(0xe4, 0x16);
            this.copyAsFormattedPlainTextToolStripMenuItem4.Text = "Copy as Formatted Plain Text";
            this.copyAsFormattedPlainTextToolStripMenuItem4.Click += new EventHandler(this.cmiTextTable_Click);
            this.copyCellToolStripMenuItem4.Name = "copyCellToolStripMenuItem4";
            this.copyCellToolStripMenuItem4.Size = new Size(0xe4, 0x16);
            this.copyCellToolStripMenuItem4.Text = "Copy Cell";
            this.copyCellToolStripMenuItem4.Click += new EventHandler(this.copyCellToolStripMenuItem_Click);
            this.appendCellToolStripMenuItem4.Name = "appendCellToolStripMenuItem4";
            this.appendCellToolStripMenuItem4.Size = new Size(0xe4, 0x16);
            this.appendCellToolStripMenuItem4.Text = "Append Cell";
            this.appendCellToolStripMenuItem4.Click += new EventHandler(this.appendCellToolStripMenuItem_Click);
            this.toolStripMenuItem4.Name = "toolStripMenuItem4";
            this.toolStripMenuItem4.Size = new Size(0xe4, 0x16);
            this.toolStripMenuItem4.Text = "Append Newline";
            this.toolStripMenuItem4.Click += new EventHandler(this.appendNewlineToolStripMenuItem_Click);
            this.cmsATSort.Items.AddRange(new ToolStripItem[] { this.refreshToolStripMenuItem1, this.selectThisActionInViewLogsToolStripMenuItem, this.copyAsFormattedPlainTextToolStripMenuItem, this.copyAsHTMLToolStripMenuItem, this.copyAsXMLToolStripMenuItem, this.copyAsCSVToolStripMenuItem, this.copyCellToolStripMenuItem, this.appendCellToolStripMenuItem, this.toolStripMenuItem1 });
            this.cmsATSort.Name = "cmsATSort";
            this.cmsATSort.Size = new Size(0xf3, 0xca);
            this.refreshToolStripMenuItem1.Name = "refreshToolStripMenuItem1";
            this.refreshToolStripMenuItem1.Size = new Size(0xf2, 0x16);
            this.refreshToolStripMenuItem1.Text = "Refresh";
            this.refreshToolStripMenuItem1.Click += new EventHandler(this.cmiDGRefresh_Click);
            this.selectThisActionInViewLogsToolStripMenuItem.Font = new Font("Tahoma", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.selectThisActionInViewLogsToolStripMenuItem.Name = "selectThisActionInViewLogsToolStripMenuItem";
            this.selectThisActionInViewLogsToolStripMenuItem.Size = new Size(0xf2, 0x16);
            this.selectThisActionInViewLogsToolStripMenuItem.Text = "Select this action in View Logs";
            this.selectThisActionInViewLogsToolStripMenuItem.Click += new EventHandler(this.selectThisActionInViewLogsToolStripMenuItem_Click);
            this.copyAsFormattedPlainTextToolStripMenuItem.Name = "copyAsFormattedPlainTextToolStripMenuItem";
            this.copyAsFormattedPlainTextToolStripMenuItem.Size = new Size(0xf2, 0x16);
            this.copyAsFormattedPlainTextToolStripMenuItem.Text = "Copy as Formatted Plain Text";
            this.copyAsFormattedPlainTextToolStripMenuItem.Click += new EventHandler(this.cmiTextTable_Click);
            this.copyAsHTMLToolStripMenuItem.Name = "copyAsHTMLToolStripMenuItem";
            this.copyAsHTMLToolStripMenuItem.Size = new Size(0xf2, 0x16);
            this.copyAsHTMLToolStripMenuItem.Text = "Copy as HTML";
            this.copyAsHTMLToolStripMenuItem.Click += new EventHandler(this.cmiATExport_Click);
            this.copyAsXMLToolStripMenuItem.Name = "copyAsXMLToolStripMenuItem";
            this.copyAsXMLToolStripMenuItem.Size = new Size(0xf2, 0x16);
            this.copyAsXMLToolStripMenuItem.Text = "Copy as XML";
            this.copyAsXMLToolStripMenuItem.Click += new EventHandler(this.cmiATExportXML_Click);
            this.copyAsCSVToolStripMenuItem.Name = "copyAsCSVToolStripMenuItem";
            this.copyAsCSVToolStripMenuItem.Size = new Size(0xf2, 0x16);
            this.copyAsCSVToolStripMenuItem.Text = "Copy as CSV";
            this.copyAsCSVToolStripMenuItem.Click += new EventHandler(this.cmiATExportCSV_Click);
            this.copyCellToolStripMenuItem.Name = "copyCellToolStripMenuItem";
            this.copyCellToolStripMenuItem.Size = new Size(0xf2, 0x16);
            this.copyCellToolStripMenuItem.Text = "Copy Cell";
            this.copyCellToolStripMenuItem.Click += new EventHandler(this.copyCellToolStripMenuItem_Click);
            this.appendCellToolStripMenuItem.Name = "appendCellToolStripMenuItem";
            this.appendCellToolStripMenuItem.Size = new Size(0xf2, 0x16);
            this.appendCellToolStripMenuItem.Text = "Append Cell";
            this.appendCellToolStripMenuItem.Click += new EventHandler(this.appendCellToolStripMenuItem_Click);
            this.toolStripMenuItem1.Name = "toolStripMenuItem1";
            this.toolStripMenuItem1.Size = new Size(0xf2, 0x16);
            this.toolStripMenuItem1.Text = "Append Newline";
            this.toolStripMenuItem1.Click += new EventHandler(this.appendNewlineToolStripMenuItem_Click);
            this.cmsMDSort.Items.AddRange(new ToolStripItem[] { this.refreshToolStripMenuItem2, this.copyAsFormattedPlainTextToolStripMenuItem1, this.copyAsHTMLToolStripMenuItem1, this.copyAsXMLToolStripMenuItem1, this.copyAsCSVToolStripMenuItem1, this.copyCellToolStripMenuItem1, this.appendCellToolStripMenuItem1, this.appendNewlineToolStripMenuItem });
            this.cmsMDSort.Name = "cmsMDSort";
            this.cmsMDSort.Size = new Size(0xe5, 180);
            this.refreshToolStripMenuItem2.Name = "refreshToolStripMenuItem2";
            this.refreshToolStripMenuItem2.Size = new Size(0xe4, 0x16);
            this.refreshToolStripMenuItem2.Text = "Refresh";
            this.refreshToolStripMenuItem2.Click += new EventHandler(this.cmiDGRefresh_Click);
            this.copyAsFormattedPlainTextToolStripMenuItem1.Name = "copyAsFormattedPlainTextToolStripMenuItem1";
            this.copyAsFormattedPlainTextToolStripMenuItem1.Size = new Size(0xe4, 0x16);
            this.copyAsFormattedPlainTextToolStripMenuItem1.Text = "Copy as Formatted Plain Text";
            this.copyAsFormattedPlainTextToolStripMenuItem1.Click += new EventHandler(this.cmiTextTable_Click);
            this.copyAsHTMLToolStripMenuItem1.Name = "copyAsHTMLToolStripMenuItem1";
            this.copyAsHTMLToolStripMenuItem1.Size = new Size(0xe4, 0x16);
            this.copyAsHTMLToolStripMenuItem1.Text = "Copy as HTML";
            this.copyAsHTMLToolStripMenuItem1.Click += new EventHandler(this.cmiMDExport_Click);
            this.copyAsXMLToolStripMenuItem1.Name = "copyAsXMLToolStripMenuItem1";
            this.copyAsXMLToolStripMenuItem1.Size = new Size(0xe4, 0x16);
            this.copyAsXMLToolStripMenuItem1.Text = "Copy as XML";
            this.copyAsXMLToolStripMenuItem1.Click += new EventHandler(this.cmiMDExportXML_Click);
            this.copyAsCSVToolStripMenuItem1.Name = "copyAsCSVToolStripMenuItem1";
            this.copyAsCSVToolStripMenuItem1.Size = new Size(0xe4, 0x16);
            this.copyAsCSVToolStripMenuItem1.Text = "Copy as CSV";
            this.copyAsCSVToolStripMenuItem1.Click += new EventHandler(this.cmiMDExportCSV_Click);
            this.copyCellToolStripMenuItem1.Name = "copyCellToolStripMenuItem1";
            this.copyCellToolStripMenuItem1.Size = new Size(0xe4, 0x16);
            this.copyCellToolStripMenuItem1.Text = "Copy Cell";
            this.copyCellToolStripMenuItem1.Click += new EventHandler(this.copyCellToolStripMenuItem_Click);
            this.appendCellToolStripMenuItem1.Name = "appendCellToolStripMenuItem1";
            this.appendCellToolStripMenuItem1.Size = new Size(0xe4, 0x16);
            this.appendCellToolStripMenuItem1.Text = "Append Cell";
            this.appendCellToolStripMenuItem1.Click += new EventHandler(this.appendCellToolStripMenuItem_Click);
            this.appendNewlineToolStripMenuItem.Name = "appendNewlineToolStripMenuItem";
            this.appendNewlineToolStripMenuItem.Size = new Size(0xe4, 0x16);
            this.appendNewlineToolStripMenuItem.Text = "Append Newline";
            this.appendNewlineToolStripMenuItem.Click += new EventHandler(this.appendNewlineToolStripMenuItem_Click);
            this.cmsCDSort.Items.AddRange(new ToolStripItem[] { this.refreshToolStripMenuItem3, this.copyAsFormattedPlainTextToolStripMenuItem2, this.copyAsHTMLToolStripMenuItem2, this.copyAsXMLToolStripMenuItem2, this.copyAsCSVToolStripMenuItem2, this.copyCellToolStripMenuItem2, this.appendCellToolStripMenuItem2, this.toolStripMenuItem2 });
            this.cmsCDSort.Name = "cmsCDSort";
            this.cmsCDSort.Size = new Size(0xe5, 180);
            this.refreshToolStripMenuItem3.Name = "refreshToolStripMenuItem3";
            this.refreshToolStripMenuItem3.Size = new Size(0xe4, 0x16);
            this.refreshToolStripMenuItem3.Text = "Refresh";
            this.refreshToolStripMenuItem3.Click += new EventHandler(this.cmiDGRefresh_Click);
            this.copyAsFormattedPlainTextToolStripMenuItem2.Name = "copyAsFormattedPlainTextToolStripMenuItem2";
            this.copyAsFormattedPlainTextToolStripMenuItem2.Size = new Size(0xe4, 0x16);
            this.copyAsFormattedPlainTextToolStripMenuItem2.Text = "Copy as Formatted Plain Text";
            this.copyAsFormattedPlainTextToolStripMenuItem2.Click += new EventHandler(this.cmiTextTable_Click);
            this.copyAsHTMLToolStripMenuItem2.Name = "copyAsHTMLToolStripMenuItem2";
            this.copyAsHTMLToolStripMenuItem2.Size = new Size(0xe4, 0x16);
            this.copyAsHTMLToolStripMenuItem2.Text = "Copy as HTML";
            this.copyAsHTMLToolStripMenuItem2.Click += new EventHandler(this.cmiCDExport_Click);
            this.copyAsXMLToolStripMenuItem2.Name = "copyAsXMLToolStripMenuItem2";
            this.copyAsXMLToolStripMenuItem2.Size = new Size(0xe4, 0x16);
            this.copyAsXMLToolStripMenuItem2.Text = "Copy as XML";
            this.copyAsXMLToolStripMenuItem2.Click += new EventHandler(this.cmiCDExportXML_Click);
            this.copyAsCSVToolStripMenuItem2.Name = "copyAsCSVToolStripMenuItem2";
            this.copyAsCSVToolStripMenuItem2.Size = new Size(0xe4, 0x16);
            this.copyAsCSVToolStripMenuItem2.Text = "Copy as CSV";
            this.copyAsCSVToolStripMenuItem2.Click += new EventHandler(this.cmiCDExportCSV_Click);
            this.copyCellToolStripMenuItem2.Name = "copyCellToolStripMenuItem2";
            this.copyCellToolStripMenuItem2.Size = new Size(0xe4, 0x16);
            this.copyCellToolStripMenuItem2.Text = "Copy Cell";
            this.copyCellToolStripMenuItem2.Click += new EventHandler(this.copyCellToolStripMenuItem_Click);
            this.appendCellToolStripMenuItem2.Name = "appendCellToolStripMenuItem2";
            this.appendCellToolStripMenuItem2.Size = new Size(0xe4, 0x16);
            this.appendCellToolStripMenuItem2.Text = "Append Cell";
            this.appendCellToolStripMenuItem2.Click += new EventHandler(this.appendCellToolStripMenuItem_Click);
            this.toolStripMenuItem2.Name = "toolStripMenuItem2";
            this.toolStripMenuItem2.Size = new Size(0xe4, 0x16);
            this.toolStripMenuItem2.Text = "Append Newline";
            this.toolStripMenuItem2.Click += new EventHandler(this.appendNewlineToolStripMenuItem_Click);
            this.cmsEDSort.Items.AddRange(new ToolStripItem[] { this.refreshToolStripMenuItem4, this.copyAsFormattedPlainTextToolStripMenuItem3, this.copyAsHTMLToolStripMenuItem3, this.copyAsXMLToolStripMenuItem3, this.copyAsCSVToolStripMenuItem3, this.copyCellToolStripMenuItem3, this.appendCellToolStripMenuItem3, this.toolStripMenuItem3 });
            this.cmsEDSort.Name = "cmsEDSort";
            this.cmsEDSort.Size = new Size(0xe5, 180);
            this.refreshToolStripMenuItem4.Name = "refreshToolStripMenuItem4";
            this.refreshToolStripMenuItem4.Size = new Size(0xe4, 0x16);
            this.refreshToolStripMenuItem4.Text = "Refresh";
            this.refreshToolStripMenuItem4.Click += new EventHandler(this.cmiDGRefresh_Click);
            this.copyAsFormattedPlainTextToolStripMenuItem3.Name = "copyAsFormattedPlainTextToolStripMenuItem3";
            this.copyAsFormattedPlainTextToolStripMenuItem3.Size = new Size(0xe4, 0x16);
            this.copyAsFormattedPlainTextToolStripMenuItem3.Text = "Copy as Formatted Plain Text";
            this.copyAsFormattedPlainTextToolStripMenuItem3.Click += new EventHandler(this.cmiTextTable_Click);
            this.copyAsHTMLToolStripMenuItem3.Name = "copyAsHTMLToolStripMenuItem3";
            this.copyAsHTMLToolStripMenuItem3.Size = new Size(0xe4, 0x16);
            this.copyAsHTMLToolStripMenuItem3.Text = "Copy as HTML";
            this.copyAsHTMLToolStripMenuItem3.Click += new EventHandler(this.cmiEDExport_Click);
            this.copyAsXMLToolStripMenuItem3.Name = "copyAsXMLToolStripMenuItem3";
            this.copyAsXMLToolStripMenuItem3.Size = new Size(0xe4, 0x16);
            this.copyAsXMLToolStripMenuItem3.Text = "Copy as XML";
            this.copyAsXMLToolStripMenuItem3.Click += new EventHandler(this.cmiEDExportXML_Click);
            this.copyAsCSVToolStripMenuItem3.Name = "copyAsCSVToolStripMenuItem3";
            this.copyAsCSVToolStripMenuItem3.Size = new Size(0xe4, 0x16);
            this.copyAsCSVToolStripMenuItem3.Text = "Copy as CSV";
            this.copyAsCSVToolStripMenuItem3.Click += new EventHandler(this.cmiEDExportCSV_Click);
            this.copyCellToolStripMenuItem3.Name = "copyCellToolStripMenuItem3";
            this.copyCellToolStripMenuItem3.Size = new Size(0xe4, 0x16);
            this.copyCellToolStripMenuItem3.Text = "Copy Cell";
            this.copyCellToolStripMenuItem3.Click += new EventHandler(this.copyCellToolStripMenuItem_Click);
            this.appendCellToolStripMenuItem3.Name = "appendCellToolStripMenuItem3";
            this.appendCellToolStripMenuItem3.Size = new Size(0xe4, 0x16);
            this.appendCellToolStripMenuItem3.Text = "Append Cell";
            this.appendCellToolStripMenuItem3.Click += new EventHandler(this.appendCellToolStripMenuItem_Click);
            this.toolStripMenuItem3.Name = "toolStripMenuItem3";
            this.toolStripMenuItem3.Size = new Size(0xe4, 0x16);
            this.toolStripMenuItem3.Text = "Append Newline";
            this.toolStripMenuItem3.Click += new EventHandler(this.appendNewlineToolStripMenuItem_Click);
            this.tmrTenths.Tick += new EventHandler(this.tmrTenths_Tick);
            this.notifyIcon1.Icon = (Icon) manager.GetObject("notifyIcon1.Icon");
            this.notifyIcon1.Text = "Advanced Combat Tracker";
            this.notifyIcon1.BalloonTipClicked += new EventHandler(this.notifyIcon1_BalloonTipClicked);
            this.notifyIcon1.BalloonTipClosed += new EventHandler(this.notifyIcon1_BalloonTipClosed);
            this.notifyIcon1.Click += new EventHandler(this.notifyIcon1_Click);
            this.cmsTableSetup.Name = "cmsTableSetup";
            this.cmsTableSetup.ShowCheckMargin = true;
            this.cmsTableSetup.Size = new Size(0x53, 4);
            this.AutoScaleBaseSize = new Size(5, 13);
            base.ClientSize = new Size(0x3c7, 0x237);
            base.Controls.Add(this.cbbShowTimers);
            base.Controls.Add(this.cbbMiniParse);
            base.Controls.Add(this.tc1);
            base.Controls.Add(this.tbClipboard);
            this.DoubleBuffered = true;
            base.HelpButton = true;
            base.Icon = (Icon) manager.GetObject("$this.Icon");
            this.MinimumSize = new Size(100, 100);
            base.Name = "FormActMain";
            base.Padding = new Padding(0, 4, 0, 0);
            base.StartPosition = FormStartPosition.Manual;
            this.Text = "Advanced Combat Tracker";
            base.FormClosing += new FormClosingEventHandler(this.FormActMain_FormClosing);
            base.Resize += new EventHandler(this.Form1_Resize);
            this.cmsTView.ResumeLayout(false);
            this.tc1.ResumeLayout(false);
            this.tpMain.ResumeLayout(false);
            this.pRightView.ResumeLayout(false);
            this.pDG.ResumeLayout(false);
            this.pGraphing.ResumeLayout(false);
            ((ISupportInitialize) this.pbDG).EndInit();
            this.cmsGraph.ResumeLayout(false);
            this.pCList.ResumeLayout(false);
            this.pLeftView.ResumeLayout(false);
            this.pTv.ResumeLayout(false);
            this.pTvBtns.ResumeLayout(false);
            this.tableLayoutPanel11.ResumeLayout(false);
            this.tpOptions.ResumeLayout(false);
            this.flpOptionControls.ResumeLayout(false);
            this.gbHelp.ResumeLayout(false);
            this.tableLayoutPanel12.ResumeLayout(false);
            this.tableLayoutPanel12.PerformLayout();
            this.tpTriggers.ResumeLayout(false);
            this.tcTriggers.ResumeLayout(false);
            this.tabPage0.ResumeLayout(false);
            this.tabPage0.PerformLayout();
            this.cmsCustomTrigger.ResumeLayout(false);
            this.flowLayoutPanel1.ResumeLayout(false);
            this.flowLayoutPanel1.PerformLayout();
            this.panel8.ResumeLayout(false);
            this.panel8.PerformLayout();
            this.tpPlugins.ResumeLayout(false);
            this.tcPlugins.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.groupBox3.PerformLayout();
            this.panel15.ResumeLayout(false);
            this.panel15.PerformLayout();
            this.tpImportExport.ResumeLayout(false);
            this.flpIoControls.ResumeLayout(false);
            this.gbIoHelp.ResumeLayout(false);
            this.tpHistory.ResumeLayout(false);
            this.groupBox5.ResumeLayout(false);
            this.groupBox5.PerformLayout();
            this.nudHistoryDelete.EndInit();
            this.groupBox27.ResumeLayout(false);
            this.groupBox4.ResumeLayout(false);
            this.groupBox4.PerformLayout();
            this.tableLayoutPanel10.ResumeLayout(false);
            this.tableLayoutPanel9.ResumeLayout(false);
            this.tableLayoutPanel8.ResumeLayout(false);
            this.tpAbout.ResumeLayout(false);
            this.groupBox14.ResumeLayout(false);
            this.groupBox14.PerformLayout();
            this.gbAbout.ResumeLayout(false);
            this.gbAbout.PerformLayout();
            ((ISupportInitialize) this.pbPaypal).EndInit();
            this.cmsEList.ResumeLayout(false);
            this.cmsATSort.ResumeLayout(false);
            this.cmsMDSort.ResumeLayout(false);
            this.cmsCDSort.ResumeLayout(false);
            this.cmsEDSort.ResumeLayout(false);
            base.ResumeLayout(false);
            base.PerformLayout();
        }

        private void InitLcd(bool ShowStatus)
        {
            if (ActGlobals.oFormActMain.opMisc.cbClipConnect.Checked && this.opLcdGeneral.cbLcdRoute.Checked)
            {
                for (int i = 0; !this.opLcdGeneral.cbLcdRoute.Enabled && (i < 20); i++)
                {
                    Application.DoEvents();
                    Thread.Sleep(100);
                }
            }
            if (this.opLcdGeneral.cbLcdRoute.Checked && this.opLcdGeneral.cbLcdRoute.Enabled)
            {
                try
                {
                    this.clipXmlWriter.WriteStartElement("LcdInit");
                    this.clipXmlWriter.WriteEndElement();
                    this.clipXmlWriter.Flush();
                    this.lcdWaitForDevice.WaitOne(0x1388);
                    if (!this.lcdDeviceSet)
                    {
                        this.UpdateLcdStatus("No device is connected.", true);
                        ThreadInvokes.CheckboxSetChecked(this, this.opLcdGeneral.cbLcdEnabled, false);
                        return;
                    }
                }
                catch (Exception exception)
                {
                    this.UpdateLcdStatus(exception.Message, true);
                }
            }
            else
            {
                if (this.lcdHandle != null)
                {
                    this.lcdHandle.Dispose();
                    this.lcdHandle = null;
                }
                try
                {
                    this.lcdDeviceSet = false;
                    this.lcdHandle = new LcdApplet("Advanced Combat Tracker", LcdAppletCapabilities.Both, false);
                    this.lcdHandle.DeviceArrival += new EventHandler<LcdDeviceTypeEventArgs>(this.lcdHandle_DeviceArrival);
                    this.lcdHandle.Connect();
                    this.lcdWaitForDevice.WaitOne(0x1388);
                    if (!this.lcdDeviceSet)
                    {
                        this.UpdateLcdStatus("No device is connected.", true);
                        ThreadInvokes.CheckboxSetChecked(this, this.opLcdGeneral.cbLcdEnabled, false);
                        return;
                    }
                    if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                    {
                        this.lcdDevice = this.lcdHandle.OpenDeviceByType(LcdDeviceType.Monochrome);
                    }
                    else
                    {
                        this.lcdDevice = this.lcdHandle.OpenDeviceByType(LcdDeviceType.Qvga);
                    }
                }
                catch (Exception exception2)
                {
                    this.UpdateLcdStatus(exception2.Message, true);
                    return;
                }
                this.lcdDevice.SoftButtonsChanged += new EventHandler<LcdSoftButtonsEventArgs>(this.lcdDevice_SoftButtonsChanged);
                ThreadInvokes.ControlSetText(this, this.opLcdGeneral.lblLcdQuery, string.Format("{0}x{1}px {2}bpp LCD found", this.lcdDevice.PixelWidth, this.lcdDevice.PixelHeight, this.lcdDevice.BitsPerPixel));
            }
            if (this.lcdDeviceType == LcdDeviceType.Monochrome)
            {
                this.opLcdMono.pbLcd.Image = this.lcdMonoSplash;
            }
            else
            {
                this.opLcdColor.pbColorLcd.Image = this.lcdColorSplash;
            }
            if (ShowStatus)
            {
                if (this.opLcdGeneral.cbLcdRoute.Checked && this.opLcdGeneral.cbLcdRoute.Enabled)
                {
                    try
                    {
                        if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                        {
                            byte[] lcdData = this.LcdGetMonoView(this.lcdMonoSplash, 0);
                            this.LcdSendToSharer(lcdData);
                        }
                        else
                        {
                            byte[] buffer2 = this.LcdGetColorView(this.lcdColorSplash, 0);
                            this.LcdSendToSharer(buffer2);
                        }
                        return;
                    }
                    catch (Exception exception3)
                    {
                        this.UpdateLcdStatus(exception3.Message, true);
                        return;
                    }
                }
                try
                {
                    if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                    {
                        this.lcdDevice.UpdateBitmap(this.LcdGetMonoView(this.lcdMonoSplash, 0), LcdPriority.Normal, LcdUpdateMode.Async);
                        this.lcdDevice.DoUpdateAndDraw();
                    }
                    else
                    {
                        this.lcdDevice.UpdateBitmap(this.LcdGetColorView(this.lcdColorSplash, 0), LcdPriority.Normal, LcdUpdateMode.Async);
                        this.lcdDevice.DoUpdateAndDraw();
                    }
                }
                catch (Exception exception4)
                {
                    this.UpdateLcdStatus(exception4.Message, true);
                }
            }
        }

        private void lbGraph_MouseHover(object sender, EventArgs e)
        {
            this.ttGraphList.SetToolTip((Control) sender, "CTRL-Click to toggle one.");
        }

        private void lbGraph_MouseUp(object sender, MouseEventArgs e)
        {
            this.updateEncGraph = true;
        }

        private void lcdDevice_SoftButtonsChanged(object sender, LcdSoftButtonsEventArgs e)
        {
            this.DoLcdButton(e.SoftButtons.ToString());
        }

        public byte[] LcdGetColorView(Bitmap img, int bitmapYOffset)
        {
            img = img.Clone(new Rectangle(0, bitmapYOffset, 320, 240), PixelFormat.Format32bppArgb);
            return this.BmpToBytes(img);
        }

        public byte[] LcdGetMonoView(Bitmap img, int bitmapYOffset)
        {
            byte[] buffer = new byte[0x1ae0];
            img = img.Clone(new Rectangle(0, bitmapYOffset, 160, 0x2b), PixelFormat.Format32bppArgb);
            byte[] buffer2 = this.BmpToBytes(img);
            for (int i = 0; i < 0x2b; i++)
            {
                for (int j = 0; j < 160; j++)
                {
                    int index = j + (i * 160);
                    buffer[index] = buffer2[index * 4];
                    if (buffer[index] > 0x7f)
                    {
                        buffer[index] = 0;
                    }
                    else
                    {
                        buffer[index] = 0xff;
                    }
                }
            }
            return buffer;
        }

        private void lcdHandle_DeviceArrival(object sender, LcdDeviceTypeEventArgs e)
        {
            this.lcdDeviceSet = true;
            this.lcdDeviceType = e.DeviceType;
            this.lcdWaitForDevice.Set();
        }

        public void LcdRegisterMode(string ModeString)
        {
            if (string.IsNullOrEmpty(ModeString))
            {
                throw new ArgumentNullException("The mode string cannot be empty.");
            }
            if (this.registeredLcdModes.Contains(ModeString))
            {
                throw new ArgumentException("This mode is already registered.  Mode strings must be unique.");
            }
            this.registeredLcdModes.Add(ModeString);
        }

        internal void LcdSendToSharer(byte[] lcdData)
        {
            byte[] inArray = this.MemCompress(lcdData);
            this.clipXmlWriter.WriteStartElement("LcdBitmap");
            this.clipXmlWriter.WriteAttributeString("Length", lcdData.Length.ToString());
            this.clipXmlWriter.WriteString(System.Convert.ToBase64String(inArray));
            this.clipXmlWriter.WriteEndElement();
            this.clipXmlWriter.Flush();
        }

        public bool LcdUnregisterMode(string ModeString)
        {
            int index = this.registeredLcdModes.IndexOf(ModeString);
            if (index <= -1)
            {
                return false;
            }
            if (this.currentLcdMode > index)
            {
                this.currentLcdMode--;
            }
            this.registeredLcdModes.RemoveAt(index);
            return true;
        }

        private void linkEmail_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("mailto:aditu@maine.rr.com");
        }

        private void linkLabelAppData_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start(this.AppDataFolder.FullName);
        }

        private void linkLabelGetPlugins_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("http://advancedcombattracker.com/download.php");
        }

        private void linkRegex_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("http://www.regular-expressions.info/");
        }

        private void linkURL_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("http://advancedcombattracker.com/");
        }

        internal void LoadNewSettings(string XmlFileName)
        {
            XmlTextReader xReader = new XmlTextReader(XmlFileName);
            this.LoadNewSettings(xReader);
        }

        public void LoadNewSettings(XmlTextReader xReader)
        {
            int num = 0;
            try
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        try
                        {
                            if (xReader.LocalName == "SettingsSerializer")
                            {
                                num += this.LoadXmlSettingsSerializer(xReader);
                            }
                            if (xReader.LocalName == "SParseList")
                            {
                                num += this.LoadXmlSParseList(xReader);
                            }
                            if (((xReader.LocalName == "TextFormats") || (xReader.LocalName == "ClipFormats")) || (xReader.LocalName == "MiniFormats"))
                            {
                                num += this.LoadXmlTextFormats(xReader);
                            }
                            if (xReader.LocalName == "MacroExports")
                            {
                                num += this.LoadXmlMacroExports(xReader);
                            }
                            if (xReader.LocalName == "CustomTriggers")
                            {
                                num += this.LoadXmlCustomTriggers(xReader);
                                this.rebuildCustomTriggerTreeView = true;
                            }
                            if (xReader.LocalName == "SpellTimers")
                            {
                                num += this.LoadXmlSpellTimers(xReader);
                                ActGlobals.oFormSpellTimers.RebuildSpellTreeView();
                            }
                            if (xReader.LocalName == "TimerWhiteList")
                            {
                                num += this.LoadXmlTimerWhiteList(xReader);
                                ActGlobals.oFormSpellTimers.SyncWhiteList();
                            }
                            if (xReader.LocalName == "RenameFix")
                            {
                                num += this.LoadXmlRenameFix(xReader);
                            }
                            if (xReader.LocalName == "AbilityRedirectFix")
                            {
                                num += this.LoadXmlAbilityRedirectFix(xReader);
                            }
                            if (xReader.LocalName == "ActPlugins")
                            {
                                num += this.LoadXmlActPlugins(xReader);
                            }
                            if (xReader.LocalName == "XmlSubs")
                            {
                                num += this.LoadXmlXmlSubs(xReader);
                                this.SubUpdateListbox(false);
                            }
                            continue;
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "LoadNewSettings");
                            continue;
                        }
                    }
                }
            }
            catch (Exception exception2)
            {
                string text = "The XML settings file may be corrupt or unusable.";
                MessageBox.Show(text, this.Trans["messageBoxTitle-xmlPrefError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                this.WriteExceptionLog(exception2, text);
            }
            xReader.Close();
            if (((num > 0) && (MessageBox.Show("There were " + num + " errors encountered while loading settings.\nIf you just changed ACT versions, these errors may be a one-time result of ACT settings changing names/locations.\n\nPress [Yes] if you wish to open ACT's error log.", "Config Load Errors", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) == DialogResult.Yes)) && (this.debugFile.GetType() == System.Type.GetType("System.IO.FileStream")))
            {
                this.debugFile.Flush();
                Process.Start(((FileStream) this.debugFile).Name);
            }
        }

        private int LoadXmlAbilityRedirectFix(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "Redirect"))
                        {
                            return num;
                        }
                        try
                        {
                            RedirectFix newItem = new RedirectFix(xReader.GetAttribute("Ability"), xReader.GetAttribute("Into"), int.Parse(xReader.GetAttribute("Type"))) {
                                Active = bool.Parse(xReader.GetAttribute("Active"))
                            };
                            this.RedirectAddFix(newItem);
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "Redirect" + xReader.ReadOuterXml());
                        }
                    }
                }
                return num;
            }
            return num;
        }

        private int LoadXmlActPlugins(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "Plugin"))
                        {
                            return num;
                        }
                        try
                        {
                            string attribute = xReader.GetAttribute("Path");
                            for (int i = this.pPluginInfos.Controls.Count - 1; i >= 0; i--)
                            {
                                ActPluginData tag = (ActPluginData) this.pPluginInfos.Controls[i].Tag;
                                if (tag.pluginFile.FullName == attribute)
                                {
                                    try
                                    {
                                        if (tag.pluginObj != null)
                                        {
                                            tag.cbEnabled.Checked = false;
                                        }
                                    }
                                    catch
                                    {
                                        num++;
                                    }
                                    this.pPluginInfos.Controls.RemoveAt(i);
                                    break;
                                }
                            }
                            ActPluginData data2 = this.AddPluginPanel(attribute, true);
                            if (System.Convert.ToBoolean(xReader.GetAttribute("Enabled")) && (data2 != null))
                            {
                                data2.cbEnabled.Checked = true;
                            }
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "Plugin" + xReader.ReadOuterXml());
                        }
                    }
                }
                return num;
            }
            return num;
        }

        private int LoadXmlCustomTriggers(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "Trigger"))
                        {
                            return num;
                        }
                        try
                        {
                            string attribute = xReader.GetAttribute("Regex");
                            string cCategory = xReader.GetAttribute("Category");
                            CustomTrigger cT = new CustomTrigger(attribute, cCategory);
                            if (this.customTriggers.ContainsKey(cT.Key))
                            {
                                cT = this.customTriggers[cT.Key];
                            }
                            try
                            {
                                cT.SoundType = string.IsNullOrEmpty(xReader.GetAttribute("SoundType")) ? cT.SoundType : int.Parse(xReader.GetAttribute("SoundType"));
                            }
                            catch
                            {
                            }
                            if (!string.IsNullOrEmpty(xReader.GetAttribute("SoundData")))
                            {
                                cT.SoundData = xReader.GetAttribute("SoundData");
                            }
                            if (!string.IsNullOrEmpty(xReader.GetAttribute("TimerName")))
                            {
                                cT.TimerName = xReader.GetAttribute("TimerName");
                            }
                            try
                            {
                                cT.Active = string.IsNullOrEmpty(xReader.GetAttribute("Active")) ? cT.Active : bool.Parse(xReader.GetAttribute("Active"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                cT.Timer = string.IsNullOrEmpty(xReader.GetAttribute("Timer")) ? cT.Timer : bool.Parse(xReader.GetAttribute("Timer"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                cT.Tabbed = string.IsNullOrEmpty(xReader.GetAttribute("Tabbed")) ? cT.Tabbed : bool.Parse(xReader.GetAttribute("Tabbed"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                cT.RestrictToCategoryZone = string.IsNullOrEmpty(xReader.GetAttribute("CategoryRestrict")) ? cT.RestrictToCategoryZone : bool.Parse(xReader.GetAttribute("CategoryRestrict"));
                            }
                            catch
                            {
                            }
                            this.AddEditCustomTrigger(cT);
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "CustomTrigger" + xReader.ReadOuterXml());
                        }
                    }
                }
                return num;
            }
            return num;
        }

        private int LoadXmlMacroExports(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "MacroExport"))
                        {
                            return num;
                        }
                        try
                        {
                            MacroExportSetting setting = new MacroExportSetting(xReader.GetAttribute("Channel"), int.Parse(xReader.GetAttribute("PresetIndex")), int.Parse(xReader.GetAttribute("MaxLines")), bool.Parse(xReader.GetAttribute("Align")), xReader.GetAttribute("File"));
                            bool flag = bool.Parse(xReader.GetAttribute("Checked"));
                            if (!this.opTextExports.clbExFilePresets.Items.Contains(setting))
                            {
                                this.opTextExports.clbExFilePresets.Items.Add(setting);
                            }
                            int index = this.opTextExports.clbExFilePresets.Items.IndexOf(setting);
                            this.opTextExports.clbExFilePresets.SetItemChecked(index, flag);
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "MacroExport" + xReader.ReadOuterXml());
                        }
                    }
                }
                return num;
            }
            return num;
        }

        public void LoadXmlRecords(string Path)
        {
            FileInfo info = new FileInfo(Path);
            if (info.Exists)
            {
                XmlTextReader reader = new XmlTextReader(info.FullName);
                try
                {
                    while (reader.Read())
                    {
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            try
                            {
                                if (reader.LocalName == "Record")
                                {
                                    HistoryRecord item = new HistoryRecord(int.Parse(reader.GetAttribute("Type")), DateTime.FromBinary(long.Parse(reader.GetAttribute("StartTime"))), DateTime.FromBinary(long.Parse(reader.GetAttribute("EndTime"))), reader.GetAttribute("Label"), reader.GetAttribute("CharName"));
                                    switch (item.Type)
                                    {
                                        case 0:
                                        {
                                            this.ZoneDatabaseAdd(item);
                                            continue;
                                        }
                                        case 1:
                                        {
                                            this.EncDatabaseAdd(item);
                                            continue;
                                        }
                                    }
                                }
                                continue;
                            }
                            catch (Exception exception)
                            {
                                string moreInfo = string.Format("Error while parsing XML settings: Line #{0} ({1})\n{2}", reader.LineNumber, reader.LocalName, exception.Message);
                                MessageBox.Show(moreInfo + this.Trans["messageBox-xmlPrefError"].DisplayedText, this.Trans["messageBoxTitle-xmlPrefError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                this.WriteExceptionLog(exception, moreInfo);
                                continue;
                            }
                        }
                    }
                }
                catch (Exception exception2)
                {
                    string text = "The XML settings file may be corrupt or unusable.  Loading defaults where applicable.";
                    MessageBox.Show(text, this.Trans["messageBoxTitle-xmlPrefError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    this.WriteExceptionLog(exception2, text);
                }
                reader.Close();
            }
        }

        private int LoadXmlRenameFix(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "Rename"))
                        {
                            return num;
                        }
                        try
                        {
                            RenameFix newItem = new RenameFix(xReader.GetAttribute("Before"), xReader.GetAttribute("After")) {
                                Active = bool.Parse(xReader.GetAttribute("Active"))
                            };
                            this.RenameAddFix(newItem);
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "Rename" + xReader.ReadOuterXml());
                        }
                    }
                }
                return num;
            }
            return num;
        }

        private int LoadXmlSettingsSerializer(XmlTextReader xReader)
        {
            return this.xmlSettings.ImportFromXml(xReader);
        }

        private int LoadXmlSParseList(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "Player"))
                        {
                            return num;
                        }
                        try
                        {
                            string attribute = xReader.GetAttribute("Name");
                            if (System.Convert.ToBoolean(xReader.GetAttribute("Checked")))
                            {
                                this.SelectiveListAdd(attribute);
                            }
                            else if (ActGlobals.selectiveList.ContainsKey(attribute.ToUpper()))
                            {
                                ActGlobals.selectiveList[attribute.ToUpper()] = false;
                            }
                            else
                            {
                                ActGlobals.selectiveList.Add(attribute.ToUpper(), false);
                            }
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "SParseList" + xReader.ReadOuterXml());
                        }
                        this.selectiveListRebuild = true;
                    }
                }
                return num;
            }
            return num;
        }

        private int LoadXmlSpellTimers(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "Spell"))
                        {
                            return num;
                        }
                        try
                        {
                            string attribute = xReader.GetAttribute("Name");
                            string category = xReader.GetAttribute("Category");
                            TimerData newTd = new TimerData(attribute, category);
                            if (ActGlobals.oFormSpellTimers.TimerDefs.ContainsKey(newTd.Key))
                            {
                                newTd = ActGlobals.oFormSpellTimers.TimerDefs[newTd.Key];
                            }
                            try
                            {
                                newTd.TimerValue = string.IsNullOrEmpty(xReader.GetAttribute("Timer")) ? newTd.TimerValue : int.Parse(xReader.GetAttribute("Timer"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                newTd.ActiveInList = string.IsNullOrEmpty(xReader.GetAttribute("Checked")) ? newTd.ActiveInList : bool.Parse(xReader.GetAttribute("Checked"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                newTd.OnlyMasterTicks = string.IsNullOrEmpty(xReader.GetAttribute("OnlyMasterTicks")) ? newTd.OnlyMasterTicks : bool.Parse(xReader.GetAttribute("OnlyMasterTicks"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                newTd.RestrictToMe = string.IsNullOrEmpty(xReader.GetAttribute("Restrict")) ? newTd.RestrictToMe : bool.Parse(xReader.GetAttribute("Restrict"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                newTd.AbsoluteTiming = string.IsNullOrEmpty(xReader.GetAttribute("Absolute")) ? newTd.AbsoluteTiming : bool.Parse(xReader.GetAttribute("Absolute"));
                            }
                            catch
                            {
                            }
                            if (!string.IsNullOrEmpty(xReader.GetAttribute("StartWav")))
                            {
                                newTd.StartSoundData = xReader.GetAttribute("StartWav");
                            }
                            if (!string.IsNullOrEmpty(xReader.GetAttribute("WarningWav")))
                            {
                                newTd.WarningSoundData = xReader.GetAttribute("WarningWav");
                            }
                            try
                            {
                                newTd.WarningValue = string.IsNullOrEmpty(xReader.GetAttribute("WarningValue")) ? newTd.WarningValue : int.Parse(xReader.GetAttribute("WarningValue"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                newTd.RadialDisplay = string.IsNullOrEmpty(xReader.GetAttribute("RadialDisplay")) ? newTd.RadialDisplay : bool.Parse(xReader.GetAttribute("RadialDisplay"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                newTd.Modable = string.IsNullOrEmpty(xReader.GetAttribute("Modable")) ? newTd.Modable : bool.Parse(xReader.GetAttribute("Modable"));
                            }
                            catch
                            {
                            }
                            if (!string.IsNullOrEmpty(xReader.GetAttribute("Tooltip")))
                            {
                                newTd.Tooltip = xReader.GetAttribute("Tooltip");
                            }
                            try
                            {
                                newTd.FillColor = System.Drawing.Color.FromArgb(string.IsNullOrEmpty(xReader.GetAttribute("FillColor")) ? newTd.FillColor.ToArgb() : int.Parse(xReader.GetAttribute("FillColor")));
                            }
                            catch
                            {
                            }
                            try
                            {
                                newTd.Panel1Display = string.IsNullOrEmpty(xReader.GetAttribute("Panel1")) ? newTd.Panel1Display : bool.Parse(xReader.GetAttribute("Panel1"));
                            }
                            catch
                            {
                                newTd.Panel1Display = true;
                            }
                            try
                            {
                                newTd.Panel2Display = string.IsNullOrEmpty(xReader.GetAttribute("Panel2")) ? newTd.Panel2Display : bool.Parse(xReader.GetAttribute("Panel2"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                newTd.RemoveValue = string.IsNullOrEmpty(xReader.GetAttribute("RemoveValue")) ? newTd.RemoveValue : int.Parse(xReader.GetAttribute("RemoveValue"));
                            }
                            catch
                            {
                            }
                            try
                            {
                                newTd.RestrictToCategory = string.IsNullOrEmpty(xReader.GetAttribute("RestrictCategory")) ? newTd.RestrictToCategory : bool.Parse(xReader.GetAttribute("RestrictCategory"));
                            }
                            catch
                            {
                            }
                            ActGlobals.oFormSpellTimers.AddEditTimerDef(newTd);
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "SpellTimer" + xReader.ReadOuterXml());
                        }
                    }
                }
                return num;
            }
            return num;
        }

        private int LoadXmlTextFormats(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "Format"))
                        {
                            return num;
                        }
                        try
                        {
                            string attribute = xReader.GetAttribute("PlayerFormat");
                            string alliesFormat = xReader.GetAttribute("AlliesFormat");
                            string str3 = xReader.GetAttribute("Sorting");
                            if (string.IsNullOrEmpty(str3))
                            {
                                str3 = "Damage";
                            }
                            bool showOnlyAllies = System.Convert.ToBoolean(xReader.GetAttribute("ShowOnlyAllies"));
                            bool showAlliedInfo = System.Convert.ToBoolean(xReader.GetAttribute("ShowAlliesInfo"));
                            TextExportFormatOptions item = new TextExportFormatOptions(attribute, str3, showOnlyAllies, showAlliedInfo, alliesFormat);
                            this.textExportFormats.Add(item);
                            if (!this.opTextExports.ddlClipFormat.Items.Contains(item))
                            {
                                this.opTextExports.ddlClipFormat.Items.Add(item);
                            }
                            if (!this.opTextExports.ddlExMacroClipPreset.Items.Contains(item))
                            {
                                this.opTextExports.ddlExMacroClipPreset.Items.Add(item);
                            }
                            if (!this.opMiniParse.ddlMiniFormat.Items.Contains(item))
                            {
                                this.opMiniParse.ddlMiniFormat.Items.Add(item);
                            }
                            if (!this.opLcdGeneral.ddlLcdMiniFormat.Items.Contains(item))
                            {
                                this.opLcdGeneral.ddlLcdMiniFormat.Items.Add(item);
                            }
                            if (!this.opLcdGeneral.ddlLcdPersonalFormat.Items.Contains(item))
                            {
                                this.opLcdGeneral.ddlLcdPersonalFormat.Items.Add(item);
                            }
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "ClipFormat" + xReader.ReadOuterXml());
                        }
                    }
                }
                return num;
            }
            return num;
        }

        private int LoadXmlTimerWhiteList(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "Character"))
                        {
                            return num;
                        }
                        try
                        {
                            string str = xReader.ReadString();
                            if (!ActGlobals.oFormSpellTimers.WhiteList.ContainsKey(str.ToLower()))
                            {
                                ActGlobals.oFormSpellTimers.WhiteList.Add(str.ToLower(), str);
                            }
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "TimerWhiteList" + xReader.ReadOuterXml());
                        }
                    }
                }
                return num;
            }
            return num;
        }

        private int LoadXmlXmlSubs(XmlTextReader xReader)
        {
            int num = 0;
            if (!xReader.IsEmptyElement)
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.EndElement)
                    {
                        return num;
                    }
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        if (!(xReader.LocalName == "XmlSub"))
                        {
                            return num;
                        }
                        try
                        {
                            string attribute = xReader.GetAttribute("Url");
                            bool rbAuto = System.Convert.ToBoolean(xReader.GetAttribute("Auto"));
                            bool rbNotify = System.Convert.ToBoolean(xReader.GetAttribute("Notify"));
                            bool rbIgnore = System.Convert.ToBoolean(xReader.GetAttribute("Ignore"));
                            DateTime time = DateTime.FromBinary(long.Parse(xReader.GetAttribute("LastModified")));
                            DateTime time2 = DateTime.FromBinary(long.Parse(xReader.GetAttribute("LastUpdated")));
                            XmlShareEntry entry = new XmlShareEntry(attribute, rbIgnore, rbNotify, rbAuto) {
                                LastModified = time,
                                LastUpdated = time2
                            };
                            this.subEntries.Add(entry.Url, entry);
                        }
                        catch (Exception exception)
                        {
                            num++;
                            this.WriteExceptionLog(exception, "XmlSub" + xReader.ReadOuterXml());
                        }
                    }
                }
                return num;
            }
            return num;
        }

        private void lookupByCombatantToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Parent.Parent.Index];
                CombatantData combatant = data.Items[this.tvDG.SelectedNode.Parent.Parent.Index].GetCombatant(this.tvDG.SelectedNode.Parent.Text);
                DamageTypeData dtInput = combatant.Items[this.tvDG.SelectedNode.Text];
                if (dtInput.Items.Count > 0)
                {
                    ActGlobals.oFormByCombatantLookup.ShowLookup(string.Format("{0} - {1}", combatant.Name, dtInput.Type), dtInput);
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void lvDG_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            int num = -1;
            int column = e.Column;
            string tableType = this.tableType;
            if (tableType != null)
            {
                if (!(tableType == "ED"))
                {
                    if (tableType == "MD")
                    {
                        for (int i = 0; i < this.opTableDamageType.clbDT.Items.Count; i++)
                        {
                            string str2 = (string) this.opTableDamageType.clbDT.Items[i];
                            if (this.opTableDamageType.clbDT.GetItemChecked(i))
                            {
                                num++;
                            }
                            if (column == num)
                            {
                                if (ActGlobals.mDSort == str2)
                                {
                                    this.opMainTableGen.cbReverseSort.Checked = !this.opMainTableGen.cbReverseSort.Checked;
                                }
                                ActGlobals.mDSort2 = ActGlobals.mDSort;
                                this.opTableDamageType.btnMDSort2.Text = this.opTableDamageType.btnMDSort.Text;
                                ActGlobals.mDSort = str2;
                                this.opTableDamageType.btnMDSort.Text = str2;
                                break;
                            }
                        }
                    }
                    else if (tableType == "AT")
                    {
                        for (int j = 0; j < this.opTableAttackType.clbAT.Items.Count; j++)
                        {
                            string str3 = (string) this.opTableAttackType.clbAT.Items[j];
                            if (this.opTableAttackType.clbAT.GetItemChecked(j))
                            {
                                num++;
                            }
                            if (column == num)
                            {
                                if (ActGlobals.aTSort == str3)
                                {
                                    this.opMainTableGen.cbReverseSort.Checked = !this.opMainTableGen.cbReverseSort.Checked;
                                }
                                ActGlobals.aTSort2 = ActGlobals.aTSort;
                                this.opTableAttackType.btnATSort2.Text = this.opTableAttackType.btnATSort.Text;
                                ActGlobals.aTSort = str3;
                                this.opTableAttackType.btnATSort.Text = str3;
                                break;
                            }
                        }
                    }
                }
                else
                {
                    for (int k = 0; k < this.opTableEncounter.clbED.Items.Count; k++)
                    {
                        string str = (string) this.opTableEncounter.clbED.Items[k];
                        if (this.opTableEncounter.clbED.GetItemChecked(k))
                        {
                            num++;
                        }
                        if (column == num)
                        {
                            if (ActGlobals.eDSort == str)
                            {
                                this.opMainTableGen.cbReverseSort.Checked = !this.opMainTableGen.cbReverseSort.Checked;
                            }
                            ActGlobals.eDSort2 = ActGlobals.eDSort;
                            this.opTableEncounter.btnEDSort2.Text = this.opTableEncounter.btnEDSort.Text;
                            ActGlobals.eDSort = str;
                            this.opTableEncounter.btnEDSort.Text = str;
                            break;
                        }
                    }
                }
            }
            if (num > -1)
            {
                try
                {
                    string str5;
                    if ((((this.tableType == "AT") || (this.tableType == "MD")) || (this.tableType == "ED")) && ((str5 = this.tableType) != null))
                    {
                        if (!(str5 == "AT"))
                        {
                            if (str5 == "MD")
                            {
                                goto Label_039B;
                            }
                            if (str5 == "ED")
                            {
                                goto Label_03CD;
                            }
                        }
                        else
                        {
                            try
                            {
                                List<MasterSwing> currentTable = (List<MasterSwing>) this.currentTable;
                                currentTable.Sort();
                                if (this.opMainTableGen.cbReverseSort.Checked)
                                {
                                    currentTable.Reverse();
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    goto Label_03FF;
                Label_039B:
                    try
                    {
                        List<AttackType> list2 = (List<AttackType>) this.currentTable;
                        list2.Sort();
                        if (this.opMainTableGen.cbReverseSort.Checked)
                        {
                            list2.Reverse();
                        }
                    }
                    catch
                    {
                    }
                    goto Label_03FF;
                Label_03CD:
                    try
                    {
                        List<CombatantData> list3 = (List<CombatantData>) this.currentTable;
                        list3.Sort();
                        if (this.opMainTableGen.cbReverseSort.Checked)
                        {
                            list3.Reverse();
                        }
                    }
                    catch
                    {
                    }
                Label_03FF:
                    this.lastSelectedNode = null;
                    this.tv1_AfterSelect(sender, new TreeViewEventArgs(this.tvDG.SelectedNode, TreeViewAction.Unknown));
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, string.Empty);
                }
            }
        }

        private void lvDG_ItemActivate(object sender, EventArgs e)
        {
            try
            {
                int num = this.lvDG.SelectedIndices[0];
                ListViewItem item = this.lvDG.Items[num];
                if (this.tableType == "AT")
                {
                    List<MasterSwing> currentTable = (List<MasterSwing>) this.currentTable;
                    int num2 = this.lvDG.SelectedIndices[0];
                    MasterSwing swing = currentTable[num2];
                    ActGlobals.oFormEncounterLogs.ShowLogs(swing.ParentEncounter.LogLines);
                    ActGlobals.oFormEncounterLogs.ScrollToGlobalTimeSorter(swing.TimeSorter);
                }
                else
                {
                    string text;
                    if (this.tableType == "EL")
                    {
                        List<EncounterData> list2 = (List<EncounterData>) this.currentTable;
                        text = list2[num].ToString();
                    }
                    else
                    {
                        text = item.Text;
                    }
                    TreeNode selectedNode = this.tvDG.SelectedNode;
                    selectedNode.Expand();
                    TreeNode node2 = null;
                    foreach (TreeNode node3 in selectedNode.Nodes)
                    {
                        if (node3.Text == text)
                        {
                            node2 = node3;
                            break;
                        }
                    }
                    if (node2 != null)
                    {
                        this.tvDG.SelectedNode = node2;
                    }
                }
            }
            catch
            {
            }
        }

        private void lvDG_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                try
                {
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 3].Text = string.Format("Copy \"{0}\"", this.lvDG.HitTest(e.X, e.Y).SubItem.Text);
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 3].Tag = this.lvDG.HitTest(e.X, e.Y).SubItem.Text;
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 2].Text = string.Format("Append \", {0}\"", this.lvDG.HitTest(e.X, e.Y).SubItem.Text);
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 2].Tag = string.Format(", {0}", this.lvDG.HitTest(e.X, e.Y).SubItem.Text);
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 1].Text = string.Format("Append \"<newline>\n{0}\"", this.lvDG.HitTest(e.X, e.Y).SubItem.Text);
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 1].Tag = string.Format("\n{0}", this.lvDG.HitTest(e.X, e.Y).SubItem.Text);
                }
                catch
                {
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 3].Text = "Copy \"\"";
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 3].Tag = string.Empty;
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 2].Text = "Append \"\"";
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 2].Tag = string.Empty;
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 1].Text = "Append Newline";
                    this.lvDG.ContextMenuStrip.Items[this.lvDG.ContextMenuStrip.Items.Count - 1].Tag = "\n";
                }
            }
        }

        private void lvDG_RetrieveVirtualItem(object sender, RetrieveVirtualItemEventArgs e)
        {
            int index = this.iListViewItems.IndexOf(e.ItemIndex);
            if (index > -1)
            {
                e.Item = this.cListViewItems[index];
            }
            else
            {
                ListViewItem item = new ListViewItem {
                    UseItemStyleForSubItems = false
                };
                int num2 = -1;
                string tableType = this.tableType;
                if (tableType != null)
                {
                    if (!(tableType == "EL"))
                    {
                        if (tableType == "ED")
                        {
                            CombatantData data2 = ((List<CombatantData>) this.currentTable)[e.ItemIndex];
                            List<CombatantData> currentTable = (List<CombatantData>) this.currentTable;
                            List<CombatantData> allies = new List<CombatantData>();
                            if (currentTable.Count > 0)
                            {
                                allies = currentTable[0].Parent.GetAllies();
                            }
                            if ((allies != null) && allies.Contains(data2))
                            {
                                item.ForeColor = this.opColorUserInterface.ccDGAllyText.ForeColorSetting;
                            }
                            bool flag2 = data2.Name == ActGlobals.charName;
                            if (flag2)
                            {
                                item.BackColor = this.opColorUserInterface.ccDGPersonalBackcolor.ForeColorSetting;
                            }
                            for (int i = 0; i < this.opTableEncounter.clbED.Items.Count; i++)
                            {
                                string str2 = (string) this.opTableEncounter.clbED.Items[i];
                                if (this.opTableEncounter.clbED.GetItemChecked(i))
                                {
                                    num2++;
                                    if (num2 == 0)
                                    {
                                        item.Text = CombatantData.ColumnDefs[str2].GetCellData(data2);
                                    }
                                    else
                                    {
                                        item.SubItems.Add(CombatantData.ColumnDefs[str2].GetCellData(data2), (CombatantData.ColumnDefs[str2].GetCellForeColor(data2) == System.Drawing.Color.Transparent) ? this.lvDG.ForeColor : CombatantData.ColumnDefs[str2].GetCellForeColor(data2), flag2 ? this.opColorUserInterface.ccDGPersonalBackcolor.ForeColorSetting : ((CombatantData.ColumnDefs[str2].GetCellBackColor(data2) == System.Drawing.Color.Transparent) ? this.lvDG.BackColor : CombatantData.ColumnDefs[str2].GetCellBackColor(data2)), this.lvDG.Font);
                                    }
                                }
                            }
                            e.Item = item;
                        }
                        else if (tableType == "CD")
                        {
                            DamageTypeData data3 = ((List<DamageTypeData>) this.currentTable)[e.ItemIndex];
                            for (int j = 0; j < this.opTableCombatant.clbCD.Items.Count; j++)
                            {
                                string str3 = (string) this.opTableCombatant.clbCD.Items[j];
                                if (this.opTableCombatant.clbCD.GetItemChecked(j))
                                {
                                    num2++;
                                    if (num2 == 0)
                                    {
                                        item.Text = DamageTypeData.ColumnDefs[str3].GetCellData(data3);
                                    }
                                    else
                                    {
                                        item.SubItems.Add(DamageTypeData.ColumnDefs[str3].GetCellData(data3), (DamageTypeData.ColumnDefs[str3].GetCellForeColor(data3) == System.Drawing.Color.Transparent) ? this.lvDG.ForeColor : DamageTypeData.ColumnDefs[str3].GetCellForeColor(data3), (DamageTypeData.ColumnDefs[str3].GetCellBackColor(data3) == System.Drawing.Color.Transparent) ? this.lvDG.BackColor : DamageTypeData.ColumnDefs[str3].GetCellBackColor(data3), this.lvDG.Font);
                                    }
                                }
                            }
                            e.Item = item;
                        }
                        else if (tableType == "MD")
                        {
                            AttackType type = ((List<AttackType>) this.currentTable)[e.ItemIndex];
                            for (int k = 0; k < this.opTableDamageType.clbDT.Items.Count; k++)
                            {
                                string str4 = (string) this.opTableDamageType.clbDT.Items[k];
                                if (this.opTableDamageType.clbDT.GetItemChecked(k))
                                {
                                    num2++;
                                    if (num2 == 0)
                                    {
                                        item.Text = AttackType.ColumnDefs[str4].GetCellData(type);
                                    }
                                    else
                                    {
                                        item.SubItems.Add(AttackType.ColumnDefs[str4].GetCellData(type), (AttackType.ColumnDefs[str4].GetCellForeColor(type) == System.Drawing.Color.Transparent) ? this.lvDG.ForeColor : AttackType.ColumnDefs[str4].GetCellForeColor(type), (AttackType.ColumnDefs[str4].GetCellBackColor(type) == System.Drawing.Color.Transparent) ? this.lvDG.BackColor : AttackType.ColumnDefs[str4].GetCellBackColor(type), this.lvDG.Font);
                                    }
                                }
                            }
                            e.Item = item;
                        }
                        else if (tableType == "AT")
                        {
                            MasterSwing swing = ((List<MasterSwing>) this.currentTable)[e.ItemIndex];
                            for (int m = 0; m < this.opTableAttackType.clbAT.Items.Count; m++)
                            {
                                string str5 = (string) this.opTableAttackType.clbAT.Items[m];
                                if (this.opTableAttackType.clbAT.GetItemChecked(m))
                                {
                                    num2++;
                                    if (num2 == 0)
                                    {
                                        item.Text = MasterSwing.ColumnDefs[str5].GetCellData(swing);
                                    }
                                    else
                                    {
                                        item.SubItems.Add(MasterSwing.ColumnDefs[str5].GetCellData(swing), (MasterSwing.ColumnDefs[str5].GetCellForeColor(swing) == System.Drawing.Color.Transparent) ? this.lvDG.ForeColor : MasterSwing.ColumnDefs[str5].GetCellForeColor(swing), (MasterSwing.ColumnDefs[str5].GetCellBackColor(swing) == System.Drawing.Color.Transparent) ? this.lvDG.BackColor : MasterSwing.ColumnDefs[str5].GetCellBackColor(swing), this.lvDG.Font);
                                    }
                                }
                            }
                            e.Item = item;
                        }
                    }
                    else
                    {
                        EncounterData data = ((List<EncounterData>) this.currentTable)[e.ItemIndex];
                        switch (data.GetEncounterSuccessLevel())
                        {
                            case 1:
                                item.ForeColor = this.opColorUserInterface.ccEncLabel1.ForeColorSetting;
                                break;

                            case 2:
                                item.ForeColor = this.opColorUserInterface.ccEncLabel2.ForeColorSetting;
                                break;

                            case 3:
                                item.ForeColor = this.opColorUserInterface.ccEncLabel3.ForeColorSetting;
                                break;

                            default:
                                item.ForeColor = this.opColorUserInterface.fccDataGrid.ForeColorSetting;
                                break;
                        }
                        for (int n = 0; n < this.opTableZone.clbZD.Items.Count; n++)
                        {
                            string name = (string) this.opTableZone.clbZD.Items[n];
                            if (this.opTableZone.clbZD.GetItemChecked(n))
                            {
                                num2++;
                                if (num2 == 0)
                                {
                                    item.Text = data.GetColumnByName(name);
                                }
                                else
                                {
                                    item.SubItems.Add(data.GetColumnByName(name));
                                }
                            }
                        }
                        e.Item = item;
                    }
                }
                this.iListViewItems.Add(e.ItemIndex);
                this.cListViewItems.Add(e.Item);
            }
        }

        private int MasterSwingCompareSpecial(MasterSwing Left, MasterSwing Right)
        {
            return Left.Special.CompareTo(Right.Special);
        }

        private void mcRecords_DateChanged(object sender, DateRangeEventArgs e)
        {
            DateTime time = new DateTime(e.Start.Year, e.Start.Month, e.Start.Day, 0, 0, 0);
            DateTime time2 = new DateTime(e.End.Year, e.End.Month, e.End.Day, 0x17, 0x3b, 0x3b);
            this.dtRecordStartDate.Value = time;
            this.dtRecordStartTime.Value = time;
            this.dtRecordEndDate.Value = time2;
            this.dtRecordEndTime.Value = time2;
        }

        private byte[] MemCompress(byte[] inputBytes)
        {
            MemoryStream baseOutputStream = new MemoryStream();
            DeflaterOutputStream stream2 = new DeflaterOutputStream(baseOutputStream);
            stream2.Write(inputBytes, 0, inputBytes.Length);
            stream2.Finish();
            return baseOutputStream.ToArray();
        }

        private byte[] MemDecompress(byte[] inputBytes, int ExpectedLen)
        {
            MemoryStream baseInputStream = new MemoryStream(inputBytes);
            InflaterInputStream stream2 = new InflaterInputStream(baseInputStream);
            byte[] buffer = new byte[ExpectedLen];
            stream2.Read(buffer, 0, ExpectedLen);
            return buffer;
        }

        private void notifyIcon1_BalloonTipClicked(object sender, EventArgs e)
        {
            this.opXmlShare.PromptStoredSnippets();
        }

        private void notifyIcon1_BalloonTipClosed(object sender, EventArgs e)
        {
            this.notifyIcon1.Visible = this.opMisc.cbMinimizeToIcon.Checked;
        }

        private void notifyIcon1_Click(object sender, EventArgs e)
        {
            base.Show();
            base.WindowState = FormWindowState.Normal;
        }

        private void NotifySpell(string Attacker, string SpellName, bool Yourself, string Victim, bool Success, Dictionary<string, string> ExtraInfo)
        {
            if (!this.importThreadAlive)
            {
                ActGlobals.oFormSpellTimers.NotifySpell(Attacker.ToLower(), SpellName, Yourself, Victim.ToLower(), Success, ExtraInfo);
            }
        }

        public void OpenLog(bool GetCurrentZone, bool GetCharNameFromFile)
        {
            if ((this.readThread != null) && this.readThread.IsAlive)
            {
                this.readThreadAborting = true;
                while (this.readThreadAborting)
                {
                    Application.DoEvents();
                    Thread.Sleep(100);
                }
            }
            this.readThreadAborting = false;
            this.folderLogs = new DirectoryInfo(Path.GetDirectoryName(this.logFilePath));
            this.SplitLogFile(new FileInfo(this.logFilePath));
            try
            {
                this.logStream = new FileStream(this.logFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                this.logStream.Seek(0, SeekOrigin.End);
                this.readThread = new Thread(new ThreadStart(this.ReadLog));
                this.readThread.Name = "Log Reader";
                this.readThread.IsBackground = true;
                string str = ThreadInvokes.ControlGetText(this, this.opMisc.ddlLogPriority);
                if (str != null)
                {
                    if (!(str == "Above Normal"))
                    {
                        if (str == "Below Normal")
                        {
                            goto Label_0110;
                        }
                        if (str == "Lowest")
                        {
                            goto Label_011E;
                        }
                    }
                    else
                    {
                        this.readThread.Priority = ThreadPriority.AboveNormal;
                        goto Label_012A;
                    }
                }
                this.readThread.Priority = ThreadPriority.Normal;
                goto Label_012A;
            Label_0110:
                this.readThread.Priority = ThreadPriority.BelowNormal;
                goto Label_012A;
            Label_011E:
                this.readThread.Priority = ThreadPriority.Lowest;
            Label_012A:
                this.readThread.SetApartmentState(ApartmentState.STA);
                this.readThread.Start();
                FileInfo info = new FileInfo(this.logFilePath);
                this.ResetCheckLogs();
                this.SetCharName(GetCharNameFromFile);
                if (GetCurrentZone)
                {
                    this.FindZoneName(info.FullName, info.Length);
                }
                this.readThreadDataAvailable = false;
                if ((DateTime.Now - info.LastWriteTime) > TimeSpan.FromDays(14.0))
                {
                    MessageBox.Show("The currently open log file has not been modified for over two weeks.  Please ensure /log is on in-game and you have selected the correct log file.", "Old Log File", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                }
            }
            catch (UnauthorizedAccessException)
            {
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message, this.Trans["messageBoxTitle-startupLogError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                this.WriteExceptionLog(exception, this.Trans["messageBoxTitle-startupLogError"].DisplayedText);
            }
        }

        private void ParseCustom(DateTime timestamp, string logLine)
        {
            Parallel.For(0, this.activeCustomTriggers.Count, delegate (int ctIndex) {
                CustomTrigger trigger = this.activeCustomTriggers.Values[ctIndex];
                if (trigger.RegEx.IsMatch(logLine))
                {
                    if (trigger.Tabbed)
                    {
                        trigger.TabbedAge = 0;
                        if (trigger.RegEx.GetGroupNames().Length > 2)
                        {
                            ListViewItem lvi = new ListViewItem();
                            Match match = trigger.RegEx.Match(logLine);
                            string[] groupNames = trigger.RegEx.GetGroupNames();
                            for (int k = 0; k < groupNames.Length; k++)
                            {
                                if (k == 0)
                                {
                                    lvi.Text = timestamp.ToLongTimeString();
                                }
                                else
                                {
                                    lvi.SubItems.Add(match.Groups[k].Value);
                                }
                            }
                            lvi.Tag = logLine;
                            ThreadInvokes.ListViewInsert(this, trigger.TriggerListView, 0, lvi);
                        }
                        else
                        {
                            ListViewItem item2 = new ListViewItem {
                                Text = timestamp.ToLongTimeString()
                            };
                            item2.SubItems.Add(logLine);
                            item2.Tag = logLine;
                            ThreadInvokes.ListViewInsert(this, trigger.TriggerListView, 0, item2);
                        }
                    }
                    if (!this.importThreadAlive && !this.actFileThreadAlive)
                    {
                        if (trigger.Timer)
                        {
                            string str = "None";
                            string victim = "None";
                            Match match2 = trigger.RegEx.Match(logLine);
                            Dictionary<string, string> extraInfo = new Dictionary<string, string>();
                            if (match2.Success)
                            {
                                string[] strArray2 = trigger.RegEx.GetGroupNames();
                                for (int i = 0; i < match2.Groups.Count; i++)
                                {
                                    extraInfo.Add(strArray2[i], match2.Groups[i].Value);
                                }
                                if (extraInfo.ContainsKey("attacker") && (extraInfo["attacker"].Length > 0))
                                {
                                    str = extraInfo["attacker"];
                                }
                                if (extraInfo.ContainsKey("victim") && (extraInfo["victim"].Length > 0))
                                {
                                    victim = extraInfo["victim"];
                                }
                            }
                            ActGlobals.oFormSpellTimers.NotifySpell(str.ToLower(), trigger.TimerName, true, victim, true, extraInfo);
                        }
                        if ((DateTime.Now - trigger.LastAudioAlert) > TimeSpan.FromSeconds(1.0))
                        {
                            switch (trigger.SoundType)
                            {
                                case 1:
                                    SystemSounds.Beep.Play();
                                    break;

                                case 2:
                                    this.PlaySound(trigger.SoundData);
                                    break;

                                case 3:
                                    this.TTS(trigger.RegEx.Replace(logLine, trigger.SoundData));
                                    break;
                            }
                            trigger.LastAudioAlert = DateTime.Now;
                        }
                    }
                }
            });
        }

        private DateTime ParseDateTimeFromEQ2Log(string logLine)
        {
            try
            {
                int num2;
                if (logLine.Length < 0x27)
                {
                    return DateTime.MinValue;
                }
                int year = System.Convert.ToInt32(logLine.Substring(0x21, 4));
                switch (logLine.Substring(0x11, 3))
                {
                    case "Jan":
                        num2 = 1;
                        break;

                    case "Feb":
                        num2 = 2;
                        break;

                    case "Mar":
                        num2 = 3;
                        break;

                    case "Apr":
                        num2 = 4;
                        break;

                    case "May":
                        num2 = 5;
                        break;

                    case "Jun":
                        num2 = 6;
                        break;

                    case "Jul":
                        num2 = 7;
                        break;

                    case "Aug":
                        num2 = 8;
                        break;

                    case "Sep":
                        num2 = 9;
                        break;

                    case "Oct":
                        num2 = 10;
                        break;

                    case "Nov":
                        num2 = 11;
                        break;

                    case "Dec":
                        num2 = 12;
                        break;

                    default:
                        num2 = 1;
                        break;
                }
                int day = System.Convert.ToInt32(logLine.Substring(0x15, 2));
                int hour = System.Convert.ToInt32(logLine.Substring(0x18, 2));
                int minute = System.Convert.ToInt32(logLine.Substring(0x1b, 2));
                return new DateTime(year, num2, day, hour, minute, System.Convert.ToInt32(logLine.Substring(30, 2)));
            }
            catch
            {
                return DateTime.MinValue;
            }
        }

        public void ParseRawLogLine(bool isImport, DateTime ParsedLogTime, string LogLine)
        {
            int detectedType = 0;
            this.CheckIdleEndCombat();
            try
            {
                if (this.BeforeLogLineRead != null)
                {
                    LogLineEventArgs logInfo = new LogLineEventArgs(LogLine, detectedType, ParsedLogTime, this.currentZone, this.inCombat);
                    this.BeforeLogLineRead(isImport, logInfo);
                    LogLine = logInfo.logLine;
                    detectedType = logInfo.detectedType;
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "BeforeLogLineRead event\n" + LogLine);
            }
            this.lastLogLine = LogLine;
            if (this.opMisc.cbRecordLogs.Checked && this.inCombat)
            {
                this.ActiveZone.ActiveEncounter.LogLines.Add(new LogLineEntry(this.LastKnownTime, LogLine, detectedType, this.globalTimeSorter));
            }
            if ((this.ioImportLog.cbImportCustomTriggers.Checked || !isImport) && (LogLine.Length > (this.timeStampLen + 1)))
            {
                this.ParseCustom(this.LastKnownTime, LogLine.Substring(this.timeStampLen));
            }
            try
            {
                if (this.OnLogLineRead != null)
                {
                    this.OnLogLineRead(isImport, new LogLineEventArgs(LogLine, detectedType, this.LastKnownTime, this.currentZone, this.inCombat));
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, "OnLogLineRead event\n" + LogLine);
            }
        }

        private void pb1_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                this.graphingThread.Abort();
            }
            catch
            {
            }
            this.graphingThreadAlive = false;
            this.ttg.Items.Clear();
        }

        private void pb1_MouseMove(object sender, MouseEventArgs e)
        {
            string toolTipTextAt = this.ttg.GetToolTipTextAt(e.X, e.Y);
            if (toolTipTextAt != this.lastTooltip)
            {
                this.tt1.SetToolTip(this.pbDG, toolTipTextAt);
            }
            this.lastTooltip = toolTipTextAt;
        }

        private void pbPaypal_Click(object sender, EventArgs e)
        {
            Process.Start("http://advancedcombattracker.com/pp.html");
        }

        private void pDG_Resize(object sender, EventArgs e)
        {
            this.resizeColumns = true;
        }

        public void PlaySound(string pszSound)
        {
            if (!System.IO.File.Exists(pszSound))
            {
                throw new FileNotFoundException(pszSound + "\n was not found.", pszSound);
            }
            if (pszSound.EndsWith("sapi.wav"))
            {
                this.PlaySoundMethod(pszSound, this.opSound.tbarTtsVol.Value);
            }
            else
            {
                this.PlaySoundMethod(pszSound, this.opSound.tbarWavVol.Value);
            }
        }

        public void PlaySoundNull(string WavFilePath, int VolumePercent)
        {
        }

        public void PlaySoundWinApi(string WavFilePath, int VolumePercent)
        {
            SoundPlayer player = new SoundPlayer {
                SoundLocation = WavFilePath
            };
            player.Load();
            player.Play();
        }

        public void PlaySoundWmpApi(string WavFilePath, int VolumePercent)
        {
            if (base.InvokeRequired)
            {
                PlaySoundCallback method = new PlaySoundCallback(this.PlaySoundWmpApi);
                base.Invoke(method, new object[] { WavFilePath, VolumePercent });
            }
            else
            {
                new WMPWrapper(WavFilePath, VolumePercent).Play();
            }
        }

        public FileInfo PluginDownload(int MyPluginId)
        {
            DirectoryInfo info = new DirectoryInfo(Path.GetTempPath() + @"\AdvancedCombatTracker");
            FileInfo info2 = new FileInfo(Path.Combine(info.FullName, Path.GetRandomFileName()));
            WebClient client = new WebClient();
            client.Headers.Add(HttpRequestHeader.UserAgent, "ACT-Parser");
            client.DownloadFile("http://advancedcombattracker.com/includes/page-download.php?dl&id=" + MyPluginId, info2.FullName);
            string str = client.ResponseHeaders["Content-disposition"].Substring(0x15);
            FileInfo info3 = new FileInfo(Path.Combine(info2.DirectoryName, str));
            if (info3.Exists)
            {
                info3.Delete();
            }
            info2.MoveTo(info3.FullName);
            return info3;
        }

        public DateTime PluginGetRemoteDateUtc(int MyPluginId)
        {
            WebClient client = new WebClient();
            return new DateTime(DateTime.Parse(client.DownloadString("http://advancedcombattracker.com/versioncheck.php?plugindate=" + MyPluginId)).AddHours(6.0).Ticks, DateTimeKind.Utc);
        }

        public ActPluginData PluginGetSelfData(IActPluginV1 MyPluginInstance)
        {
            foreach (ActPluginData data in ActGlobals.oFormActMain.ActPlugins)
            {
                if (data.pluginObj == MyPluginInstance)
                {
                    return data;
                }
            }
            return null;
        }

        public DateTime PluginGetSelfDateUtc(IActPluginV1 MyPluginInstance)
        {
            ActPluginData data = this.PluginGetSelfData(MyPluginInstance);
            if (data != null)
            {
                data.pluginFile.Refresh();
                return data.pluginFile.LastWriteTimeUtc;
            }
            return DateTime.MinValue;
        }

        private void pluginPanelChildGotFocus(object sender, EventArgs e)
        {
            Control control = (Control) sender;
            control.Parent.Focus();
        }

        private void pluginPanelClick(object sender, EventArgs e)
        {
            ((Panel) sender).Focus();
        }

        private void pluginPanelEnabledChecked(object sender, EventArgs e)
        {
            CompilerParameters parameters;
            CompilerResults results;
            CheckBox box = (CheckBox) sender;
            ActPluginData tag = (ActPluginData) box.Parent.Tag;
            if (!box.Checked)
            {
                goto Label_0663;
            }
            Assembly compiledAssembly = null;
            string str2 = tag.pluginFile.Extension.ToLower();
            if (str2 == null)
            {
                goto Label_04D1;
            }
            if (!(str2 == ".exe") && !(str2 == ".dll"))
            {
                if ((str2 == ".vb") || (str2 == ".cs"))
                {
                    goto Label_0208;
                }
                goto Label_04D1;
            }
            FileStream input = new FileStream(tag.pluginFile.FullName, FileMode.Open, FileAccess.Read, FileShare.Read);
            BinaryReader reader = new BinaryReader(input);
            byte[] rawAssembly = reader.ReadBytes((int) reader.BaseStream.Length);
            reader.Close();
            input.Close();
            FileInfo info = new FileInfo(tag.pluginFile.FullName.Substring(0, tag.pluginFile.FullName.Length - 3) + "pdb");
            byte[] rawSymbolStore = null;
            if (info.Exists)
            {
                input = new FileStream(info.FullName, FileMode.Open, FileAccess.Read, FileShare.Read);
                reader = new BinaryReader(input);
                rawSymbolStore = reader.ReadBytes((int) reader.BaseStream.Length);
                reader.Close();
                input.Close();
            }
            try
            {
                if (rawSymbolStore != null)
                {
                    compiledAssembly = AppDomain.CurrentDomain.Load(rawAssembly, rawSymbolStore);
                }
                else
                {
                    compiledAssembly = AppDomain.CurrentDomain.Load(rawAssembly, null);
                }
                goto Label_04D9;
            }
            catch (BadImageFormatException)
            {
                MessageBox.Show(this.Trans["messageBox-pluginImageError"].DisplayedText, this.Trans["messageBoxTitle-pluginImageError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                box.Checked = false;
                return;
            }
            catch (IOException exception)
            {
                MessageBox.Show(exception.Message, this.Trans["messageBoxTitle-fileError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                box.Checked = false;
                return;
            }
            catch (Exception exception2)
            {
                MessageBox.Show(exception2.Message, this.Trans["messageBoxTitle-error"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                box.Checked = false;
                return;
            }
        Label_0208:
            parameters = new CompilerParameters();
            parameters.ReferencedAssemblies.Add("mscorlib.dll");
            parameters.ReferencedAssemblies.Add("System.dll");
            parameters.ReferencedAssemblies.Add("System.Data.dll");
            parameters.ReferencedAssemblies.Add("System.Drawing.dll");
            parameters.ReferencedAssemblies.Add("System.Xml.dll");
            parameters.ReferencedAssemblies.Add("System.Windows.Forms.dll");
            FileInfo info2 = new FileInfo(Process.GetCurrentProcess().MainModule.FileName);
            parameters.ReferencedAssemblies.Add(info2.FullName.Replace(".vshost", ""));
            this.AddAssemblyRefrencesFromSource(tag.pluginFile.FullName, ref parameters);
            parameters.WarningLevel = 3;
            string str = string.Format(@"{2}\AdvancedCombatTracker\{0}-{1}", tag.pluginFile.Name, DateTime.Now.Ticks.ToString(), Path.GetTempPath());
            parameters.OutputAssembly = str + ".dll";
            parameters.IncludeDebugInformation = true;
            parameters.CompilerOptions = string.Format("/target:library /optimize /pdb:\"{0}.pdb\"", str);
            parameters.GenerateExecutable = false;
            parameters.GenerateInMemory = false;
            if (tag.pluginFile.Extension.ToLower() == ".cs")
            {
                results = new CSharpCodeProvider().CompileAssemblyFromFile(parameters, new string[] { tag.pluginFile.FullName });
            }
            else
            {
                results = new VBCodeProvider().CompileAssemblyFromFile(parameters, new string[] { tag.pluginFile.FullName });
            }
            if (results.Errors.Count == 0)
            {
                compiledAssembly = results.CompiledAssembly;
                goto Label_04D9;
            }
            this.rtbPluginInfo.Focus();
            this.rtbPluginInfo.Text = tag.pluginFile.Name;
            bool flag = false;
            for (int i = 0; i < results.Errors.Count; i++)
            {
                this.rtbPluginInfo.Text = this.rtbPluginInfo.Text + string.Format("\nLine: {0} - ({1}) {2}", results.Errors[i].Line, results.Errors[i].ErrorNumber, results.Errors[i].ErrorText);
                if (!results.Errors[i].IsWarning)
                {
                    flag = true;
                }
            }
            if (!flag)
            {
                compiledAssembly = results.CompiledAssembly;
                goto Label_04D9;
            }
            MessageBox.Show(this.Trans["messageBox-pluginCompileError"].DisplayedText, this.Trans["messageBoxTitle-pluginCompileError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            box.Checked = false;
            return;
        Label_04D1:
            box.Checked = false;
            return;
        Label_04D9:
            tag.pluginObj = null;
            try
            {
                System.Type[] types = compiledAssembly.GetTypes();
                for (int j = 0; j < types.Length; j++)
                {
                    System.Type[] interfaces = types[j].GetInterfaces();
                    for (int k = 0; k < interfaces.Length; k++)
                    {
                        if (interfaces[k] == typeof(IActPluginV1))
                        {
                            tag.pluginObj = (IActPluginV1) compiledAssembly.CreateInstance(types[j].FullName);
                            break;
                        }
                    }
                    if (tag.pluginObj != null)
                    {
                        goto Label_05B6;
                    }
                }
            }
            catch (ReflectionTypeLoadException exception3)
            {
                StringBuilder builder = new StringBuilder();
                for (int m = 0; m < exception3.LoaderExceptions.Length; m++)
                {
                    builder.AppendLine(exception3.LoaderExceptions[m].Message);
                }
                MessageBox.Show(builder.ToString(), this.Trans["messageBoxTitle-loadError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        Label_05B6:
            if (tag.pluginObj == null)
            {
                MessageBox.Show(this.Trans["messageBox-pluginInvalid"].DisplayedText, this.Trans["messageBoxTitle-pluginInvalid"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                box.Checked = false;
                return;
            }
            tag.tpPluginSpace = new TabPage(tag.lblPluginTitle.Text);
            this.tcPlugins.TabPages.Add(tag.tpPluginSpace);
            try
            {
                tag.pluginObj.InitPlugin(tag.tpPluginSpace, tag.lblPluginStatus);
                return;
            }
            catch (Exception exception4)
            {
                MessageBox.Show(exception4.Message, "Plugin Initialization Failed", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                tag.cbEnabled.Checked = false;
                return;
            }
        Label_0663:
            if (tag.pluginObj != null)
            {
                this.tcPlugins.TabPages.Remove(tag.tpPluginSpace);
                try
                {
                    tag.pluginObj.DeInitPlugin();
                }
                catch
                {
                }
                tag.pluginObj = null;
                tag.tpPluginSpace.Dispose();
            }
        }

        private void pluginPanelFocusChanged(object sender, EventArgs e)
        {
            Panel panel = (Panel) sender;
            if (!panel.Focused)
            {
                panel.BackColor = System.Drawing.Color.White;
                this.rtbPluginInfo.Text = string.Empty;
            }
            else
            {
                panel.BackColor = System.Drawing.Color.AliceBlue;
                ActPluginData tag = (ActPluginData) panel.Tag;
                switch (tag.pluginFile.Extension.ToLower())
                {
                    case ".dll":
                    case ".exe":
                        this.rtbPluginInfo.Text = "Assembly Info:\n";
                        this.rtbPluginInfo.Text = this.rtbPluginInfo.Text + this.GetAssemblyInfo(tag.pluginFile.FullName);
                        return;

                    case ".cs":
                    case ".vb":
                        this.rtbPluginInfo.Text = "Source File Info:\n" + tag.pluginFile.FullName + "\n";
                        this.rtbPluginInfo.Text = this.rtbPluginInfo.Text + this.GetAssemblyInfoFromSource(tag.pluginFile.FullName);
                        return;
                }
                this.rtbPluginInfo.Text = string.Empty;
            }
        }

        private void pluginPanelXBtn_Click(object sender, EventArgs e)
        {
            Button button = (Button) sender;
            ActPluginData tag = (ActPluginData) button.Parent.Tag;
            if (MessageBox.Show(string.Format(this.Trans["messageBox-removePlugin"].DisplayedText, tag.lblPluginTitle.Text), this.Trans["messageBoxTitle-removePlugin"].DisplayedText, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                this.PluginRemovePanel(tag);
            }
        }

        internal void PluginRemovePanel(ActPluginData pluginData)
        {
            pluginData.cbEnabled.Checked = false;
            pluginData.pPluginInfo.Parent.Controls.Remove(pluginData.pPluginInfo);
            this.plugins.Remove(pluginData);
        }

        private void PopulateIo()
        {
            this.ioControlSets.Add(@"Import Encounters\Import a Log File", new List<Control> { this.ioImportLog });
            this.ioControlSets.Add(@"Import Encounters\Import the Clipboard", new List<Control> { this.ioImportClip });
            this.ioControlSets.Add(@"Import Encounters\Import an *.act File", new List<Control> { this.ioImportAct });
            this.ioControlSets.Add(@"Export Encounters\Export to an *.act File", new List<Control> { this.ioExportAct });
            this.ioControlSets.Add(@"Export Encounters\Export to an HTML Page", new List<Control> { this.ioExportHtml });
            this.ioControlSets.Add(@"Export Encounters\Export to SQL/ODBC", new List<Control> { this.ioOdbc, this.opOdbc });
            this.ioControlSets.Add(@"Export Encounters\Export to an XML File", new List<Control> { this.ioXmlFile });
            this.tvIo.ExpandAll();
        }

        private void PopulateLV()
        {
            int num;
            if (this.opMainTableGen.cbReverseSort.Checked)
            {
                num = 1;
            }
            else
            {
                num = 0;
            }
            int num2 = -1;
            string tableType = this.tableType;
            if (tableType != null)
            {
                if (!(tableType == "EL"))
                {
                    if (!(tableType == "ED"))
                    {
                        if (!(tableType == "CD"))
                        {
                            if (!(tableType == "MD"))
                            {
                                if (tableType == "AT")
                                {
                                    try
                                    {
                                        this.lvDG.VirtualListSize = ((List<MasterSwing>) this.currentTable).Count;
                                    }
                                    catch (Exception exception5)
                                    {
                                        this.WriteExceptionLog(exception5, "AT Set Size");
                                        this.lvDG.VirtualMode = false;
                                        this.lvDG.VirtualMode = true;
                                        this.lvDG.VirtualListSize = ((List<MasterSwing>) this.currentTable).Count;
                                    }
                                    this.lvDG.Columns.Clear();
                                    for (int m = 0; m < this.opTableAttackType.clbAT.Items.Count; m++)
                                    {
                                        string str5 = (string) this.opTableAttackType.clbAT.Items[m];
                                        if (this.opTableAttackType.clbAT.GetItemChecked(m))
                                        {
                                            ColumnHeader header5 = new ColumnHeader();
                                            if (str5 == ActGlobals.aTSort)
                                            {
                                                header5.ImageIndex = num;
                                            }
                                            header5.Width = 100;
                                            header5.TextAlign = HorizontalAlignment.Center;
                                            header5.Text = str5;
                                            this.lvDG.Columns.Add(header5);
                                        }
                                    }
                                }
                                return;
                            }
                            try
                            {
                                this.lvDG.VirtualListSize = ((List<AttackType>) this.currentTable).Count;
                            }
                            catch (Exception exception4)
                            {
                                this.WriteExceptionLog(exception4, "MD Set Size");
                                this.lvDG.VirtualMode = false;
                                this.lvDG.VirtualMode = true;
                                this.lvDG.VirtualListSize = ((List<AttackType>) this.currentTable).Count;
                            }
                            this.lvDG.Columns.Clear();
                            for (int k = 0; k < this.opTableDamageType.clbDT.Items.Count; k++)
                            {
                                string str4 = (string) this.opTableDamageType.clbDT.Items[k];
                                if (this.opTableDamageType.clbDT.GetItemChecked(k))
                                {
                                    ColumnHeader header4 = new ColumnHeader();
                                    if (str4 == ActGlobals.mDSort)
                                    {
                                        header4.ImageIndex = num;
                                    }
                                    header4.Width = 100;
                                    header4.TextAlign = (++num2 == 0) ? HorizontalAlignment.Left : HorizontalAlignment.Center;
                                    header4.Text = str4;
                                    this.lvDG.Columns.Add(header4);
                                }
                            }
                            return;
                        }
                        try
                        {
                            this.lvDG.VirtualListSize = ((List<DamageTypeData>) this.currentTable).Count;
                        }
                        catch (Exception exception3)
                        {
                            this.WriteExceptionLog(exception3, "CD Set Size");
                            this.lvDG.VirtualMode = false;
                            this.lvDG.VirtualMode = true;
                            this.lvDG.VirtualListSize = ((List<DamageTypeData>) this.currentTable).Count;
                        }
                        this.lvDG.Columns.Clear();
                        for (int j = 0; j < this.opTableCombatant.clbCD.Items.Count; j++)
                        {
                            string str3 = (string) this.opTableCombatant.clbCD.Items[j];
                            if (this.opTableCombatant.clbCD.GetItemChecked(j))
                            {
                                ColumnHeader header3 = new ColumnHeader {
                                    Width = 100,
                                    TextAlign = (++num2 == 0) ? HorizontalAlignment.Left : HorizontalAlignment.Center,
                                    Text = str3
                                };
                                this.lvDG.Columns.Add(header3);
                            }
                        }
                        return;
                    }
                }
                else
                {
                    try
                    {
                        this.lvDG.VirtualListSize = ((List<EncounterData>) this.currentTable).Count;
                    }
                    catch (Exception exception)
                    {
                        this.WriteExceptionLog(exception, "EL Set Size");
                        this.lvDG.VirtualMode = false;
                        this.lvDG.VirtualMode = true;
                        this.lvDG.VirtualListSize = ((List<EncounterData>) this.currentTable).Count;
                    }
                    this.lvDG.Columns.Clear();
                    for (int n = 0; n < this.opTableZone.clbZD.Items.Count; n++)
                    {
                        string str = (string) this.opTableZone.clbZD.Items[n];
                        if (this.opTableZone.clbZD.GetItemChecked(n))
                        {
                            ColumnHeader header = new ColumnHeader {
                                Width = 100,
                                TextAlign = (++num2 == 0) ? HorizontalAlignment.Left : HorizontalAlignment.Center,
                                Text = str
                            };
                            this.lvDG.Columns.Add(header);
                        }
                    }
                    return;
                }
                try
                {
                    this.lvDG.VirtualListSize = ((List<CombatantData>) this.currentTable).Count;
                }
                catch (Exception exception2)
                {
                    this.WriteExceptionLog(exception2, "ED Set Size");
                    this.lvDG.VirtualMode = false;
                    this.lvDG.VirtualMode = true;
                    this.lvDG.VirtualListSize = ((List<CombatantData>) this.currentTable).Count;
                }
                this.lvDG.Columns.Clear();
                for (int i = 0; i < this.opTableEncounter.clbED.Items.Count; i++)
                {
                    string str2 = (string) this.opTableEncounter.clbED.Items[i];
                    if (this.opTableEncounter.clbED.GetItemChecked(i))
                    {
                        ColumnHeader header2 = new ColumnHeader();
                        if (str2 == ActGlobals.eDSort)
                        {
                            header2.ImageIndex = num;
                        }
                        header2.Width = 100;
                        header2.TextAlign = (++num2 == 0) ? HorizontalAlignment.Left : HorizontalAlignment.Center;
                        header2.Text = str2;
                        this.lvDG.Columns.Add(header2);
                    }
                }
            }
        }

        private void PopulateNewConfig()
        {
            this.xmlSettings = new SettingsSerializer(this);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormActMain.opMisc.cbAutoLoadLogs.Name, ActGlobals.oFormActMain.opMisc.cbAutoLoadLogs);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormActMain.opMisc.cbClipAutoConnect.Name, ActGlobals.oFormActMain.opMisc.cbClipAutoConnect);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormActMain.opMisc.nudLogFileSplit.Name, ActGlobals.oFormActMain.opMisc.nudLogFileSplit);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormActMain.opMisc.tbClipIP.Name, ActGlobals.oFormActMain.opMisc.tbClipIP);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormEncounterVcr.cbOutlineTraces.Name, ActGlobals.oFormEncounterVcr.cbOutlineTraces);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormEncounterVcr.cbPersistantMobs.Name, ActGlobals.oFormEncounterVcr.cbPersistantMobs);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormEncounterVcr.cbRadialDisplay.Name, ActGlobals.oFormEncounterVcr.cbRadialDisplay);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormEncounterVcr.nudHistoryShadowSecs.Name, ActGlobals.oFormEncounterVcr.nudHistoryShadowSecs);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormEncounterVcr.nudMaxOpacityThreshold.Name, ActGlobals.oFormEncounterVcr.nudMaxOpacityThreshold);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormMiniParse.cbbDisplayGraph.Name, ActGlobals.oFormMiniParse.cbbDisplayGraph);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.cbbAllowPanel2.Name, ActGlobals.oFormSpellTimers.cbbAllowPanel2);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.cbTimersClickThrough.Name, ActGlobals.oFormSpellTimers.cbTimersClickThrough);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.cbTimersClickThrough2.Name, ActGlobals.oFormSpellTimers.cbTimersClickThrough2);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.cbTimersOnTop.Name, ActGlobals.oFormSpellTimers.cbTimersOnTop);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.nudTimerScale.Name, ActGlobals.oFormSpellTimers.nudTimerScale);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.nudTimerScale2.Name, ActGlobals.oFormSpellTimers.nudTimerScale2);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.nudTimersOpacity.Name, ActGlobals.oFormSpellTimers.nudTimersOpacity);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.nudTimersOpacity2.Name, ActGlobals.oFormSpellTimers.nudTimersOpacity2);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.nudTimerWarning.Name, ActGlobals.oFormSpellTimers.nudTimerWarning);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormTimeLine.cbGlobalMaxLimit.Name, ActGlobals.oFormTimeLine.cbGlobalMaxLimit);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormTimeLine.cbTLIncomingDamage.Name, ActGlobals.oFormTimeLine.cbTLIncomingDamage);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormTimeLine.cbTLOutDamage.Name, ActGlobals.oFormTimeLine.cbTLOutDamage);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormTimeLine.cbTLOutgoingHealing.Name, ActGlobals.oFormTimeLine.cbTLOutgoingHealing);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormTimeLine.cbTLRollingAvg.Name, ActGlobals.oFormTimeLine.cbTLRollingAvg);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormTimeLine.ddlTLGrouping.Name, ActGlobals.oFormTimeLine.ddlTLGrouping);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormTimeLine.nudTLSampleSize.Name, ActGlobals.oFormTimeLine.nudTLSampleSize);
            this.xmlSettings.AddControlSetting(this.ioImportAct.cbParseCt.Name, this.ioImportAct.cbParseCt);
            this.xmlSettings.AddControlSetting(this.cbAutoCheck.Name, this.cbAutoCheck);
            this.xmlSettings.AddControlSetting(this.cbbMiniParse.Name, this.cbbMiniParse);
            this.xmlSettings.AddControlSetting(this.cbbShowTimers.Name, this.cbbShowTimers);
            this.xmlSettings.AddControlSetting(this.ioExportAct.cbExportLogText.Name, this.ioExportAct.cbExportLogText);
            this.xmlSettings.AddControlSetting(this.ioImportLog.cbImportCustomTriggers.Name, this.ioImportLog.cbImportCustomTriggers);
            this.xmlSettings.AddControlSetting(this.ioImportLog.cbContToEndCombat.Name, this.ioImportLog.cbContToEndCombat);
            this.xmlSettings.AddControlSetting(this.cbRecordsSave.Name, this.cbRecordsSave);
            this.xmlSettings.AddControlSetting(this.opSelectiveParsing.cbSParseExportIgnoreOtherAllies.Name, this.opSelectiveParsing.cbSParseExportIgnoreOtherAllies);
            this.xmlSettings.AddControlSetting(this.opSelectiveParsing.cbSParseIgnoreEnemies.Name, this.opSelectiveParsing.cbSParseIgnoreEnemies);
            this.xmlSettings.AddControlSetting(this.opEncCulling.cbCullAll.Name, this.opEncCulling.cbCullAll);
            this.xmlSettings.AddControlSetting(this.opEncCulling.cbCullCount.Name, this.opEncCulling.cbCullCount);
            this.xmlSettings.AddControlSetting(this.opEncCulling.cbCullCountIgnoreNoAlly.Name, this.opEncCulling.cbCullCountIgnoreNoAlly);
            this.xmlSettings.AddControlSetting(this.opEncCulling.cbCullNoAlly.Name, this.opEncCulling.cbCullNoAlly);
            this.xmlSettings.AddControlSetting(this.opEncCulling.cbCullOther.Name, this.opEncCulling.cbCullOther);
            this.xmlSettings.AddControlSetting(this.opEncCulling.cbCullTimer.Name, this.opEncCulling.cbCullTimer);
            this.xmlSettings.AddControlSetting(this.opEncCulling.nudCullAllN.Name, this.opEncCulling.nudCullAllN);
            this.xmlSettings.AddControlSetting(this.opEncCulling.nudCullCountN.Name, this.opEncCulling.nudCullCountN);
            this.xmlSettings.AddControlSetting(this.opEncCulling.nudCullOtherN.Name, this.opEncCulling.nudCullOtherN);
            this.xmlSettings.AddControlSetting(this.opEncCulling.nudCullTimerN.Name, this.opEncCulling.nudCullTimerN);
            this.xmlSettings.AddControlSetting(this.opFileHTML.cbCurrentGraph.Name, this.opFileHTML.cbCurrentGraph);
            this.xmlSettings.AddControlSetting(this.opFileHTML.cbCurrentTable.Name, this.opFileHTML.cbCurrentTable);
            this.xmlSettings.AddControlSetting(this.opFileHTML.cbExGraph.Name, this.opFileHTML.cbExGraph);
            this.xmlSettings.AddControlSetting(this.opFileHTML.cbExHTML.Name, this.opFileHTML.cbExHTML);
            this.xmlSettings.AddControlSetting(this.opFileHTML.cbExHTMLFTP.Name, this.opFileHTML.cbExHTMLFTP);
            this.xmlSettings.AddControlSetting(this.opFileHTML.cbHTMLCullEncounters.Name, this.opFileHTML.cbHTMLCullEncounters);
            this.xmlSettings.AddControlSetting(this.opFileHTML.cbHtmlTimers.Name, this.opFileHTML.cbHtmlTimers);
            this.xmlSettings.AddControlSetting(this.opFileHTML.nudCGraphDelay.Name, this.opFileHTML.nudCGraphDelay);
            this.xmlSettings.AddControlSetting(this.opFileHTML.nudExFTPPort.Name, this.opFileHTML.nudExFTPPort);
            this.xmlSettings.AddControlSetting(this.opFileHTML.nudGraphX.Name, this.opFileHTML.nudGraphX);
            this.xmlSettings.AddControlSetting(this.opFileHTML.nudGraphY.Name, this.opFileHTML.nudGraphY);
            this.xmlSettings.AddControlSetting(this.ioExportHtml.nudExportGraphX.Name, this.ioExportHtml.nudExportGraphX);
            this.xmlSettings.AddControlSetting(this.ioExportHtml.nudExportGraphY.Name, this.ioExportHtml.nudExportGraphY);
            this.xmlSettings.AddControlSetting(this.opFileHTML.nudHTMLCullingCount.Name, this.opFileHTML.nudHTMLCullingCount);
            this.xmlSettings.AddControlSetting(this.opFileHTML.rbExFTPActive.Name, this.opFileHTML.rbExFTPActive);
            this.xmlSettings.AddControlSetting(this.opFileHTML.rbExFTPPassive.Name, this.opFileHTML.rbExFTPPassive);
            this.xmlSettings.AddControlSetting(this.opFileHTML.tbExFTPPass.Name, this.opFileHTML.tbExFTPPass);
            this.xmlSettings.AddControlSetting(this.opFileHTML.tbExFTPPath.Name, this.opFileHTML.tbExFTPPath);
            this.xmlSettings.AddControlSetting(this.opFileHTML.tbExFTPServer.Name, this.opFileHTML.tbExFTPServer);
            this.xmlSettings.AddControlSetting(this.opFileHTML.tbExFTPUser.Name, this.opFileHTML.tbExFTPUser);
            this.xmlSettings.AddControlSetting(this.opGraphing.cbGraphRollingAvg.Name, this.opGraphing.cbGraphRollingAvg);
            this.xmlSettings.AddControlSetting(this.opGraphing.cbOnlyGraphAllies.Name, this.opGraphing.cbOnlyGraphAllies);
            this.xmlSettings.AddControlSetting(this.opGraphing.cbSimpleGraphTotals.Name, this.opGraphing.cbSimpleGraphTotals);
            this.xmlSettings.AddControlSetting(this.opGraphing.ddlGraphPriority.Name, this.opGraphing.ddlGraphPriority);
            this.xmlSettings.AddControlSetting(this.opGraphing.rbGraphAdv.Name, this.opGraphing.rbGraphAdv);
            this.xmlSettings.AddControlSetting(this.opGraphing.rbGraphSimple.Name, this.opGraphing.rbGraphSimple);
            this.xmlSettings.AddControlSetting(this.opLcdGeneral.cbLcdRoute.Name, this.opLcdGeneral.cbLcdRoute);
            this.xmlSettings.AddControlSetting(this.opLcdGeneral.ddlLcdMiniFormat.Name, this.opLcdGeneral.ddlLcdMiniFormat);
            this.xmlSettings.AddControlSetting(this.opLcdMono.nudLcd0FontOffset.Name, this.opLcdMono.nudLcd0FontOffset);
            this.xmlSettings.AddControlSetting(this.opLcdMono.nudLcd0VSpacing.Name, this.opLcdMono.nudLcd0VSpacing);
            this.xmlSettings.AddControlSetting(this.opLcdMono.nudLcd1FontOffset.Name, this.opLcdMono.nudLcd1FontOffset);
            this.xmlSettings.AddControlSetting(this.opLcdMono.nudLcd1VSpacing.Name, this.opLcdMono.nudLcd1VSpacing);
            this.xmlSettings.AddControlSetting(this.opLcdMono.nudLcd2FontOffset.Name, this.opLcdMono.nudLcd2FontOffset);
            this.xmlSettings.AddControlSetting(this.opLcdMono.nudLcd2VSpacing.Name, this.opLcdMono.nudLcd2VSpacing);
            this.xmlSettings.AddControlSetting(this.opLcdMono.nudLcd3FontOffset.Name, this.opLcdMono.nudLcd3FontOffset);
            this.xmlSettings.AddControlSetting(this.opLcdMono.nudLcd3VSpacing.Name, this.opLcdMono.nudLcd3VSpacing);
            this.xmlSettings.AddControlSetting(this.opMainTableGen.cbIdleEnd.Name, this.opMainTableGen.cbIdleEnd);
            this.xmlSettings.AddControlSetting(this.opMainTableGen.cbIdleTimerEnd.Name, this.opMainTableGen.cbIdleTimerEnd);
            this.xmlSettings.AddControlSetting(this.opMainTableGen.cbReverseSort.Name, this.opMainTableGen.cbReverseSort);
            this.xmlSettings.AddControlSetting(this.opMainTableGen.cbTableCommas.Name, this.opMainTableGen.cbTableCommas);
            this.xmlSettings.AddControlSetting(this.opMainTableGen.nudIdleLimit.Name, this.opMainTableGen.nudIdleLimit);
            this.xmlSettings.AddControlSetting(this.opMainTableGen.nudUpdateValue.Name, this.opMainTableGen.nudUpdateValue);
            this.xmlSettings.AddControlSetting(this.opMiniParse.cbMinEncBox.Name, this.opMiniParse.cbMinEncBox);
            this.xmlSettings.AddControlSetting(this.opMiniParse.cbMiniClickThrough.Name, this.opMiniParse.cbMiniClickThrough);
            this.xmlSettings.AddControlSetting(this.opMiniParse.cbMiniColumnAlign.Name, this.opMiniParse.cbMiniColumnAlign);
            this.xmlSettings.AddControlSetting(this.opMiniParse.cbRestoreEncBox.Name, this.opMiniParse.cbRestoreEncBox);
            this.xmlSettings.AddControlSetting(this.opMiniParse.cbSmallEncTop.Name, this.opMiniParse.cbSmallEncTop);
            this.xmlSettings.AddControlSetting(this.opMiniParse.ddlMiniFormat.Name, this.opMiniParse.ddlMiniFormat);
            this.xmlSettings.AddControlSetting(this.opMiniParse.nudMiniUpdateInterval.Name, this.opMiniParse.nudMiniUpdateInterval);
            this.xmlSettings.AddControlSetting(this.opMiniParse.tbMiniOpacity.Name, this.opMiniParse.tbMiniOpacity);
            this.xmlSettings.AddControlSetting(this.opDataCorrectionMisc.cbBlockisHit.Name, this.opDataCorrectionMisc.cbBlockisHit);
            this.xmlSettings.AddControlSetting(this.opDataCorrectionMisc.cbCalcRealAvgDly.Name, this.opDataCorrectionMisc.cbCalcRealAvgDly);
            this.xmlSettings.AddControlSetting(this.opMisc.cbGCollectOnClear.Name, this.opMisc.cbGCollectOnClear);
            this.xmlSettings.AddControlSetting(this.opDataCorrectionMisc.cbLongEncDuration.Name, this.opDataCorrectionMisc.cbLongEncDuration);
            this.xmlSettings.AddControlSetting(this.opMisc.cbMinimizeToIcon.Name, this.opMisc.cbMinimizeToIcon);
            this.xmlSettings.AddControlSetting(this.opMisc.cbRecordLogs.Name, this.opMisc.cbRecordLogs);
            this.xmlSettings.AddControlSetting(this.opMisc.cbRestrictToAll.Name, this.opMisc.cbRestrictToAll);
            this.xmlSettings.AddControlSetting(this.opMisc.cbZoneAllListing.Name, this.opMisc.cbZoneAllListing);
            this.xmlSettings.AddControlSetting(this.opMisc.ddlCpuAffinity.Name, this.opMisc.ddlCpuAffinity);
            this.xmlSettings.AddControlSetting(this.opMisc.ddlLogPriority.Name, this.opMisc.ddlLogPriority);
            this.xmlSettings.AddControlSetting(this.opDataCorrectionMisc.tbCharName.Name, this.opDataCorrectionMisc.tbCharName);
            this.xmlSettings.AddControlSetting(this.opOdbc.cbCurrentOdbc.Name, this.opOdbc.cbCurrentOdbc);
            this.xmlSettings.AddControlSetting(this.opOdbc.cbExOdbc.Name, this.opOdbc.cbExOdbc);
            this.xmlSettings.AddControlSetting(this.opOdbc.cbSqlSafeMode.Name, this.opOdbc.cbSqlSafeMode);
            this.xmlSettings.AddControlSetting(this.opOdbc.nudCOdbcDelay.Name, this.opOdbc.nudCOdbcDelay);
            this.xmlSettings.AddControlSetting(this.opOdbc.rbOdbcEx1.Name, this.opOdbc.rbOdbcEx1);
            this.xmlSettings.AddControlSetting(this.opOdbc.rbOdbcEx2.Name, this.opOdbc.rbOdbcEx2);
            this.xmlSettings.AddControlSetting(this.opOdbc.rbOdbcEx3.Name, this.opOdbc.rbOdbcEx3);
            this.xmlSettings.AddControlSetting(this.opOdbc.rbOdbcEx4.Name, this.opOdbc.rbOdbcEx4);
            this.xmlSettings.AddControlSetting(this.opOdbc.rbOdbcEx5.Name, this.opOdbc.rbOdbcEx5);
            this.xmlSettings.AddControlSetting(this.opOdbc.tbOdbcConnectionString.Name, this.opOdbc.tbOdbcConnectionString);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndPlugin.Name, this.opSound.rbSndPlugin);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndWinApi.Name, this.opSound.rbSndWinApi);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndWmpApi.Name, this.opSound.rbSndWmpApi);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndExportBeep.Name, this.opSound.rbSndExportBeep);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndExportNone.Name, this.opSound.rbSndExportNone);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndExportTTS.Name, this.opSound.rbSndExportTTS);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndExportWAV.Name, this.opSound.rbSndExportWAV);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndStartBeep.Name, this.opSound.rbSndStartBeep);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndStartNone.Name, this.opSound.rbSndStartNone);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndStartTTS.Name, this.opSound.rbSndStartTTS);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndStartWAV.Name, this.opSound.rbSndStartWAV);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndTimerBeep.Name, this.opSound.rbSndTimerBeep);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndTimerNone.Name, this.opSound.rbSndTimerNone);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndTimerTTS.Name, this.opSound.rbSndTimerTTS);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndTimerWAV.Name, this.opSound.rbSndTimerWAV);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndWarnBeep.Name, this.opSound.rbSndWarnBeep);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndWarnNone.Name, this.opSound.rbSndWarnNone);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndWarnTTS.Name, this.opSound.rbSndWarnTTS);
            this.xmlSettings.AddControlSetting(this.opSound.rbSndWarnWAV.Name, this.opSound.rbSndWarnWAV);
            this.xmlSettings.AddControlSetting(this.opSound.tbSndExport.Name, this.opSound.tbSndExport);
            this.xmlSettings.AddControlSetting(this.opSound.tbSndStart.Name, this.opSound.tbSndStart);
            this.xmlSettings.AddControlSetting(this.opSound.tbSndTimer.Name, this.opSound.tbSndTimer);
            this.xmlSettings.AddControlSetting(this.opSound.tbSndWarn.Name, this.opSound.tbSndWarn);
            this.xmlSettings.AddControlSetting(this.opTextExports.cbExportFilterSpace.Name, this.opTextExports.cbExportFilterSpace);
            this.xmlSettings.AddControlSetting(this.opTextExports.cbExText.Name, this.opTextExports.cbExText);
            this.xmlSettings.AddControlSetting(this.opTextExports.ddlClipFormat.Name, this.opTextExports.ddlClipFormat);
            this.xmlSettings.AddControlSetting(this.opWebServer.cbWebServerEnabled.Name, this.opWebServer.cbWebServerEnabled);
            this.xmlSettings.AddControlSetting(this.opWebServer.cbWebServerShowReq.Name, this.opWebServer.cbWebServerShowReq);
            this.xmlSettings.AddControlSetting(this.opWebServer.nudWebServerPort.Name, this.opWebServer.nudWebServerPort);
            this.xmlSettings.AddControlSetting(this.opSelectiveParsing.rbSParseExport.Name, this.opSelectiveParsing.rbSParseExport);
            this.xmlSettings.AddControlSetting(this.opSelectiveParsing.rbSParseFull.Name, this.opSelectiveParsing.rbSParseFull);
            this.xmlSettings.AddControlSetting(this.opSelectiveParsing.rbSParseNone.Name, this.opSelectiveParsing.rbSParseNone);
            this.xmlSettings.AddControlSetting(this.tbFeedbackEmail.Name, this.tbFeedbackEmail);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormActMain.Name, ActGlobals.oFormActMain);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormMiniParse.Name, ActGlobals.oFormMiniParse);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormUpdater.Name, ActGlobals.oFormUpdater);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormCombatantSearch.Name, ActGlobals.oFormCombatantSearch);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormResistsDeathReport.Name, ActGlobals.oFormResistsDeathReport);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellRecastCalc.Name, ActGlobals.oFormSpellRecastCalc);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.Name, ActGlobals.oFormSpellTimers);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimersPanel.Name, ActGlobals.oFormSpellTimersPanel);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimersPanel2.Name, ActGlobals.oFormSpellTimersPanel2);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormEncounterLogs.Name, ActGlobals.oFormEncounterLogs);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormPerformanceWizard.Name, ActGlobals.oFormPerformanceWizard);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormXmlSettingsIO.Name, ActGlobals.oFormXmlSettingsIO);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormTimeLine.Name, ActGlobals.oFormTimeLine);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormEncounterVcr.Name, ActGlobals.oFormEncounterVcr);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSqlQuery.Name, ActGlobals.oFormSqlQuery);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormByCombatantLookup.Name, ActGlobals.oFormByCombatantLookup);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormStartupWizard.Name, ActGlobals.oFormStartupWizard);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormAlliesEdit.Name, ActGlobals.oFormAlliesEdit);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormAvoidanceReport.Name, ActGlobals.oFormAvoidanceReport);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormExportFormat.Name, ActGlobals.oFormExportFormat);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormImportProgress.Name, ActGlobals.oFormImportProgress);
            this.xmlSettings.AddControlSetting(this.opSound.tbarTtsVol.Name, this.opSound.tbarTtsVol);
            this.xmlSettings.AddControlSetting(this.opSound.tbarWavVol.Name, this.opSound.tbarWavVol);
            this.xmlSettings.AddBooleanSetting("suppressStartupWizardQuestion");
            this.xmlSettings.AddStringSetting("logFilePath");
            this.xmlSettings.AddDirectoryInfoSetting("folderActfiles");
            this.xmlSettings.AddDirectoryInfoSetting("folderExports");
            this.xmlSettings.AddDirectoryInfoSetting("folderLogs");
            this.xmlSettings.AddDirectoryInfoSetting("folderMedia");
            this.xmlSettings.AddControlSetting(this.pGraphing.Name, this.pGraphing);
            this.xmlSettings.AddControlSetting(this.pLeftView.Name, this.pLeftView);
            this.xmlSettings.AddControlSetting(this.opTableZone.clbZD.Name, this.opTableZone.clbZD);
            this.xmlSettings.AddControlSetting(this.opTableEncounter.btnEDSort.Name, this.opTableEncounter.btnEDSort);
            this.xmlSettings.AddControlSetting(this.opTableEncounter.btnEDSort2.Name, this.opTableEncounter.btnEDSort2);
            this.xmlSettings.AddControlSetting(this.opTableEncounter.clbED.Name, this.opTableEncounter.clbED);
            this.xmlSettings.AddControlSetting(this.opTableCombatant.clbCD.Name, this.opTableCombatant.clbCD);
            this.xmlSettings.AddControlSetting(this.opTableDamageType.btnMDSort.Name, this.opTableDamageType.btnMDSort);
            this.xmlSettings.AddControlSetting(this.opTableDamageType.btnMDSort2.Name, this.opTableDamageType.btnMDSort2);
            this.xmlSettings.AddControlSetting(this.opTableDamageType.clbDT.Name, this.opTableDamageType.clbDT);
            this.xmlSettings.AddControlSetting(this.opTableAttackType.btnATSort.Name, this.opTableAttackType.btnATSort);
            this.xmlSettings.AddControlSetting(this.opTableAttackType.btnATSort2.Name, this.opTableAttackType.btnATSort2);
            this.xmlSettings.AddControlSetting(this.opTableAttackType.clbAT.Name, this.opTableAttackType.clbAT);
            this.xmlSettings.AddControlSetting(this.opXmlShare.clbShareBanned.Name, this.opXmlShare.clbShareBanned);
            this.xmlSettings.AddControlSetting(this.opXmlShare.clbShareTrusted.Name, this.opXmlShare.clbShareTrusted);
            this.xmlSettings.AddControlSetting(ActGlobals.oFormSpellTimers.cbTimersOnTop2.Name, ActGlobals.oFormSpellTimers.cbTimersOnTop2);
            this.xmlSettings.AddControlSetting(this.opColorUserInterface.ccEncLabel1.Name, this.opColorUserInterface.ccEncLabel1);
            this.xmlSettings.AddControlSetting(this.opColorUserInterface.ccEncLabel2.Name, this.opColorUserInterface.ccEncLabel2);
            this.xmlSettings.AddControlSetting(this.opColorUserInterface.ccEncLabel3.Name, this.opColorUserInterface.ccEncLabel3);
            this.xmlSettings.AddControlSetting(this.opColorUserInterface.ccDGAllyText.Name, this.opColorUserInterface.ccDGAllyText);
            this.xmlSettings.AddControlSetting(this.opColorUserInterface.ccDGPersonalBackcolor.Name, this.opColorUserInterface.ccDGPersonalBackcolor);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccEncBarAvgText.Name, this.opColorGraphing.ccEncBarAvgText);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccEncBarBackFill.Name, this.opColorGraphing.ccEncBarBackFill);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccEncBarColor1.Name, this.opColorGraphing.ccEncBarColor1);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccEncBarColor2.Name, this.opColorGraphing.ccEncBarColor2);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccEncBarColor3.Name, this.opColorGraphing.ccEncBarColor3);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccEncBarLegendText.Name, this.opColorGraphing.ccEncBarLegendText);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccEncBarOutlining.Name, this.opColorGraphing.ccEncBarOutlining);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccEncBarText.Name, this.opColorGraphing.ccEncBarText);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccEncBarYLines.Name, this.opColorGraphing.ccEncBarYLines);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill1.Name, this.opColorGraphing.ccGraphFill1);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill2.Name, this.opColorGraphing.ccGraphFill2);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill3.Name, this.opColorGraphing.ccGraphFill3);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill4.Name, this.opColorGraphing.ccGraphFill4);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill5.Name, this.opColorGraphing.ccGraphFill5);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill6.Name, this.opColorGraphing.ccGraphFill6);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill7.Name, this.opColorGraphing.ccGraphFill7);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill8.Name, this.opColorGraphing.ccGraphFill8);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill9.Name, this.opColorGraphing.ccGraphFill9);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill10.Name, this.opColorGraphing.ccGraphFill10);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill11.Name, this.opColorGraphing.ccGraphFill11);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill12.Name, this.opColorGraphing.ccGraphFill12);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill13.Name, this.opColorGraphing.ccGraphFill13);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill14.Name, this.opColorGraphing.ccGraphFill14);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill15.Name, this.opColorGraphing.ccGraphFill15);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill16.Name, this.opColorGraphing.ccGraphFill16);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill17.Name, this.opColorGraphing.ccGraphFill17);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill18.Name, this.opColorGraphing.ccGraphFill18);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill19.Name, this.opColorGraphing.ccGraphFill19);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill20.Name, this.opColorGraphing.ccGraphFill20);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill21.Name, this.opColorGraphing.ccGraphFill21);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill22.Name, this.opColorGraphing.ccGraphFill22);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill23.Name, this.opColorGraphing.ccGraphFill23);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill24.Name, this.opColorGraphing.ccGraphFill24);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill25.Name, this.opColorGraphing.ccGraphFill25);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill26.Name, this.opColorGraphing.ccGraphFill26);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill27.Name, this.opColorGraphing.ccGraphFill27);
            this.xmlSettings.AddControlSetting(this.opColorGraphing.ccGraphFill28.Name, this.opColorGraphing.ccGraphFill28);
            this.xmlSettings.AddControlSetting(this.opGraphing.clbSoloGraphTypes.Name, this.opGraphing.clbSoloGraphTypes);
            this.xmlSettings.AddControlSetting(this.opColorMisc.ccSpellTimerBackColor.Name, this.opColorMisc.ccSpellTimerBackColor);
            this.xmlSettings.AddControlSetting(this.opColorMisc.ccSpellTimerExpireColor.Name, this.opColorMisc.ccSpellTimerExpireColor);
            this.xmlSettings.AddControlSetting(this.opColorMisc.ccSpellTimerForeColor.Name, this.opColorMisc.ccSpellTimerForeColor);
            this.xmlSettings.AddControlSetting(this.opColorMisc.ccSpellTimerWarnColor.Name, this.opColorMisc.ccSpellTimerWarnColor);
            this.xmlSettings.AddControlSetting(this.opColorUserInterface.fccMainWindow.Name, this.opColorUserInterface.fccMainWindow);
            this.xmlSettings.AddControlSetting(this.opColorUserInterface.fccWindowColors.Name, this.opColorUserInterface.fccWindowColors);
            this.xmlSettings.AddControlSetting(this.opMiniParse.fccMiniParse.Name, this.opMiniParse.fccMiniParse);
            this.xmlSettings.AddControlSetting(this.opLcdMono.btnLcdFont.Name, this.opLcdMono.btnLcdFont);
            this.xmlSettings.AddControlSetting(this.opLcdColor.fccLcdMini.Name, this.opLcdColor.fccLcdMini);
            this.xmlSettings.AddControlSetting(this.opLcdColor.fccLcdPersonal.Name, this.opLcdColor.fccLcdPersonal);
            this.xmlSettings.AddControlSetting(this.opColorUserInterface.fccTreeView.Name, this.opColorUserInterface.fccTreeView);
            this.xmlSettings.AddControlSetting(this.opColorUserInterface.fccDataGrid.Name, this.opColorUserInterface.fccDataGrid);
            this.xmlSettings.AddControlSetting(this.opLcdGeneral.cbLcdEnabled.Name, this.opLcdGeneral.cbLcdEnabled);
        }

        private void PopulateOptions()
        {
            this.tvOptions.Nodes.Clear();
            this.tvOptions.Nodes.Add("Miscellaneous");
            this.optionsControlSets.Add("Miscellaneous", new List<Control> { this.opMisc });
            this.tvOptions.Nodes.Add("Sound Settings");
            this.optionsControlSets.Add("Sound Settings", new List<Control> { this.opSound });
            TreeNode node = this.tvOptions.Nodes.Add("Configuration Import/Export");
            node.Nodes.Add("XML Share Snippets");
            node.Nodes.Add("XML Config Subscriptions");
            this.optionsControlSets.Add("Configuration Import/Export", new List<Control> { this.opImportExport });
            this.optionsControlSets.Add(@"Configuration Import/Export\XML Share Snippets", new List<Control> { this.opXmlShare });
            this.optionsControlSets.Add(@"Configuration Import/Export\XML Config Subscriptions", new List<Control> { this.opXmlSubs });
            TreeNode node2 = this.tvOptions.Nodes.Add("LCD Display Options");
            node2.Nodes.Add("Monochrome LCD Options");
            node2.Nodes.Add("Color LCD Options");
            this.optionsControlSets.Add("LCD Display Options", new List<Control> { this.opLcdGeneral });
            this.optionsControlSets.Add(@"LCD Display Options\Monochrome LCD Options", new List<Control> { this.opLcdMono });
            this.optionsControlSets.Add(@"LCD Display Options\Color LCD Options", new List<Control> { this.opLcdColor });
            TreeNode node3 = this.tvOptions.Nodes.Add("Main Table/Encounters");
            node3.Nodes.Add("General");
            node3.Nodes.Add("Encounter Culling");
            node3.Nodes.Add("Zone View Options");
            node3.Nodes.Add("Encounter View Options");
            node3.Nodes.Add("Combatant View Options");
            node3.Nodes.Add("DamageType View Options");
            node3.Nodes.Add("AttackType View Options");
            this.optionsControlSets.Add(@"Main Table/Encounters\General", new List<Control> { this.opMainTableGen });
            this.optionsControlSets.Add(@"Main Table/Encounters\Encounter Culling", new List<Control> { this.opEncCulling });
            this.optionsControlSets.Add(@"Main Table/Encounters\Zone View Options", new List<Control> { this.opTableZone });
            this.optionsControlSets.Add(@"Main Table/Encounters\Encounter View Options", new List<Control> { this.opTableEncounter });
            this.optionsControlSets.Add(@"Main Table/Encounters\Combatant View Options", new List<Control> { this.opTableCombatant });
            this.optionsControlSets.Add(@"Main Table/Encounters\DamageType View Options", new List<Control> { this.opTableDamageType });
            this.optionsControlSets.Add(@"Main Table/Encounters\AttackType View Options", new List<Control> { this.opTableAttackType });
            TreeNode node4 = this.tvOptions.Nodes.Add("Output Display");
            node4.Nodes.Add("Graphing");
            node4.Nodes.Add("Mini Parse Window");
            node4.Nodes.Add("Text Export Settings");
            node4.Nodes.Add("ODBC (SQL)");
            node4.Nodes.Add("ACT Web Server");
            node4.Nodes.Add("HTML File Generation");
            this.optionsControlSets.Add(@"Output Display\Graphing", new List<Control> { this.opGraphing });
            this.optionsControlSets.Add(@"Output Display\Mini Parse Window", new List<Control> { this.opMiniParse });
            this.optionsControlSets.Add(@"Output Display\Text Export Settings", new List<Control> { this.opTextExports });
            this.optionsControlSets.Add(@"Output Display\ODBC (SQL)", new List<Control> { this.opOdbc });
            this.optionsControlSets.Add(@"Output Display\ACT Web Server", new List<Control> { this.opWebServer });
            this.optionsControlSets.Add(@"Output Display\HTML File Generation", new List<Control> { this.opFileHTML });
            TreeNode node5 = this.tvOptions.Nodes.Add("Color and Font Settings");
            node5.Nodes.Add("Main User Interface");
            node5.Nodes.Add("Graphing");
            node5.Nodes.Add("Miscellaneous");
            this.optionsControlSets.Add(@"Color and Font Settings\Main User Interface", new List<Control> { this.opColorUserInterface });
            this.optionsControlSets.Add(@"Color and Font Settings\Graphing", new List<Control> { this.opColorGraphing });
            this.optionsControlSets.Add(@"Color and Font Settings\Miscellaneous", new List<Control> { this.opColorMisc });
            this.tvOptions.Nodes.Add("Selective Parsing");
            this.optionsControlSets.Add("Selective Parsing", new List<Control> { this.opSelectiveParsing });
            TreeNode node6 = this.tvOptions.Nodes.Add("Data Correction");
            node6.Nodes.Add("Miscellaneous");
            node6.Nodes.Add("Combatant Rename");
            node6.Nodes.Add("Ability Redirect");
            this.optionsControlSets.Add(@"Data Correction\Miscellaneous", new List<Control> { this.opDataCorrectionMisc });
            this.optionsControlSets.Add(@"Data Correction\Combatant Rename", new List<Control> { this.opDataCorrectionRename });
            this.optionsControlSets.Add(@"Data Correction\Ability Redirect", new List<Control> { this.opDataCorrectionRedirect });
            this.tvOptions.ExpandAll();
        }

        private void PopulateTView()
        {
            this.refreshTree = false;
            try
            {
                bool flag = false;
                try
                {
                    TreeNode node = new TreeNode();
                    for (int i = 0; i < this.zoneList.Count; i++)
                    {
                        ZoneData data = this.zoneList[i];
                        if ((this.tvDG.Nodes.Count < this.zoneList.Count) && (i > (this.tvDG.Nodes.Count - 1)))
                        {
                            node = new TreeNode {
                                Text = data.ToString(),
                                Tag = "ZoneData"
                            };
                            this.tvDG.Nodes.Add(node);
                            flag = true;
                        }
                        else
                        {
                            node = this.tvDG.Nodes[i];
                        }
                        if ((node.Nodes.Count == 0) && (data.Items.Count > 0))
                        {
                            node.Nodes.Add("...");
                        }
                        if (node.IsExpanded)
                        {
                            if (node.Nodes.Count == 0)
                            {
                                ThreadInvokes.TreeViewClear(this, this.tvDG);
                                this.refreshTree = true;
                                return;
                            }
                            if (node.Nodes[0].Text == "...")
                            {
                                node.Nodes[0].Remove();
                            }
                            for (int j = 0; j < data.Items.Count; j++)
                            {
                                EncounterData data2 = data.Items[j];
                                if ((this.tvDG.Nodes[i].Nodes.Count < data.Items.Count) && (j > (this.tvDG.Nodes[i].Nodes.Count - 1)))
                                {
                                    node = new TreeNode {
                                        Text = data2.ToString()
                                    };
                                    switch (data2.GetEncounterSuccessLevel())
                                    {
                                        case 1:
                                            node.ForeColor = this.opColorUserInterface.ccEncLabel1.ForeColorSetting;
                                            break;

                                        case 2:
                                            node.ForeColor = this.opColorUserInterface.ccEncLabel2.ForeColorSetting;
                                            break;

                                        case 3:
                                            node.ForeColor = this.opColorUserInterface.ccEncLabel3.ForeColorSetting;
                                            break;

                                        default:
                                            node.ForeColor = this.opColorUserInterface.fccDataGrid.ForeColorSetting;
                                            break;
                                    }
                                    node.Tag = "EncounterData";
                                    this.tvDG.Nodes[i].Nodes.Add(node);
                                    if (i == (this.zoneList.Count - 1))
                                    {
                                        flag = true;
                                    }
                                }
                                else
                                {
                                    node = this.tvDG.Nodes[i].Nodes[j];
                                }
                                if (((node.Nodes.Count == 0) && (data2.Items.Count > 0)) && !this.cbShowChecks.Checked)
                                {
                                    node.Nodes.Add("...");
                                }
                                if (node.IsExpanded)
                                {
                                    if (node.Nodes[0].Text == "...")
                                    {
                                        node.Nodes[0].Remove();
                                    }
                                    if (!this.cbShowChecks.Checked && this.tvDG.Nodes[i].Nodes[j].IsExpanded)
                                    {
                                        for (int k = 0; k < data2.Items.Values.Count; k++)
                                        {
                                            CombatantData data3 = data2.Items.Values[k];
                                            node = new TreeNode {
                                                Text = data3.ToString(),
                                                Tag = "CombatantData"
                                            };
                                            bool flag2 = false;
                                            foreach (TreeNode node2 in this.tvDG.Nodes[i].Nodes[j].Nodes)
                                            {
                                                if (node2.Text == node.Text)
                                                {
                                                    flag2 = true;
                                                    break;
                                                }
                                            }
                                            if (!flag2)
                                            {
                                                this.tvDG.Nodes[i].Nodes[j].Nodes.Add(node);
                                                node.Nodes.Add("...");
                                            }
                                            int index = -1;
                                            foreach (TreeNode node3 in this.tvDG.Nodes[i].Nodes[j].Nodes)
                                            {
                                                if (node3.Text == data3.ToString())
                                                {
                                                    index = node3.Index;
                                                    node = node3;
                                                    break;
                                                }
                                            }
                                            if (node.IsExpanded)
                                            {
                                                if (node.Nodes[0].Text == "...")
                                                {
                                                    node.Nodes[0].Remove();
                                                }
                                                int num6 = -1;
                                                foreach (DamageTypeData data4 in data3.Items.Values)
                                                {
                                                    num6++;
                                                    node = new TreeNode {
                                                        Tag = "DamageTypeData",
                                                        Text = data4.Type
                                                    };
                                                    if (this.tvDG.Nodes[i].Nodes[j].Nodes[index].Nodes.Count < (num6 + 1))
                                                    {
                                                        this.tvDG.Nodes[i].Nodes[j].Nodes[index].Nodes.Add(node);
                                                    }
                                                    else
                                                    {
                                                        node = this.tvDG.Nodes[i].Nodes[j].Nodes[index].Nodes[num6];
                                                    }
                                                    if ((node.Nodes.Count == 0) && (data4.Items.Count > 0))
                                                    {
                                                        node.Nodes.Add("...");
                                                    }
                                                    if (node.IsExpanded)
                                                    {
                                                        if (node.Nodes[0].Text == "...")
                                                        {
                                                            node.Nodes[0].Remove();
                                                        }
                                                        AttackType[] array = new AttackType[data4.Items.Count];
                                                        data4.Items.Values.CopyTo(array, 0);
                                                        for (int m = 0; m < array.Length; m++)
                                                        {
                                                            AttackType type = array[m];
                                                            node = new TreeNode {
                                                                Text = type.ToString(),
                                                                Tag = "AttackType"
                                                            };
                                                            flag2 = false;
                                                            foreach (TreeNode node4 in this.tvDG.Nodes[i].Nodes[j].Nodes[index].Nodes[num6].Nodes)
                                                            {
                                                                if (node4.Text == node.Text)
                                                                {
                                                                    flag2 = true;
                                                                    break;
                                                                }
                                                            }
                                                            if (!flag2)
                                                            {
                                                                this.tvDG.Nodes[i].Nodes[j].Nodes[index].Nodes[num6].Nodes.Add(node);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, string.Empty);
                    this.refreshTree = true;
                }
                if (flag && !this.cbLockDG.Checked)
                {
                    if (!this.tvDG.Nodes[this.tvDG.Nodes.Count - 1].IsExpanded)
                    {
                        this.tvDG.Nodes[this.tvDG.Nodes.Count - 1].Expand();
                    }
                    this.tvDG.SelectedNode = this.tvDG.Nodes[this.tvDG.Nodes.Count - 1].LastNode;
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, string.Empty);
            }
        }

        private void ReadLog()
        {
            StreamReader reader = new StreamReader(this.logStream, this.logEncoding);
            string str = string.Empty;
            this.readThreadAlive = true;
            try
            {
                if (this.LogFileChanged != null)
                {
                    this.LogFileChanged(false, this.LogFilePath);
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "ReadLog->LogFileChanged event");
            }
            while (!this.readThreadAborting)
            {
                try
                {
                    while (!this.readThreadDataAvailable || this.readThreadLock)
                    {
                        if (this.readThreadAborting)
                        {
                            break;
                        }
                        Thread.Sleep(1);
                    }
                    str = reader.ReadLine();
                    if (!string.IsNullOrEmpty(str))
                    {
                        this.GlobalTimeSorter++;
                        this.LastKnownTime = this.GetDateTimeFromLog(str);
                        this.curLogPos = reader.BaseStream.Position;
                        this.ParseRawLogLine(false, this.LastKnownTime, str);
                    }
                    else
                    {
                        this.readThreadDataAvailable = false;
                    }
                    continue;
                }
                catch (ThreadAbortException exception2)
                {
                    reader.Close();
                    this.WriteExceptionLog(exception2, str);
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblLogFile, string.Format("System Message: {0}", exception2.Message));
                    this.switchToLogLabel = true;
                    break;
                }
                catch (IOException exception3)
                {
                    reader.Close();
                    this.WriteExceptionLog(exception3, str);
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblLogFile, string.Format("System Message: {0}", exception3.Message));
                    this.switchToLogLabel = true;
                    break;
                }
                catch (ObjectDisposedException exception4)
                {
                    reader.Close();
                    this.WriteExceptionLog(exception4, str);
                    ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblLogFile, string.Format("System Message: {0}", exception4.Message));
                    this.switchToLogLabel = true;
                    break;
                }
                catch (Exception exception5)
                {
                    try
                    {
                        this.WriteExceptionLog(exception5, reader.BaseStream.Position + "\n" + str);
                    }
                    catch
                    {
                        this.WriteExceptionLog(exception5, str);
                    }
                    continue;
                }
            }
            reader.Close();
            this.SplitLogFile(new FileInfo(this.logStream.Name));
            if (!this.switchToLogLabel)
            {
                ThreadInvokes.ControlSetText(this, ActGlobals.oFormActMain.opMisc.lblLogFile, "Logfile closed.");
            }
            this.readThreadAborting = false;
            this.readThreadAlive = false;
        }

        public void RebuildActiveCustomTriggers()
        {
            char[] trimChars = new char[] { ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
            this.activeCustomTriggers.Clear();
            foreach (KeyValuePair<string, CustomTrigger> pair in this.customTriggers)
            {
                if ((!pair.Value.RestrictToCategoryZone || (this.currentZone.TrimEnd(trimChars) == pair.Value.Category)) && pair.Value.Active)
                {
                    this.activeCustomTriggers.Add(pair.Key, pair.Value);
                }
            }
            this.rebuildCustomTriggerTreeView = true;
        }

        private void RebuildCustomTriggerTreeView()
        {
            string str = string.Empty;
            TreeNode node = null;
            str = this.tbTriggerCategory.Text + "|" + this.tbTriggerText.Text;
            string category = "--";
            TreeNode node2 = null;
            this.tvCustomTriggers.BeginUpdate();
            this.tvCustomTriggers.Nodes.Clear();
            char[] trimChars = new char[] { ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
            foreach (KeyValuePair<string, CustomTrigger> pair in this.customTriggers)
            {
                if (pair.Value.Category != category)
                {
                    node2 = new TreeNode(pair.Value.Category) {
                        Tag = "Category"
                    };
                    category = pair.Value.Category;
                    this.tvCustomTriggers.Nodes.Add(node2);
                }
                TreeNode node3 = new TreeNode(pair.Value.ShortRegexString) {
                    Tag = pair.Value.Key,
                    Checked = pair.Value.Active
                };
                if ((!pair.Value.RestrictToCategoryZone || (this.CurrentZone.TrimEnd(trimChars) == pair.Value.Category)) && pair.Value.Active)
                {
                    node3.BackColor = System.Drawing.Color.LightGreen;
                }
                else
                {
                    node3.BackColor = System.Drawing.Color.LightPink;
                }
                if (pair.Value.RestrictToCategoryZone)
                {
                    node3.ForeColor = System.Drawing.Color.Blue;
                }
                node2.Nodes.Add(node3);
                if (pair.Value.Key == str)
                {
                    node = node3;
                }
            }
            this.tvCustomTriggers.ExpandAll();
            this.tvCustomTriggers.EndUpdate();
            if (node != null)
            {
                this.tvCustomTriggers.SelectedNode = node;
            }
        }

        private void RedirectAbility(CombatActionEventArgs e)
        {
            for (int i = 0; i < this.redirectList.Count; i++)
            {
                RedirectFix fix = this.redirectList.Values[i];
                if (fix.Active)
                {
                    fix.Fix(e);
                }
            }
        }

        internal void RedirectAddFix(RedirectFix newItem)
        {
            if (!this.redirectList.ContainsKey(newItem.ToString()))
            {
                this.redirectList.Add(newItem.ToString(), newItem);
                this.opDataCorrectionRedirect.clbAbilityRedirect.Items.Add(newItem.ToString(), newItem.Active);
            }
            else
            {
                this.redirectList[newItem.ToString()].Type = newItem.Type;
            }
        }

        internal void RemoveTextFormat(int Index)
        {
            this.opTextExports.ddlClipFormat.Items.RemoveAt(Index);
            this.opTextExports.ddlExMacroClipPreset.Items.RemoveAt(Index);
            this.opLcdGeneral.ddlLcdMiniFormat.Items.RemoveAt(Index);
            this.opLcdGeneral.ddlLcdPersonalFormat.Items.RemoveAt(Index);
            this.opMiniParse.ddlMiniFormat.Items.RemoveAt(Index);
            this.textExportFormats.RemoveAt(Index);
        }

        internal void RenameAddFix(RenameFix newItem)
        {
            if (!this.renameList.ContainsKey(newItem.ToString()))
            {
                this.renameList.Add(newItem.ToString(), newItem);
                this.opDataCorrectionRename.clbRename.Items.Add(newItem.ToString(), newItem.Active);
            }
        }

        private void RenameCombatant(CombatActionEventArgs e)
        {
            for (int i = 0; i < this.renameList.Count; i++)
            {
                RenameFix fix = this.renameList.Values[i];
                if (fix.IsMatch(e))
                {
                    fix.Fix(e);
                }
            }
        }

        public void ResetCheckLogs()
        {
            if (!this.noLoad)
            {
                try
                {
                    FileInfo info = new FileInfo(this.logFilePath);
                    DirectoryInfo directory = info.Directory;
                    try
                    {
                        while (!(directory.Name.ToLower() == this.LogFileParentFolderName.ToLower()))
                        {
                            directory = directory.Parent;
                        }
                    }
                    catch
                    {
                        directory = info.Directory;
                    }
                    this.logfileBaseFolder = directory;
                    if (this.threadCheckFiles != null)
                    {
                        this.threadCheckFiles.Abort();
                    }
                    if (ActGlobals.oFormActMain.opMisc.cbAutoLoadLogs.Checked)
                    {
                        this.threadCheckFiles = new Thread(new ThreadStart(this.ThreadCheckFiles));
                        this.threadCheckFiles.IsBackground = true;
                        this.threadCheckFiles.Start();
                    }
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, string.Empty);
                }
            }
        }

        private void ResetHtml()
        {
            try
            {
                FileInfo info = new FileInfo(Process.GetCurrentProcess().MainModule.FileName);
                DirectoryInfo directory = info.Directory;
                this.htmlDir = new DirectoryInfo(this.AppDataFolder.FullName + @"\html");
                this.htmlDir.Create();
                this.indexFs = new FileStream(this.htmlDir.FullName + @"\index.html", FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                this.indexFs.Seek(0, SeekOrigin.Begin);
                this.indexFs.SetLength(0);
                StreamWriter writer = new StreamWriter(this.indexFs);
                writer.WriteLine("<html><head><META http-equiv='Content-Type' content='text/html; charset=utf-8'></head>");
                writer.WriteLine("<BODY BGCOLOR='#000000' TEXT='#FFFFFF' ALINK='#9999FF' LINK='#9999FF' VLINK='#990099'>");
                writer.WriteLine("<h4><a href=\"index.html\">Return to Index</a> - <a href=\"current.html\">Current Encounter</a> - <a href=\"timers.html\">Timers Window</a></h4><br><hr><br></BODY></HTML>");
                writer.Flush();
                this.curHtmFs = new FileStream(this.htmlDir.FullName + @"\current.html", FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                this.curHtmFs.Seek(0, SeekOrigin.Begin);
                this.curHtmFs.SetLength(0);
                writer = new StreamWriter(this.curHtmFs);
                writer.WriteLine("<html><META http-equiv='Content-Type' content='text/html; charset=utf-8'><head><META HTTP-EQUIV=\"REFRESH\" CONTENT=\"5\"></head>");
                writer.WriteLine("<BODY BGCOLOR='#000000' TEXT='#FFFFFF' ALINK='#9999FF' LINK='#9999FF' VLINK='#990099'>");
                writer.WriteLine("<h4><a href=\"index.html\">Return to Index</a></h4><br><hr><br></BODY></HTML>");
                writer.Flush();
                this.timerHtmFs = new FileStream(this.htmlDir.FullName + @"\timers.html", FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                this.timerHtmFs.Seek(0, SeekOrigin.Begin);
                this.timerHtmFs.SetLength(0);
                writer = new StreamWriter(this.timerHtmFs);
                writer.WriteLine("<html><head><META http-equiv='Content-Type' content='text/html; charset=utf-8'><META HTTP-EQUIV=\"REFRESH\" CONTENT=\"1\"></head>");
                writer.WriteLine("<BODY BGCOLOR='#000000' TEXT='#FFFFFF' ALINK='#9999FF' LINK='#9999FF' VLINK='#990099'>");
                writer.WriteLine("<h4><a href=\"index.html\">Return to Index</a></h4><br><hr><br></BODY></HTML>");
                writer.Flush();
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "Reset EQ2 Psudo-HTML");
            }
        }

        public void ResizeLVCols(ListView listview)
        {
            try
            {
                int num = 0;
                int[] numArray = new int[listview.Columns.Count];
                int[] numArray2 = new int[listview.Columns.Count];
                if (listview.Items.Count == 0)
                {
                    for (int j = 0; j < listview.Columns.Count; j++)
                    {
                        numArray[j] += 10;
                        num += 10;
                    }
                }
                else
                {
                    for (int k = 0; k < listview.Items.Count; k++)
                    {
                        ListViewItem item = listview.Items[k];
                        for (int n = 0; n < listview.Columns.Count; n++)
                        {
                            if (numArray2[n] < item.SubItems[n].Text.Length)
                            {
                                numArray2[n] = item.SubItems[n].Text.Length;
                            }
                            int num5 = item.SubItems[n].Text.Length + listview.Columns[n].Text.Length;
                            numArray[n] += num5;
                            num += num5;
                        }
                    }
                    for (int m = 0; m < listview.Columns.Count; m++)
                    {
                        numArray[m] += numArray2[m] * listview.Items.Count;
                        num += numArray2[m] * listview.Items.Count;
                    }
                }
                for (int i = 0; i < listview.Columns.Count; i++)
                {
                    listview.Columns[i].Width = System.Convert.ToInt32((float) ((listview.Width - 0x18) * (((float) numArray[i]) / ((float) num))));
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private string ReverseCap(string Input)
        {
            List<char> list = new List<char>(Input.ToLower().ToCharArray());
            list.Reverse();
            list[0] = char.ToUpper(list[0]);
            return new string(list.ToArray());
        }

        private void RevertSearchHighlighting()
        {
            foreach (OldSearchHighlight highlight in this.searchHighlighted)
            {
                highlight.controlToSave.ForeColor = highlight.originalForeColor;
            }
            this.searchHighlighted.Clear();
            List<TreeNode> nodesSoFar = new List<TreeNode>();
            this.GetSubNodes(this.tvOptions.Nodes, ref nodesSoFar);
            foreach (TreeNode node in nodesSoFar)
            {
                node.BackColor = SystemColors.Window;
                if (this.optionsControlSets.ContainsKey(node.FullPath))
                {
                    foreach (Control control in this.optionsControlSets[node.FullPath])
                    {
                        this.SetOldHighlight(control);
                    }
                    continue;
                }
            }
        }

        internal void SaveNewSettings(string XmlFileName)
        {
            XmlTextWriter xWriter = new XmlTextWriter(XmlFileName + ".tmp", Encoding.UTF8) {
                Formatting = Formatting.Indented,
                Indentation = 4,
                Namespaces = false
            };
            xWriter.WriteStartDocument();
            xWriter.WriteStartElement("Config");
            this.SaveXmlSettingsSerializer(xWriter);
            this.SaveXmlSParseList(xWriter);
            this.SaveXmlTextFormats(xWriter);
            this.SaveXmlMacroExports(xWriter);
            this.SaveXmlCustomTriggers(xWriter);
            this.SaveXmlSpellTimers(xWriter, true, true);
            this.SaveXmlTimerWhiteList(xWriter);
            this.SaveXmlRenameFix(xWriter);
            this.SaveXmlAbilityRedirectFix(xWriter);
            this.SaveXmlActPlugins(xWriter);
            this.SaveXmlXmlSubs(xWriter);
            xWriter.WriteEndElement();
            xWriter.Flush();
            xWriter.Close();
            try
            {
                FileInfo info = new FileInfo(XmlFileName + ".tmp");
                FileInfo info2 = new FileInfo(XmlFileName);
                new XmlDocument().Load(info.FullName);
                info2.Delete();
                info.MoveTo(XmlFileName);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "Overwriting old XML file failed.");
            }
        }

        internal void SaveXmlAbilityRedirectFix(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("AbilityRedirectFix");
            foreach (KeyValuePair<string, RedirectFix> pair in this.redirectList)
            {
                xWriter.WriteStartElement("Redirect");
                xWriter.WriteAttributeString("Active", pair.Value.Active.ToString());
                xWriter.WriteAttributeString("Ability", pair.Value.Ability);
                xWriter.WriteAttributeString("Into", pair.Value.DestinationCombatant);
                xWriter.WriteAttributeString("Type", pair.Value.Type.ToString());
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
        }

        internal void SaveXmlActPlugins(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("ActPlugins");
            for (int i = 0; i < this.pPluginInfos.Controls.Count; i++)
            {
                ActPluginData tag = (ActPluginData) this.pPluginInfos.Controls[i].Tag;
                xWriter.WriteStartElement("Plugin");
                xWriter.WriteAttributeString("Enabled", tag.cbEnabled.Checked.ToString());
                xWriter.WriteAttributeString("Path", tag.pluginFile.FullName);
                xWriter.WriteEndElement();
                try
                {
                    if (tag.pluginObj != null)
                    {
                        tag.pluginObj.DeInitPlugin();
                    }
                }
                catch
                {
                }
            }
            xWriter.WriteEndElement();
        }

        internal void SaveXmlCustomTriggers(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("CustomTriggers");
            foreach (KeyValuePair<string, CustomTrigger> pair in this.customTriggers)
            {
                xWriter.WriteStartElement("Trigger");
                xWriter.WriteAttributeString("Active", pair.Value.Active.ToString());
                xWriter.WriteAttributeString("Regex", pair.Value.ShortRegexString);
                xWriter.WriteAttributeString("SoundData", pair.Value.SoundData);
                xWriter.WriteAttributeString("SoundType", pair.Value.SoundType.ToString());
                xWriter.WriteAttributeString("CategoryRestrict", pair.Value.RestrictToCategoryZone.ToString());
                xWriter.WriteAttributeString("Category", pair.Value.Category);
                xWriter.WriteAttributeString("Timer", pair.Value.Timer.ToString());
                xWriter.WriteAttributeString("TimerName", pair.Value.TimerName);
                xWriter.WriteAttributeString("Tabbed", pair.Value.Tabbed.ToString());
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
        }

        internal void SaveXmlMacroExports(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("MacroExports");
            for (int i = 0; i < this.opTextExports.clbExFilePresets.Items.Count; i++)
            {
                MacroExportSetting setting = (MacroExportSetting) this.opTextExports.clbExFilePresets.Items[i];
                xWriter.WriteStartElement("MacroExport");
                xWriter.WriteAttributeString("Checked", this.opTextExports.clbExFilePresets.GetItemChecked(i).ToString());
                xWriter.WriteAttributeString("Align", setting.AlignToContent.ToString());
                xWriter.WriteAttributeString("Channel", setting.ExportChannel.ToString());
                xWriter.WriteAttributeString("File", setting.ExportFile.ToString());
                xWriter.WriteAttributeString("MaxLines", setting.ExportMaxLines.ToString());
                xWriter.WriteAttributeString("PresetIndex", setting.ExportPresetIndex.ToString());
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
        }

        public void SaveXmlRecords(string Path)
        {
            FileInfo info = new FileInfo(Path);
            XmlTextWriter writer = new XmlTextWriter(info.FullName + ".tmp", Encoding.UTF8) {
                Formatting = Formatting.Indented,
                Indentation = 4,
                Namespaces = false
            };
            writer.WriteStartDocument();
            writer.WriteStartElement("", "Records", "");
            for (int i = 0; i < this.zoneDatabase.Count; i++)
            {
                writer.WriteStartElement("", "Record", "");
                writer.WriteAttributeString("Type", this.zoneDatabase.Values[i].Type.ToString());
                writer.WriteAttributeString("Label", this.zoneDatabase.Values[i].Label);
                writer.WriteAttributeString("CharName", this.zoneDatabase.Values[i].CharName);
                writer.WriteAttributeString("StartTime", this.zoneDatabase.Values[i].StartTime.ToBinary().ToString());
                writer.WriteAttributeString("EndTime", this.zoneDatabase.Values[i].EndTime.ToBinary().ToString());
                writer.WriteEndElement();
            }
            for (int j = 0; j < this.encDatabase.Count; j++)
            {
                writer.WriteStartElement("", "Record", "");
                writer.WriteAttributeString("Type", this.encDatabase.Values[j].Type.ToString());
                writer.WriteAttributeString("Label", this.encDatabase.Values[j].Label);
                writer.WriteAttributeString("CharName", this.encDatabase.Values[j].CharName);
                writer.WriteAttributeString("StartTime", this.encDatabase.Values[j].StartTime.ToBinary().ToString());
                writer.WriteAttributeString("EndTime", this.encDatabase.Values[j].EndTime.ToBinary().ToString());
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();
            try
            {
                FileInfo info2 = new FileInfo(info.FullName + ".tmp");
                new FileInfo(info.FullName).Delete();
                info2.MoveTo(info.FullName);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "Overwriting old XML file failed.");
            }
        }

        internal void SaveXmlRenameFix(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("RenameFix");
            foreach (KeyValuePair<string, RenameFix> pair in this.renameList)
            {
                xWriter.WriteStartElement("Rename");
                xWriter.WriteAttributeString("Active", pair.Value.Active.ToString());
                xWriter.WriteAttributeString("Before", pair.Value.Before);
                xWriter.WriteAttributeString("After", pair.Value.After);
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
        }

        internal void SaveXmlSettingsSerializer(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("SettingsSerializer");
            this.xmlSettings.ExportToXml(xWriter);
            xWriter.WriteEndElement();
        }

        internal void SaveXmlSParseList(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("SParseList");
            foreach (KeyValuePair<string, bool> pair in ActGlobals.selectiveList)
            {
                xWriter.WriteStartElement("Player");
                xWriter.WriteAttributeString("Name", pair.Key);
                xWriter.WriteAttributeString("Checked", pair.Value.ToString());
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
        }

        internal void SaveXmlSpellTimers(XmlTextWriter xWriter, bool SaveEnabled, bool SaveSounds)
        {
            xWriter.WriteStartElement("SpellTimers");
            foreach (KeyValuePair<string, TimerData> pair in ActGlobals.oFormSpellTimers.TimerDefs)
            {
                TimerData data = pair.Value;
                xWriter.WriteStartElement("Spell");
                if (SaveEnabled)
                {
                    xWriter.WriteAttributeString("Checked", data.ActiveInList.ToString());
                }
                xWriter.WriteAttributeString("Name", data.Name);
                xWriter.WriteAttributeString("Timer", data.TimerValue.ToString());
                xWriter.WriteAttributeString("OnlyMasterTicks", data.OnlyMasterTicks.ToString());
                xWriter.WriteAttributeString("Restrict", data.RestrictToMe.ToString());
                xWriter.WriteAttributeString("Absolute", data.AbsoluteTiming.ToString());
                if (SaveSounds)
                {
                    xWriter.WriteAttributeString("StartWav", data.StartSoundData);
                    xWriter.WriteAttributeString("WarningWav", data.WarningSoundData);
                }
                xWriter.WriteAttributeString("WarningValue", data.WarningValue.ToString());
                xWriter.WriteAttributeString("RadialDisplay", data.RadialDisplay.ToString());
                xWriter.WriteAttributeString("Modable", data.Modable.ToString());
                xWriter.WriteAttributeString("Tooltip", data.Tooltip);
                xWriter.WriteAttributeString("FillColor", data.FillColor.ToArgb().ToString());
                xWriter.WriteAttributeString("Panel1", data.Panel1Display.ToString());
                xWriter.WriteAttributeString("Panel2", data.Panel2Display.ToString());
                xWriter.WriteAttributeString("RemoveValue", data.RemoveValue.ToString());
                xWriter.WriteAttributeString("Category", data.Category);
                xWriter.WriteAttributeString("RestrictCategory", data.RestrictToCategory.ToString());
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
        }

        internal void SaveXmlTextFormats(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("TextFormats");
            for (int i = 0; i < this.textExportFormats.Count; i++)
            {
                TextExportFormatOptions options = this.textExportFormats[i];
                xWriter.WriteStartElement("Format");
                xWriter.WriteAttributeString("PlayerFormat", options.PlayerFormat);
                xWriter.WriteAttributeString("AlliesFormat", options.AlliesFormat);
                xWriter.WriteAttributeString("Sorting", options.Sorting);
                xWriter.WriteAttributeString("ShowOnlyAllies", options.ShowOnlyAllies.ToString());
                xWriter.WriteAttributeString("ShowAlliesInfo", options.ShowAlliedInfo.ToString());
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
        }

        internal void SaveXmlTimerWhiteList(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("TimerWhiteList");
            foreach (KeyValuePair<string, string> pair in ActGlobals.oFormSpellTimers.WhiteList)
            {
                xWriter.WriteStartElement("Character");
                xWriter.WriteString(pair.Value);
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
        }

        internal void SaveXmlXmlSubs(XmlTextWriter xWriter)
        {
            xWriter.WriteStartElement("XmlSubs");
            foreach (KeyValuePair<string, XmlShareEntry> pair in this.subEntries)
            {
                xWriter.WriteStartElement("XmlSub");
                xWriter.WriteAttributeString("Url", pair.Value.Url);
                xWriter.WriteAttributeString("Auto", pair.Value.RbAuto.ToString());
                xWriter.WriteAttributeString("Notify", pair.Value.RbNotify.ToString());
                xWriter.WriteAttributeString("Ignore", pair.Value.RbIgnore.ToString());
                xWriter.WriteAttributeString("LastModified", pair.Value.LastModified.ToBinary().ToString());
                xWriter.WriteAttributeString("LastUpdated", pair.Value.LastUpdated.ToBinary().ToString());
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
        }

        private void SearchSubControls(Control baseControl, string[] terms, ref bool nodeHighlight)
        {
            foreach (Control control in baseControl.Controls)
            {
                int num = 0;
                for (int i = 0; i < terms.Length; i++)
                {
                    if (i > num)
                    {
                        break;
                    }
                    if (control.Text.ToLower().Contains(terms[i]) || this.GetHelpText(control.Name).ToLower().Contains(terms[i]))
                    {
                        num++;
                    }
                }
                if ((num == terms.Length) && (num > 0))
                {
                    nodeHighlight = true;
                    control.ForeColor = System.Drawing.Color.Red;
                }
                this.SearchSubControls(control, terms, ref nodeHighlight);
            }
        }

        public void SelectiveListAdd(string Player)
        {
            string key = Player.ToUpper();
            if (ActGlobals.selectiveList.ContainsKey(key))
            {
                ActGlobals.selectiveList[key] = true;
            }
            else
            {
                ActGlobals.selectiveList.Add(key, true);
            }
            this.selectiveListRebuild = true;
        }

        public void SelectiveListClear()
        {
            ActGlobals.selectiveList.Clear();
            this.selectiveListRebuild = true;
        }

        public bool SelectiveListGetSelected(string Player)
        {
            string key = Player.ToUpper();
            if (ActGlobals.selectiveList.ContainsKey(key))
            {
                return ActGlobals.selectiveList[key];
            }
            return false;
        }

        public void SelectiveListRemove(string Player, bool RemoveEntry)
        {
            string key = Player.ToUpper();
            if (ActGlobals.selectiveList.ContainsKey(key))
            {
                if (RemoveEntry)
                {
                    ActGlobals.selectiveList.Remove(key);
                }
                else
                {
                    ActGlobals.selectiveList[key] = false;
                }
            }
            this.selectiveListRebuild = true;
        }

        public void SelectiveListUncheckAll()
        {
            List<string> list = new List<string>();
            foreach (string str in ActGlobals.selectiveList.Keys)
            {
                list.Add(str);
            }
            for (int i = 0; i < list.Count; i++)
            {
                ActGlobals.selectiveList[list[i]] = false;
            }
            this.selectiveListRebuild = true;
        }

        private void selectThisActionInViewLogsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.lvDG.SelectedIndices.Count != 0)
            {
                List<MasterSwing> currentTable = (List<MasterSwing>) this.currentTable;
                int num = this.lvDG.SelectedIndices[0];
                MasterSwing swing = currentTable[num];
                ActGlobals.oFormEncounterLogs.ShowLogs(swing.ParentEncounter.LogLines);
                ActGlobals.oFormEncounterLogs.ScrollToGlobalTimeSorter(swing.TimeSorter);
            }
        }

        public void SendHtmlToClipboard(string html)
        {
            try
            {
                StringBuilder builder = new StringBuilder();
                string str = "Format:HTML Format\r\nVersion:1.0\r\nStartHTML:<<<<<<<1\r\nEndHTML:<<<<<<<2\r\nStartFragment:<<<<<<<3\r\nEndFragment:<<<<<<<4\r\nStartSelection:<<<<<<<3\r\nEndSelection:<<<<<<<3\r\n";
                string str2 = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r\n<HTML><HEAD><TITLE>" + this.lblDG.Text + "</TITLE></HEAD><BODY><!--StartFragment-->";
                string str3 = "<!--EndFragment--></BODY></HTML>";
                builder.Append(str);
                int length = builder.Length;
                builder.Append(str2);
                int num2 = builder.Length;
                builder.Append(html);
                int num3 = builder.Length;
                builder.Append(str3);
                int num4 = builder.Length;
                builder.Replace("<<<<<<<1", length.ToString("00000000"));
                builder.Replace("<<<<<<<2", num4.ToString("00000000"));
                builder.Replace("<<<<<<<3", num2.ToString("00000000"));
                builder.Replace("<<<<<<<4", num3.ToString("00000000"));
                DataObject data = new DataObject();
                data.SetData(DataFormats.Html, builder.ToString());
                data.SetData(DataFormats.Text, html);
                Clipboard.SetDataObject(data, true, 10, 100);
                if (ActGlobals.oFormActMain.opMisc.cbClipConnect.Checked && this.clipXmlWriter.BaseStream.CanWrite)
                {
                    try
                    {
                        this.clipXmlWriter.WriteStartElement("Clipboard");
                        this.clipXmlWriter.WriteString(html);
                        this.clipXmlWriter.WriteEndElement();
                        this.clipXmlWriter.Flush();
                    }
                    catch (Exception exception)
                    {
                        ActGlobals.oFormActMain.opMisc.lblClipStatus.Text = exception.Message;
                    }
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, "HTML Clipboard Object");
            }
        }

        private void SendResourceToFile(string resourceName, string filePath)
        {
            BinaryReader reader = new BinaryReader(Assembly.GetExecutingAssembly().GetManifestResourceStream(base.GetType(), resourceName));
            BinaryWriter writer = new BinaryWriter(new FileInfo(filePath).Open(FileMode.Create));
            byte[] buffer = reader.ReadBytes((int) reader.BaseStream.Length);
            writer.Write(buffer);
            writer.Flush();
            writer.Close();
            reader.Close();
        }

        public void SendToClipboard(string ClipText, bool CopyLocal)
        {
            ClipboardEventArgs clipArgs = new ClipboardEventArgs(ClipText, CopyLocal);
            if (this.BeforeClipboardSet != null)
            {
                this.BeforeClipboardSet(clipArgs);
            }
            ClipText = clipArgs.ClipContent;
            CopyLocal = clipArgs.CopyLocal;
            try
            {
                if (ActGlobals.oFormActMain.opMisc.cbClipConnect.Checked && this.clipXmlWriter.BaseStream.CanWrite)
                {
                    if (ClipText.Length <= 0x80000)
                    {
                        try
                        {
                            byte[] bytes = Encoding.UTF8.GetBytes(ClipText);
                            byte[] inArray = this.MemCompress(bytes);
                            this.clipXmlWriter.WriteStartElement("Clipboard");
                            this.clipXmlWriter.WriteAttributeString("Length", bytes.Length.ToString());
                            this.clipXmlWriter.WriteString(System.Convert.ToBase64String(inArray));
                            this.clipXmlWriter.WriteEndElement();
                            this.clipXmlWriter.Flush();
                        }
                        catch (Exception exception)
                        {
                            ActGlobals.oFormActMain.opMisc.lblClipStatus.Text = exception.Message;
                        }
                    }
                    if (CopyLocal)
                    {
                        Clipboard.SetDataObject(ClipText, true);
                    }
                }
                else
                {
                    Clipboard.SetDataObject(ClipText, true);
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, "Method 1");
                try
                {
                    Thread.Sleep(100);
                    ThreadInvokes.ControlSetText(this, this.tbClipboard, ClipText);
                    this.tbClipboard.SelectAll();
                    this.tbClipboard.Copy();
                }
                catch (Exception exception3)
                {
                    this.WriteExceptionLog(exception3, "Method 2");
                    try
                    {
                        Thread.Sleep(100);
                        Clipboard.SetDataObject(ClipText, false);
                    }
                    catch (Exception exception4)
                    {
                        this.WriteExceptionLog(exception4, "Method 3");
                    }
                }
            }
        }

        public bool SendToMacroFile(string ExportFilePath, string FileContents, string LinePrefix)
        {
            try
            {
                bool flag = Path.IsPathRooted(ExportFilePath);
                if (!flag && string.IsNullOrEmpty(this.gameFolder))
                {
                    if (!string.IsNullOrEmpty(this.logFilePath))
                    {
                        FileInfo info = new FileInfo(this.logFilePath);
                        if (System.IO.File.Exists(info.Directory.Parent.Parent.FullName + @"\EverQuest2.exe"))
                        {
                            this.gameFolder = info.Directory.Parent.Parent.FullName;
                        }
                    }
                    if (string.IsNullOrEmpty(this.gameFolder))
                    {
                        RegistryKey key = Registry.LocalMachine.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\App Paths\EverQuest2.exe");
                        if (System.IO.File.Exists(key.GetValue("Path").ToString() + @"\EverQuest2.exe"))
                        {
                            this.gameFolder = key.GetValue("Path").ToString();
                        }
                    }
                }
                if (!string.IsNullOrEmpty(this.gameFolder) || flag)
                {
                    FileStream stream;
                    if (flag)
                    {
                        stream = new FileStream(ExportFilePath, FileMode.OpenOrCreate, FileAccess.Write, FileShare.Read);
                    }
                    else
                    {
                        stream = new FileStream(this.gameFolder + @"\" + ExportFilePath, FileMode.OpenOrCreate, FileAccess.Write, FileShare.Read);
                    }
                    stream.Seek(0, SeekOrigin.Begin);
                    stream.SetLength(0);
                    StreamWriter writer = new StreamWriter(stream);
                    if (!string.IsNullOrEmpty(LinePrefix))
                    {
                        FileContents = FileContents.TrimEnd(new char[] { '\r', '\n' });
                        LinePrefix = LinePrefix.Trim();
                    }
                    FileContents = FileContents.Replace(Environment.NewLine, "\n");
                    string[] strArray = FileContents.Split(new char[] { '\n' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        writer.WriteLine(string.Format("{0} {1}", LinePrefix, strArray[i]));
                    }
                    writer.Flush();
                    writer.Close();
                    return true;
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, this.gameFolder + "\n" + ExportFilePath);
            }
            return false;
        }

        internal void SetCharName(bool ParseFileName)
        {
            if (ThreadInvokes.ControlGetText(this, this.opDataCorrectionMisc.tbCharName).Length > 2)
            {
                ActGlobals.charName = ThreadInvokes.ControlGetText(this, this.opDataCorrectionMisc.tbCharName);
            }
            else
            {
                ActGlobals.charName = "YOU";
            }
            if (ParseFileName)
            {
                if (this.characterFileNameRegex.IsMatch(this.logFilePath) && this.LogPathHasCharName)
                {
                    ActGlobals.charName = this.characterFileNameRegex.Replace(this.logFilePath, "$1");
                }
                if (ActGlobals.charName == "$1")
                {
                    if (ThreadInvokes.ControlGetText(this, this.opDataCorrectionMisc.tbCharName).Length > 2)
                    {
                        ActGlobals.charName = ThreadInvokes.ControlGetText(this, this.opDataCorrectionMisc.tbCharName);
                    }
                    else
                    {
                        ActGlobals.charName = "YOU";
                    }
                }
            }
        }

        public bool SetEncounter(DateTime Time, string Attacker, string Victim)
        {
            if (this.opSelectiveParsing.rbSParseFull.Checked && !this.inCombat)
            {
                bool flag = true;
                if (this.SelectiveListGetSelected(Attacker) || this.SelectiveListGetSelected(Victim))
                {
                    flag = false;
                }
                if (flag)
                {
                    return false;
                }
            }
            if (!this.inCombat)
            {
                if (((this.lastZoneRecord.Label != this.ActiveZone.ZoneName) || (this.currentZone != this.ActiveZone.ZoneName)) || (this.lastZoneRecord.StartTime != this.ActiveZone.StartTime))
                {
                    bool flag2 = false;
                    for (int i = 0; i < this.ZoneList.Count; i++)
                    {
                        if ((this.ZoneList[i].StartTime == this.lastZoneRecord.StartTime) && (this.lastZoneRecord.Label == this.ZoneList[i].ZoneName))
                        {
                            flag2 = true;
                            this.ActiveZone = this.ZoneList[i];
                            break;
                        }
                    }
                    if (!flag2)
                    {
                        DateTime startTime;
                        if (this.lastZoneRecord.Label == this.currentZone)
                        {
                            startTime = this.lastZoneRecord.StartTime;
                        }
                        else
                        {
                            startTime = Time;
                        }
                        this.ActiveZone = new ZoneData(startTime, this.currentZone, this.opMisc.cbZoneAllListing.Checked, this.opSelectiveParsing.rbSParseFull.Checked, this.opSelectiveParsing.cbSParseIgnoreEnemies.Checked);
                        int count = this.zoneList.Count;
                        for (int j = 1; j < this.zoneList.Count; j++)
                        {
                            if (this.zoneList[j].StartTime > Time)
                            {
                                count = j;
                                break;
                            }
                        }
                        this.zoneList.Insert(count, this.ActiveZone);
                    }
                }
                if (this.opSelectiveParsing.rbSParseFull.Checked)
                {
                    this.ActiveZone.ActiveEncounter = new EncounterData(ActGlobals.charName, this.currentZone, this.opSelectiveParsing.cbSParseIgnoreEnemies.Checked, this.ActiveZone);
                }
                else
                {
                    this.ActiveZone.ActiveEncounter = new EncounterData(ActGlobals.charName, this.currentZone, this.ActiveZone);
                }
                this.ActiveZone.Items.Add(this.ActiveZone.ActiveEncounter);
                try
                {
                    if (this.OnCombatStart != null)
                    {
                        this.OnCombatStart(this.importThreadAlive, new CombatToggleEventArgs(this.zoneList.Count - 1, this.zoneList[this.zoneList.Count - 1].Items.Count - 1, this.ActiveZone.ActiveEncounter));
                    }
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, "SetEncounter->OnCombatStart event");
                }
            }
            if (this.ActiveZone.ActiveEncounter.GetIsSelective())
            {
                if (!this.SelectiveListGetSelected(Attacker) && !this.SelectiveListGetSelected(Victim))
                {
                    return false;
                }
                this.idleCounter = 0;
                this.refreshTree = true;
                this.lastHostileTime = Time;
                this.inCombat = true;
                return true;
            }
            this.idleCounter = 0;
            this.refreshTree = true;
            this.lastHostileTime = Time;
            this.inCombat = true;
            return true;
        }

        private void setEncounterAlliesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Index];
                EncounterData encounter = data.Items[this.tvDG.SelectedNode.Index];
                ActGlobals.oFormAlliesEdit.ShowAlliesWindow(encounter, this.tvDG.SelectedNode);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        public void SetIoHelpText(string Text)
        {
            if (string.IsNullOrWhiteSpace(Text))
            {
                this.lblIoHelp.Text = "Mouse-over an item to view a more detailed explanation.";
            }
            else
            {
                this.lblIoHelp.Text = Text;
            }
        }

        private void SetOldHighlight(Control baseControl)
        {
            foreach (Control control in baseControl.Controls)
            {
                this.searchHighlighted.Add(new OldSearchHighlight(control, control.ForeColor));
                this.SetOldHighlight(control);
            }
        }

        public void SetOptionsHelpText(string Text)
        {
            if (string.IsNullOrWhiteSpace(Text))
            {
                this.lblHelpText.Text = "Mouse-over an item to view a more detailed explanation.";
            }
            else
            {
                this.lblHelpText.Text = Text;
            }
        }

        [Obsolete("ACTv3 does not have a default parsing method.")]
        public void SetParserToNull()
        {
        }

        private void SetupEQ2EnglishEnvironment()
        {
            CultureInfo usCulture = new CultureInfo("en-US");
            EncounterData.ColumnDefs.Clear();
            EncounterData.ColumnDefs.Add("EncId", new EncounterData.ColumnDef("EncId", false, "CHAR(8)", "EncId", Data => string.Empty, Data => Data.EncId));
            EncounterData.ColumnDefs.Add("Title", new EncounterData.ColumnDef("Title", true, "VARCHAR(64)", "Title", Data => Data.Title, Data => Data.Title));
            EncounterData.ColumnDefs.Add("StartTime", new EncounterData.ColumnDef("StartTime", true, "TIMESTAMP", "StartTime", delegate (EncounterData Data) {
                if (!(Data.StartTime == DateTime.MaxValue))
                {
                    return string.Format("{0} {1}", Data.StartTime.ToShortDateString(), Data.StartTime.ToLongTimeString());
                }
                return "--:--:--";
            }, delegate (EncounterData Data) {
                if (!(Data.StartTime == DateTime.MaxValue))
                {
                    return Data.StartTime.ToString("u").TrimEnd(new char[] { 'Z' });
                }
                return "0000-00-00 00:00:00";
            }));
            EncounterData.ColumnDefs.Add("EndTime", new EncounterData.ColumnDef("EndTime", true, "TIMESTAMP", "EndTime", delegate (EncounterData Data) {
                if (!(Data.EndTime == DateTime.MinValue))
                {
                    return Data.EndTime.ToString("T");
                }
                return "--:--:--";
            }, delegate (EncounterData Data) {
                if (!(Data.EndTime == DateTime.MinValue))
                {
                    return Data.EndTime.ToString("u").TrimEnd(new char[] { 'Z' });
                }
                return "0000-00-00 00:00:00";
            }));
            EncounterData.ColumnDefs.Add("Duration", new EncounterData.ColumnDef("Duration", true, "INT", "Duration", Data => Data.DurationS, Data => Data.Duration.TotalSeconds.ToString("0")));
            EncounterData.ColumnDefs.Add("Damage", new EncounterData.ColumnDef("Damage", true, "BIGINT", "Damage", Data => Data.Damage.ToString(this.GetIntCommas()), Data => Data.Damage.ToString()));
            EncounterData.ColumnDefs.Add("EncDPS", new EncounterData.ColumnDef("EncDPS", true, "DOUBLE", "EncDPS", Data => Data.DPS.ToString(this.GetFloatCommas()), Data => Data.DPS.ToString(usCulture)));
            EncounterData.ColumnDefs.Add("Zone", new EncounterData.ColumnDef("Zone", false, "VARCHAR(64)", "Zone", Data => Data.ZoneName, Data => Data.ZoneName));
            EncounterData.ColumnDefs.Add("Kills", new EncounterData.ColumnDef("Kills", true, "INT", "Kills", Data => Data.AlliedKills.ToString(this.GetIntCommas()), Data => Data.AlliedKills.ToString()));
            EncounterData.ColumnDefs.Add("Deaths", new EncounterData.ColumnDef("Deaths", true, "INT", "Deaths", Data => Data.AlliedDeaths.ToString(), Data => Data.AlliedDeaths.ToString()));
            EncounterData.ExportVariables.Clear();
            EncounterData.ExportVariables.Add("n", new EncounterData.TextExportFormatter("n", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-newline"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-newline"].DisplayedText, (Data, SelectiveAllies, Extra) => "\n"));
            EncounterData.ExportVariables.Add("t", new EncounterData.TextExportFormatter("t", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-tab"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-tab"].DisplayedText, (Data, SelectiveAllies, Extra) => "\t"));
            EncounterData.ExportVariables.Add("title", new EncounterData.TextExportFormatter("title", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-title"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-title"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "title", Extra)));
            EncounterData.ExportVariables.Add("duration", new EncounterData.TextExportFormatter("duration", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-duration"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-duration"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "duration", Extra)));
            EncounterData.ExportVariables.Add("DURATION", new EncounterData.TextExportFormatter("DURATION", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-DURATION"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-DURATION"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "DURATION", Extra)));
            EncounterData.ExportVariables.Add("damage", new EncounterData.TextExportFormatter("damage", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-damage"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-damage"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "damage", Extra)));
            EncounterData.ExportVariables.Add("damage-m", new EncounterData.TextExportFormatter("damage-m", "Damage M", "Damage divided by 1,000,000 (with two decimal places)", (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "damage-m", Extra)));
            EncounterData.ExportVariables.Add("DAMAGE-k", new EncounterData.TextExportFormatter("DAMAGE-k", "Short Damage K", "Damage divided by 1,000 (with no decimal places)", (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "DAMAGE-k", Extra)));
            EncounterData.ExportVariables.Add("DAMAGE-m", new EncounterData.TextExportFormatter("DAMAGE-m", "Short Damage M", "Damage divided by 1,000,000 (with no decimal places)", (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "DAMAGE-m", Extra)));
            EncounterData.ExportVariables.Add("dps", new EncounterData.TextExportFormatter("dps", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-dps"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-dps"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "dps", Extra)));
            EncounterData.ExportVariables.Add("DPS", new EncounterData.TextExportFormatter("DPS", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-DPS"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-DPS"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "DPS", Extra)));
            EncounterData.ExportVariables.Add("DPS-k", new EncounterData.TextExportFormatter("DPS-k", "DPS K", "DPS divided by 1,000 (with no decimal places)", (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "DPS-k", Extra)));
            EncounterData.ExportVariables.Add("encdps", new EncounterData.TextExportFormatter("encdps", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-extdps"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-extdps"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "encdps", Extra)));
            EncounterData.ExportVariables.Add("ENCDPS", new EncounterData.TextExportFormatter("ENCDPS", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-EXTDPS"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-EXTDPS"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "ENCDPS", Extra)));
            EncounterData.ExportVariables.Add("ENCDPS-k", new EncounterData.TextExportFormatter("ENCDPS-k", "Short DPS K", "ENCDPS divided by 1,000 (with no decimal places)", (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "ENCDPS-k", Extra)));
            EncounterData.ExportVariables.Add("hits", new EncounterData.TextExportFormatter("hits", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-hits"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-hits"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "hits", Extra)));
            EncounterData.ExportVariables.Add("crithits", new EncounterData.TextExportFormatter("crithits", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-crithits"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-crithits"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "crithits", Extra)));
            EncounterData.ExportVariables.Add("crithit%", new EncounterData.TextExportFormatter("crithit%", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-crithit%"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-crithit%"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "crithit%", Extra)));
            EncounterData.ExportVariables.Add("misses", new EncounterData.TextExportFormatter("misses", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-misses"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-misses"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "misses", Extra)));
            EncounterData.ExportVariables.Add("hitfailed", new EncounterData.TextExportFormatter("hitfailed", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-hitfailed"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-hitfailed"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "hitfailed", Extra)));
            EncounterData.ExportVariables.Add("swings", new EncounterData.TextExportFormatter("swings", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-swings"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-swings"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "swings", Extra)));
            EncounterData.ExportVariables.Add("tohit", new EncounterData.TextExportFormatter("tohit", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-tohit"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-tohit"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "tohit", Extra)));
            EncounterData.ExportVariables.Add("TOHIT", new EncounterData.TextExportFormatter("TOHIT", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-TOHIT"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-TOHIT"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "TOHIT", Extra)));
            EncounterData.ExportVariables.Add("maxhit", new EncounterData.TextExportFormatter("maxhit", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-maxhit"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-maxhit"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "maxhit", Extra)));
            EncounterData.ExportVariables.Add("MAXHIT", new EncounterData.TextExportFormatter("MAXHIT", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-MAXHIT"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-MAXHIT"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "MAXHIT", Extra)));
            EncounterData.ExportVariables.Add("healed", new EncounterData.TextExportFormatter("healed", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-healed"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-healed"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "healed", Extra)));
            EncounterData.ExportVariables.Add("enchps", new EncounterData.TextExportFormatter("enchps", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-exthps"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-exthps"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "enchps", Extra)));
            EncounterData.ExportVariables.Add("ENCHPS", new EncounterData.TextExportFormatter("ENCHPS", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-EXTHPS"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-EXTHPS"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "ENCHPS", Extra)));
            EncounterData.ExportVariables.Add("ENCHPS-k", new EncounterData.TextExportFormatter("ENCHPS", "Short ENCHPS K", "ENCHPS divided by 1,000 (with no decimal places)", (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "ENCHPS-k", Extra)));
            EncounterData.ExportVariables.Add("critheals", new EncounterData.TextExportFormatter("critheals", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-critheals"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-critheals"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "critheals", Extra)));
            EncounterData.ExportVariables.Add("critheal%", new EncounterData.TextExportFormatter("critheal%", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-critheal%"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-critheal%"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "critheal%", Extra)));
            EncounterData.ExportVariables.Add("heals", new EncounterData.TextExportFormatter("heals", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-heals"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-heals"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "heals", Extra)));
            EncounterData.ExportVariables.Add("cures", new EncounterData.TextExportFormatter("cures", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-cures"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-cures"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "cures", Extra)));
            EncounterData.ExportVariables.Add("maxheal", new EncounterData.TextExportFormatter("maxheal", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-maxheal"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-maxheal"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "maxheal", Extra)));
            EncounterData.ExportVariables.Add("MAXHEAL", new EncounterData.TextExportFormatter("MAXHEAL", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-MAXHEAL"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-MAXHEAL"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "MAXHEAL", Extra)));
            EncounterData.ExportVariables.Add("maxhealward", new EncounterData.TextExportFormatter("maxhealward", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-maxhealward"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-maxhealward"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "maxhealward", Extra)));
            EncounterData.ExportVariables.Add("MAXHEALWARD", new EncounterData.TextExportFormatter("MAXHEALWARD", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-MAXHEALWARD"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-MAXHEALWARD"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "MAXHEALWARD", Extra)));
            EncounterData.ExportVariables.Add("damagetaken", new EncounterData.TextExportFormatter("damagetaken", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-damagetaken"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-damagetaken"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "damagetaken", Extra)));
            EncounterData.ExportVariables.Add("healstaken", new EncounterData.TextExportFormatter("healstaken", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-healstaken"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-healstaken"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "healstaken", Extra)));
            EncounterData.ExportVariables.Add("powerdrain", new EncounterData.TextExportFormatter("powerdrain", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-powerdrain"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-powerdrain"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "powerdrain", Extra)));
            EncounterData.ExportVariables.Add("powerheal", new EncounterData.TextExportFormatter("powerheal", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-powerheal"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-powerheal"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "powerheal", Extra)));
            EncounterData.ExportVariables.Add("kills", new EncounterData.TextExportFormatter("kills", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-kills"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-kills"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "kills", Extra)));
            EncounterData.ExportVariables.Add("deaths", new EncounterData.TextExportFormatter("deaths", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-deaths"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-deaths"].DisplayedText, (Data, SelectiveAllies, Extra) => this.EncounterFormatSwitch(Data, SelectiveAllies, "deaths", Extra)));
            CombatantData.ColumnDefs.Clear();
            CombatantData.ColumnDefs.Add("EncId", new CombatantData.ColumnDef("EncId", false, "CHAR(8)", "EncId", Data => string.Empty, Data => Data.Parent.EncId, (Left, Right) => 0));
            CombatantData.ColumnDefs.Add("Ally", new CombatantData.ColumnDef("Ally", false, "CHAR(1)", "Ally", Data => Data.Parent.GetAllies().Contains(Data).ToString(), delegate (CombatantData Data) {
                if (!Data.Parent.GetAllies().Contains(Data))
                {
                    return "F";
                }
                return "T";
            }, (Left, Right) => Left.Parent.GetAllies().Contains(Left).CompareTo(Right.Parent.GetAllies().Contains(Right))));
            CombatantData.ColumnDefs.Add("Name", new CombatantData.ColumnDef("Name", true, "VARCHAR(64)", "Name", Data => Data.Name, Data => Data.Name, (Left, Right) => Left.Name.CompareTo(Right.Name)));
            CombatantData.ColumnDefs.Add("StartTime", new CombatantData.ColumnDef("StartTime", true, "TIMESTAMP", "StartTime", delegate (CombatantData Data) {
                if (!(Data.StartTime == DateTime.MaxValue))
                {
                    return Data.StartTime.ToString("T");
                }
                return "--:--:--";
            }, delegate (CombatantData Data) {
                if (!(Data.StartTime == DateTime.MaxValue))
                {
                    return Data.StartTime.ToString("u").TrimEnd(new char[] { 'Z' });
                }
                return "0000-00-00 00:00:00";
            }, (Left, Right) => Left.StartTime.CompareTo(Right.StartTime)));
            CombatantData.ColumnDefs.Add("EndTime", new CombatantData.ColumnDef("EndTime", false, "TIMESTAMP", "EndTime", delegate (CombatantData Data) {
                if (!(Data.EndTime == DateTime.MinValue))
                {
                    return Data.StartTime.ToString("T");
                }
                return "--:--:--";
            }, delegate (CombatantData Data) {
                if (!(Data.EndTime == DateTime.MinValue))
                {
                    return Data.EndTime.ToString("u").TrimEnd(new char[] { 'Z' });
                }
                return "0000-00-00 00:00:00";
            }, (Left, Right) => Left.EndTime.CompareTo(Right.EndTime)));
            CombatantData.ColumnDefs.Add("Duration", new CombatantData.ColumnDef("Duration", true, "INT", "Duration", Data => Data.DurationS, Data => Data.Duration.TotalSeconds.ToString("0"), (Left, Right) => Left.Duration.CompareTo(Right.Duration)));
            CombatantData.ColumnDefs.Add("Damage", new CombatantData.ColumnDef("Damage", true, "BIGINT", "Damage", Data => Data.Damage.ToString(this.GetIntCommas()), Data => Data.Damage.ToString(), (Left, Right) => Left.Damage.CompareTo(Right.Damage)));
            CombatantData.ColumnDefs.Add("Damage%", new CombatantData.ColumnDef("Damage%", true, "VARCHAR(4)", "DamagePerc", Data => Data.DamagePercent, Data => Data.DamagePercent, (Left, Right) => Left.Damage.CompareTo(Right.Damage)));
            CombatantData.ColumnDefs.Add("Kills", new CombatantData.ColumnDef("Kills", false, "INT", "Kills", Data => Data.Kills.ToString(this.GetIntCommas()), Data => Data.Kills.ToString(), (Left, Right) => Left.Kills.CompareTo(Right.Kills)));
            CombatantData.ColumnDefs.Add("Healed", new CombatantData.ColumnDef("Healed", false, "BIGINT", "Healed", Data => Data.Healed.ToString(this.GetIntCommas()), Data => Data.Healed.ToString(), (Left, Right) => Left.Healed.CompareTo(Right.Healed)));
            CombatantData.ColumnDefs.Add("Healed%", new CombatantData.ColumnDef("Healed%", false, "VARCHAR(4)", "HealedPerc", Data => Data.HealedPercent, Data => Data.HealedPercent, (Left, Right) => Left.Healed.CompareTo(Right.Healed)));
            CombatantData.ColumnDefs.Add("CritHeals", new CombatantData.ColumnDef("CritHeals", false, "INT", "CritHeals", Data => Data.CritHeals.ToString(this.GetIntCommas()), Data => Data.CritHeals.ToString(), (Left, Right) => Left.CritHeals.CompareTo(Right.CritHeals)));
            CombatantData.ColumnDefs.Add("Heals", new CombatantData.ColumnDef("Heals", false, "INT", "Heals", Data => Data.Heals.ToString(this.GetIntCommas()), Data => Data.Heals.ToString(), (Left, Right) => Left.Heals.CompareTo(Right.Heals)));
            CombatantData.ColumnDefs.Add("Cures", new CombatantData.ColumnDef("Cures", false, "INT", "CureDispels", Data => Data.CureDispels.ToString(this.GetIntCommas()), Data => Data.CureDispels.ToString(), (Left, Right) => Left.CureDispels.CompareTo(Right.CureDispels)));
            CombatantData.ColumnDefs.Add("PowerDrain", new CombatantData.ColumnDef("PowerDrain", true, "BIGINT", "PowerDrain", Data => Data.PowerDamage.ToString(this.GetIntCommas()), Data => Data.PowerDamage.ToString(), (Left, Right) => Left.PowerDamage.CompareTo(Right.PowerDamage)));
            CombatantData.ColumnDefs.Add("PowerReplenish", new CombatantData.ColumnDef("PowerReplenish", false, "BIGINT", "PowerReplenish", Data => Data.PowerReplenish.ToString(this.GetIntCommas()), Data => Data.PowerReplenish.ToString(), (Left, Right) => Left.PowerReplenish.CompareTo(Right.PowerReplenish)));
            CombatantData.ColumnDefs.Add("DPS", new CombatantData.ColumnDef("DPS", false, "DOUBLE", "DPS", Data => Data.DPS.ToString(this.GetFloatCommas()), Data => Data.DPS.ToString(usCulture), (Left, Right) => Left.DPS.CompareTo(Right.DPS)));
            CombatantData.ColumnDefs.Add("EncDPS", new CombatantData.ColumnDef("EncDPS", true, "DOUBLE", "EncDPS", Data => Data.EncDPS.ToString(this.GetFloatCommas()), Data => Data.EncDPS.ToString(usCulture), (Left, Right) => Left.Damage.CompareTo(Right.Damage)));
            CombatantData.ColumnDefs.Add("EncHPS", new CombatantData.ColumnDef("EncHPS", true, "DOUBLE", "EncHPS", Data => Data.EncHPS.ToString(this.GetFloatCommas()), Data => Data.EncHPS.ToString(usCulture), (Left, Right) => Left.Healed.CompareTo(Right.Healed)));
            CombatantData.ColumnDefs.Add("Hits", new CombatantData.ColumnDef("Hits", false, "INT", "Hits", Data => Data.Hits.ToString(this.GetIntCommas()), Data => Data.Hits.ToString(), (Left, Right) => Left.Hits.CompareTo(Right.Hits)));
            CombatantData.ColumnDefs.Add("CritHits", new CombatantData.ColumnDef("CritHits", false, "INT", "CritHits", Data => Data.CritHits.ToString(this.GetIntCommas()), Data => Data.CritHits.ToString(), (Left, Right) => Left.CritHits.CompareTo(Right.CritHits)));
            CombatantData.ColumnDefs.Add("Avoids", new CombatantData.ColumnDef("Avoids", false, "INT", "Blocked", Data => Data.Blocked.ToString(this.GetIntCommas()), Data => Data.Blocked.ToString(), (Left, Right) => Left.Blocked.CompareTo(Right.Blocked)));
            CombatantData.ColumnDefs.Add("Misses", new CombatantData.ColumnDef("Misses", false, "INT", "Misses", Data => Data.Misses.ToString(this.GetIntCommas()), Data => Data.Misses.ToString(), (Left, Right) => Left.Misses.CompareTo(Right.Misses)));
            CombatantData.ColumnDefs.Add("Swings", new CombatantData.ColumnDef("Swings", false, "INT", "Swings", Data => Data.Swings.ToString(this.GetIntCommas()), Data => Data.Swings.ToString(), (Left, Right) => Left.Swings.CompareTo(Right.Swings)));
            CombatantData.ColumnDefs.Add("HealingTaken", new CombatantData.ColumnDef("HealingTaken", false, "BIGINT", "HealsTaken", Data => Data.HealsTaken.ToString(this.GetIntCommas()), Data => Data.HealsTaken.ToString(), (Left, Right) => Left.HealsTaken.CompareTo(Right.HealsTaken)));
            CombatantData.ColumnDefs.Add("DamageTaken", new CombatantData.ColumnDef("DamageTaken", true, "BIGINT", "DamageTaken", Data => Data.DamageTaken.ToString(this.GetIntCommas()), Data => Data.DamageTaken.ToString(), (Left, Right) => Left.DamageTaken.CompareTo(Right.DamageTaken)));
            CombatantData.ColumnDefs.Add("Deaths", new CombatantData.ColumnDef("Deaths", true, "INT", "Deaths", Data => Data.Deaths.ToString(this.GetIntCommas()), Data => Data.Deaths.ToString(), (Left, Right) => Left.Deaths.CompareTo(Right.Deaths)));
            CombatantData.ColumnDefs.Add("ToHit%", new CombatantData.ColumnDef("ToHit%", false, "FLOAT", "ToHit", Data => Data.ToHit.ToString(this.GetFloatCommas()), Data => Data.ToHit.ToString(usCulture), (Left, Right) => Left.ToHit.CompareTo(Right.ToHit)));
            CombatantData.ColumnDefs.Add("CritDam%", new CombatantData.ColumnDef("CritDam%", false, "VARCHAR(8)", "CritDamPerc", Data => Data.CritDamPerc.ToString("0'%"), Data => Data.CritDamPerc.ToString("0'%"), (Left, Right) => Left.CritDamPerc.CompareTo(Right.CritDamPerc)));
            CombatantData.ColumnDefs.Add("CritHeal%", new CombatantData.ColumnDef("CritHeal%", false, "VARCHAR(8)", "CritHealPerc", Data => Data.CritHealPerc.ToString("0'%"), Data => Data.CritHealPerc.ToString("0'%"), (Left, Right) => Left.CritHealPerc.CompareTo(Right.CritHealPerc)));
            CombatantData.ColumnDefs.Add("Threat +/-", new CombatantData.ColumnDef("Threat +/-", false, "VARCHAR(32)", "ThreatStr", Data => Data.GetThreatStr("Threat (Out)"), Data => Data.GetThreatStr("Threat (Out)"), (Left, Right) => Left.GetThreatDelta("Threat (Out)").CompareTo(Right.GetThreatDelta("Threat (Out)"))));
            CombatantData.ColumnDefs.Add("ThreatDelta", new CombatantData.ColumnDef("ThreatDelta", false, "INT", "ThreatDelta", Data => Data.GetThreatDelta("Threat (Out)").ToString(this.GetIntCommas()), Data => Data.GetThreatDelta("Threat (Out)").ToString(), (Left, Right) => Left.GetThreatDelta("Threat (Out)").CompareTo(Right.GetThreatDelta("Threat (Out)"))));
            CombatantData.ColumnDefs["Damage"].GetCellForeColor = Data => System.Drawing.Color.DarkRed;
            CombatantData.ColumnDefs["Damage%"].GetCellForeColor = Data => System.Drawing.Color.DarkRed;
            CombatantData.ColumnDefs["Healed"].GetCellForeColor = Data => System.Drawing.Color.DarkBlue;
            CombatantData.ColumnDefs["Healed%"].GetCellForeColor = Data => System.Drawing.Color.DarkBlue;
            CombatantData.ColumnDefs["PowerDrain"].GetCellForeColor = Data => System.Drawing.Color.DarkMagenta;
            CombatantData.ColumnDefs["DPS"].GetCellForeColor = Data => System.Drawing.Color.DarkRed;
            CombatantData.ColumnDefs["EncDPS"].GetCellForeColor = Data => System.Drawing.Color.DarkRed;
            CombatantData.ColumnDefs["EncHPS"].GetCellForeColor = Data => System.Drawing.Color.DarkBlue;
            CombatantData.ColumnDefs["DamageTaken"].GetCellForeColor = Data => System.Drawing.Color.DarkOrange;
            Dictionary<string, CombatantData.DamageTypeDef> dictionary = new Dictionary<string, CombatantData.DamageTypeDef>();
            dictionary.Add("Auto-Attack (Out)", new CombatantData.DamageTypeDef("Auto-Attack (Out)", -1, System.Drawing.Color.DarkGoldenrod));
            dictionary.Add("Skill/Ability (Out)", new CombatantData.DamageTypeDef("Skill/Ability (Out)", -1, System.Drawing.Color.DarkOrange));
            dictionary.Add("Outgoing Damage", new CombatantData.DamageTypeDef("Outgoing Damage", 0, System.Drawing.Color.Orange));
            dictionary.Add("Healed (Out)", new CombatantData.DamageTypeDef("Healed (Out)", 1, System.Drawing.Color.Blue));
            dictionary.Add("Power Drain (Out)", new CombatantData.DamageTypeDef("Power Drain (Out)", -1, System.Drawing.Color.Purple));
            dictionary.Add("Power Replenish (Out)", new CombatantData.DamageTypeDef("Power Replenish (Out)", 1, System.Drawing.Color.Violet));
            dictionary.Add("Cure/Dispel (Out)", new CombatantData.DamageTypeDef("Cure/Dispel (Out)", 0, System.Drawing.Color.Wheat));
            dictionary.Add("Threat (Out)", new CombatantData.DamageTypeDef("Threat (Out)", -1, System.Drawing.Color.Yellow));
            dictionary.Add("All Outgoing (Ref)", new CombatantData.DamageTypeDef("All Outgoing (Ref)", 0, System.Drawing.Color.Black));
            CombatantData.OutgoingDamageTypeDataObjects = dictionary;
            Dictionary<string, CombatantData.DamageTypeDef> dictionary2 = new Dictionary<string, CombatantData.DamageTypeDef>();
            dictionary2.Add("Incoming Damage", new CombatantData.DamageTypeDef("Incoming Damage", -1, System.Drawing.Color.Red));
            dictionary2.Add("Healed (Inc)", new CombatantData.DamageTypeDef("Healed (Inc)", 1, System.Drawing.Color.LimeGreen));
            dictionary2.Add("Power Drain (Inc)", new CombatantData.DamageTypeDef("Power Drain (Inc)", -1, System.Drawing.Color.Magenta));
            dictionary2.Add("Power Replenish (Inc)", new CombatantData.DamageTypeDef("Power Replenish (Inc)", 1, System.Drawing.Color.MediumPurple));
            dictionary2.Add("Cure/Dispel (Inc)", new CombatantData.DamageTypeDef("Cure/Dispel (Inc)", 0, System.Drawing.Color.Wheat));
            dictionary2.Add("Threat (Inc)", new CombatantData.DamageTypeDef("Threat (Inc)", -1, System.Drawing.Color.Yellow));
            dictionary2.Add("All Incoming (Ref)", new CombatantData.DamageTypeDef("All Incoming (Ref)", 0, System.Drawing.Color.Black));
            CombatantData.IncomingDamageTypeDataObjects = dictionary2;
            SortedDictionary<int, List<string>> dictionary3 = new SortedDictionary<int, List<string>>();
            dictionary3.Add(1, new List<string> { "Auto-Attack (Out)", "Outgoing Damage" });
            dictionary3.Add(2, new List<string> { "Skill/Ability (Out)", "Outgoing Damage" });
            dictionary3.Add(3, new List<string> { "Healed (Out)" });
            dictionary3.Add(10, new List<string> { "Power Drain (Out)" });
            dictionary3.Add(13, new List<string> { "Power Replenish (Out)" });
            dictionary3.Add(20, new List<string> { "Cure/Dispel (Out)" });
            dictionary3.Add(0x10, new List<string> { "Threat (Out)" });
            CombatantData.SwingTypeToDamageTypeDataLinksOutgoing = dictionary3;
            SortedDictionary<int, List<string>> dictionary4 = new SortedDictionary<int, List<string>>();
            dictionary4.Add(1, new List<string> { "Incoming Damage" });
            dictionary4.Add(2, new List<string> { "Incoming Damage" });
            dictionary4.Add(3, new List<string> { "Healed (Inc)" });
            dictionary4.Add(10, new List<string> { "Power Drain (Inc)" });
            dictionary4.Add(13, new List<string> { "Power Replenish (Inc)" });
            dictionary4.Add(20, new List<string> { "Cure/Dispel (Inc)" });
            dictionary4.Add(0x10, new List<string> { "Threat (Inc)" });
            CombatantData.SwingTypeToDamageTypeDataLinksIncoming = dictionary4;
            CombatantData.DamageSwingTypes = new List<int> { 1, 2 };
            CombatantData.HealingSwingTypes = new List<int> { 3 };
            CombatantData.DamageTypeDataNonSkillDamage = "Auto-Attack (Out)";
            CombatantData.DamageTypeDataOutgoingDamage = "Outgoing Damage";
            CombatantData.DamageTypeDataOutgoingHealing = "Healed (Out)";
            CombatantData.DamageTypeDataIncomingDamage = "Incoming Damage";
            CombatantData.DamageTypeDataIncomingHealing = "Healed (Inc)";
            CombatantData.ExportVariables.Clear();
            CombatantData.ExportVariables.Add("n", new CombatantData.TextExportFormatter("n", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-newline"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-newline"].DisplayedText, (Data, Extra) => "\n"));
            CombatantData.ExportVariables.Add("t", new CombatantData.TextExportFormatter("t", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-tab"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-tab"].DisplayedText, (Data, Extra) => "\t"));
            CombatantData.ExportVariables.Add("name", new CombatantData.TextExportFormatter("name", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-name"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-name"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "name", Extra)));
            CombatantData.ExportVariables.Add("NAME", new CombatantData.TextExportFormatter("NAME", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME", Extra)));
            CombatantData.ExportVariables.Add("duration", new CombatantData.TextExportFormatter("duration", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-duration"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-duration"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "duration", Extra)));
            CombatantData.ExportVariables.Add("DURATION", new CombatantData.TextExportFormatter("DURATION", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-DURATION"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-DURATION"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "DURATION", Extra)));
            CombatantData.ExportVariables.Add("damage", new CombatantData.TextExportFormatter("damage", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-damage"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-damage"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "damage", Extra)));
            CombatantData.ExportVariables.Add("damage-m", new CombatantData.TextExportFormatter("damage-m", "Damage M", "Damage divided by 1,000,000 (with two decimal places)", (Data, Extra) => this.CombatantFormatSwitch(Data, "damage-m", Extra)));
            CombatantData.ExportVariables.Add("DAMAGE-k", new CombatantData.TextExportFormatter("DAMAGE-k", "Short Damage K", "Damage divided by 1,000 (with no decimal places)", (Data, Extra) => this.CombatantFormatSwitch(Data, "DAMAGE-k", Extra)));
            CombatantData.ExportVariables.Add("DAMAGE-m", new CombatantData.TextExportFormatter("DAMAGE-m", "Short Damage M", "Damage divided by 1,000,000 (with no decimal places)", (Data, Extra) => this.CombatantFormatSwitch(Data, "DAMAGE-m", Extra)));
            CombatantData.ExportVariables.Add("damage%", new CombatantData.TextExportFormatter("damage%", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-damage%"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-damage%"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "damage%", Extra)));
            CombatantData.ExportVariables.Add("dps", new CombatantData.TextExportFormatter("dps", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-dps"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-dps"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "dps", Extra)));
            CombatantData.ExportVariables.Add("DPS", new CombatantData.TextExportFormatter("DPS", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-DPS"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-DPS"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "DPS", Extra)));
            CombatantData.ExportVariables.Add("DPS-k", new CombatantData.TextExportFormatter("DPS-k", "Short DPS K", "Short DPS divided by 1,000 (with no decimal places)", (Data, Extra) => this.CombatantFormatSwitch(Data, "DPS-k", Extra)));
            CombatantData.ExportVariables.Add("encdps", new CombatantData.TextExportFormatter("encdps", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-extdps"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-extdps"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "encdps", Extra)));
            CombatantData.ExportVariables.Add("ENCDPS", new CombatantData.TextExportFormatter("ENCDPS", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-EXTDPS"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-EXTDPS"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "ENCDPS", Extra)));
            CombatantData.ExportVariables.Add("ENCDPS-k", new CombatantData.TextExportFormatter("ENCDPS-k", "Short Encounter DPS K", "Short Encounter DPS divided by 1,000 (with no decimal places)", (Data, Extra) => this.CombatantFormatSwitch(Data, "ENCDPS-k", Extra)));
            CombatantData.ExportVariables.Add("hits", new CombatantData.TextExportFormatter("hits", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-hits"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-hits"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "hits", Extra)));
            CombatantData.ExportVariables.Add("crithits", new CombatantData.TextExportFormatter("crithits", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-crithits"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-crithits"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "crithits", Extra)));
            CombatantData.ExportVariables.Add("crithit%", new CombatantData.TextExportFormatter("crithit%", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-crithit%"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-crithit%"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "crithit%", Extra)));
            CombatantData.ExportVariables.Add("misses", new CombatantData.TextExportFormatter("misses", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-misses"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-misses"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "misses", Extra)));
            CombatantData.ExportVariables.Add("hitfailed", new CombatantData.TextExportFormatter("hitfailed", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-hitfailed"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-hitfailed"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "hitfailed", Extra)));
            CombatantData.ExportVariables.Add("swings", new CombatantData.TextExportFormatter("swings", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-swings"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-swings"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "swings", Extra)));
            CombatantData.ExportVariables.Add("tohit", new CombatantData.TextExportFormatter("tohit", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-tohit"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-tohit"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "tohit", Extra)));
            CombatantData.ExportVariables.Add("TOHIT", new CombatantData.TextExportFormatter("TOHIT", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-TOHIT"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-TOHIT"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "TOHIT", Extra)));
            CombatantData.ExportVariables.Add("maxhit", new CombatantData.TextExportFormatter("maxhit", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-maxhit"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-maxhit"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "maxhit", Extra)));
            CombatantData.ExportVariables.Add("MAXHIT", new CombatantData.TextExportFormatter("MAXHIT", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-MAXHIT"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-MAXHIT"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "MAXHIT", Extra)));
            CombatantData.ExportVariables.Add("healed", new CombatantData.TextExportFormatter("healed", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-healed"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-healed"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "healed", Extra)));
            CombatantData.ExportVariables.Add("healed%", new CombatantData.TextExportFormatter("healed%", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-healed%"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-healed%"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "healed%", Extra)));
            CombatantData.ExportVariables.Add("enchps", new CombatantData.TextExportFormatter("enchps", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-exthps"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-exthps"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "enchps", Extra)));
            CombatantData.ExportVariables.Add("ENCHPS", new CombatantData.TextExportFormatter("ENCHPS", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-EXTHPS"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-EXTHPS"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "ENCHPS", Extra)));
            CombatantData.ExportVariables.Add("ENCHPS-k", new CombatantData.TextExportFormatter("ENCHPS-k", "Short Encounter HPS K", "Short Encounter HPS divided by 1,000 (with no decimal places)", (Data, Extra) => this.CombatantFormatSwitch(Data, "ENCHPS-k", Extra)));
            CombatantData.ExportVariables.Add("critheals", new CombatantData.TextExportFormatter("critheals", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-critheals"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-critheals"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "critheals", Extra)));
            CombatantData.ExportVariables.Add("critheal%", new CombatantData.TextExportFormatter("critheal%", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-critheal%"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-critheal%"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "critheal%", Extra)));
            CombatantData.ExportVariables.Add("heals", new CombatantData.TextExportFormatter("heals", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-heals"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-heals"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "heals", Extra)));
            CombatantData.ExportVariables.Add("cures", new CombatantData.TextExportFormatter("cures", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-cures"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-cures"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "cures", Extra)));
            CombatantData.ExportVariables.Add("maxheal", new CombatantData.TextExportFormatter("maxheal", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-maxheal"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-maxheal"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "maxheal", Extra)));
            CombatantData.ExportVariables.Add("MAXHEAL", new CombatantData.TextExportFormatter("MAXHEAL", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-MAXHEAL"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-MAXHEAL"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "MAXHEAL", Extra)));
            CombatantData.ExportVariables.Add("maxhealward", new CombatantData.TextExportFormatter("maxhealward", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-maxhealward"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-maxhealward"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "maxhealward", Extra)));
            CombatantData.ExportVariables.Add("MAXHEALWARD", new CombatantData.TextExportFormatter("MAXHEALWARD", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-MAXHEALWARD"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-MAXHEALWARD"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "MAXHEALWARD", Extra)));
            CombatantData.ExportVariables.Add("damagetaken", new CombatantData.TextExportFormatter("damagetaken", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-damagetaken"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-damagetaken"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "damagetaken", Extra)));
            CombatantData.ExportVariables.Add("healstaken", new CombatantData.TextExportFormatter("healstaken", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-healstaken"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-healstaken"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "healstaken", Extra)));
            CombatantData.ExportVariables.Add("powerdrain", new CombatantData.TextExportFormatter("powerdrain", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-powerdrain"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-powerdrain"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "powerdrain", Extra)));
            CombatantData.ExportVariables.Add("powerheal", new CombatantData.TextExportFormatter("powerheal", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-powerheal"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-powerheal"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "powerheal", Extra)));
            CombatantData.ExportVariables.Add("kills", new CombatantData.TextExportFormatter("kills", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-kills"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-kills"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "kills", Extra)));
            CombatantData.ExportVariables.Add("deaths", new CombatantData.TextExportFormatter("deaths", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-deaths"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-deaths"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "deaths", Extra)));
            CombatantData.ExportVariables.Add("threatstr", new CombatantData.TextExportFormatter("threatstr", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-threatstr"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-threatstr"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "threatstr", Extra)));
            CombatantData.ExportVariables.Add("threatdelta", new CombatantData.TextExportFormatter("threatdelta", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-threatdelta"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-threatdelta"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "threatdelta", Extra)));
            CombatantData.ExportVariables.Add("NAME3", new CombatantData.TextExportFormatter("NAME3", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME3"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME3"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME3", Extra)));
            CombatantData.ExportVariables.Add("NAME4", new CombatantData.TextExportFormatter("NAME4", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME4"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME4"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME4", Extra)));
            CombatantData.ExportVariables.Add("NAME5", new CombatantData.TextExportFormatter("NAME5", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME5"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME5"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME5", Extra)));
            CombatantData.ExportVariables.Add("NAME6", new CombatantData.TextExportFormatter("NAME6", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME6"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME6"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME6", Extra)));
            CombatantData.ExportVariables.Add("NAME7", new CombatantData.TextExportFormatter("NAME7", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME7"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME7"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME7", Extra)));
            CombatantData.ExportVariables.Add("NAME8", new CombatantData.TextExportFormatter("NAME8", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME8"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME8"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME8", Extra)));
            CombatantData.ExportVariables.Add("NAME9", new CombatantData.TextExportFormatter("NAME9", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME9"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME9"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME9", Extra)));
            CombatantData.ExportVariables.Add("NAME10", new CombatantData.TextExportFormatter("NAME10", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME10"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME10"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME10", Extra)));
            CombatantData.ExportVariables.Add("NAME11", new CombatantData.TextExportFormatter("NAME11", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME11"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME11"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME11", Extra)));
            CombatantData.ExportVariables.Add("NAME12", new CombatantData.TextExportFormatter("NAME12", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME12"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME12"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME12", Extra)));
            CombatantData.ExportVariables.Add("NAME13", new CombatantData.TextExportFormatter("NAME13", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME13"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME13"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME13", Extra)));
            CombatantData.ExportVariables.Add("NAME14", new CombatantData.TextExportFormatter("NAME14", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME14"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME14"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME14", Extra)));
            CombatantData.ExportVariables.Add("NAME15", new CombatantData.TextExportFormatter("NAME15", ActGlobals.ActLocalization.LocalizationStrings["exportFormattingLabel-NAME15"].DisplayedText, ActGlobals.ActLocalization.LocalizationStrings["exportFormattingDesc-NAME15"].DisplayedText, (Data, Extra) => this.CombatantFormatSwitch(Data, "NAME15", Extra)));
            DamageTypeData.ColumnDefs.Clear();
            DamageTypeData.ColumnDefs.Add("EncId", new DamageTypeData.ColumnDef("EncId", false, "CHAR(8)", "EncId", Data => string.Empty, Data => Data.Parent.Parent.EncId));
            DamageTypeData.ColumnDefs.Add("Combatant", new DamageTypeData.ColumnDef("Combatant", false, "VARCHAR(64)", "Combatant", Data => Data.Parent.Name, Data => Data.Parent.Name));
            DamageTypeData.ColumnDefs.Add("Grouping", new DamageTypeData.ColumnDef("Grouping", false, "VARCHAR(92)", "Grouping", Data => string.Empty, new DamageTypeData.StringDataCallback(this.GetDamageTypeGrouping)));
            DamageTypeData.ColumnDefs.Add("Type", new DamageTypeData.ColumnDef("Type", true, "VARCHAR(64)", "Type", Data => Data.Type, Data => Data.Type));
            DamageTypeData.ColumnDefs.Add("StartTime", new DamageTypeData.ColumnDef("StartTime", false, "TIMESTAMP", "StartTime", delegate (DamageTypeData Data) {
                if (!(Data.StartTime == DateTime.MaxValue))
                {
                    return Data.StartTime.ToString("T");
                }
                return "--:--:--";
            }, delegate (DamageTypeData Data) {
                if (!(Data.StartTime == DateTime.MaxValue))
                {
                    return Data.StartTime.ToString("u").TrimEnd(new char[] { 'Z' });
                }
                return "0000-00-00 00:00:00";
            }));
            DamageTypeData.ColumnDefs.Add("EndTime", new DamageTypeData.ColumnDef("EndTime", false, "TIMESTAMP", "EndTime", delegate (DamageTypeData Data) {
                if (!(Data.EndTime == DateTime.MinValue))
                {
                    return Data.StartTime.ToString("T");
                }
                return "--:--:--";
            }, delegate (DamageTypeData Data) {
                if (!(Data.EndTime == DateTime.MinValue))
                {
                    return Data.StartTime.ToString("u").TrimEnd(new char[] { 'Z' });
                }
                return "0000-00-00 00:00:00";
            }));
            DamageTypeData.ColumnDefs.Add("Duration", new DamageTypeData.ColumnDef("Duration", false, "INT", "Duration", Data => Data.DurationS, Data => Data.Duration.TotalSeconds.ToString("0")));
            DamageTypeData.ColumnDefs.Add("Damage", new DamageTypeData.ColumnDef("Damage", true, "BIGINT", "Damage", Data => Data.Damage.ToString(this.GetIntCommas()), Data => Data.Damage.ToString()));
            DamageTypeData.ColumnDefs.Add("EncDPS", new DamageTypeData.ColumnDef("EncDPS", true, "DOUBLE", "EncDPS", Data => Data.EncDPS.ToString(this.GetFloatCommas()), Data => Data.EncDPS.ToString(usCulture)));
            DamageTypeData.ColumnDefs.Add("CharDPS", new DamageTypeData.ColumnDef("CharDPS", false, "DOUBLE", "CharDPS", Data => Data.CharDPS.ToString(this.GetFloatCommas()), Data => Data.CharDPS.ToString(usCulture)));
            DamageTypeData.ColumnDefs.Add("DPS", new DamageTypeData.ColumnDef("DPS", false, "DOUBLE", "DPS", Data => Data.DPS.ToString(this.GetFloatCommas()), Data => Data.DPS.ToString(usCulture)));
            DamageTypeData.ColumnDefs.Add("Average", new DamageTypeData.ColumnDef("Average", true, "FLOAT", "Average", Data => Data.Average.ToString(this.GetFloatCommas()), Data => Data.Average.ToString(usCulture)));
            DamageTypeData.ColumnDefs.Add("Median", new DamageTypeData.ColumnDef("Median", false, "INT", "Median", Data => Data.Median.ToString(this.GetIntCommas()), Data => Data.Median.ToString()));
            DamageTypeData.ColumnDefs.Add("MinHit", new DamageTypeData.ColumnDef("MinHit", true, "INT", "MinHit", Data => Data.MinHit.ToString(this.GetIntCommas()), Data => Data.MinHit.ToString()));
            DamageTypeData.ColumnDefs.Add("MaxHit", new DamageTypeData.ColumnDef("MaxHit", true, "INT", "MaxHit", Data => Data.MaxHit.ToString(this.GetIntCommas()), Data => Data.MaxHit.ToString()));
            DamageTypeData.ColumnDefs.Add("Hits", new DamageTypeData.ColumnDef("Hits", true, "INT", "Hits", Data => Data.Hits.ToString(this.GetIntCommas()), Data => Data.Hits.ToString()));
            DamageTypeData.ColumnDefs.Add("CritHits", new DamageTypeData.ColumnDef("CritHits", false, "INT", "CritHits", Data => Data.CritHits.ToString(this.GetIntCommas()), Data => Data.CritHits.ToString()));
            DamageTypeData.ColumnDefs.Add("Avoids", new DamageTypeData.ColumnDef("Avoids", false, "INT", "Blocked", Data => Data.Blocked.ToString(this.GetIntCommas()), Data => Data.Blocked.ToString()));
            DamageTypeData.ColumnDefs.Add("Misses", new DamageTypeData.ColumnDef("Misses", false, "INT", "Misses", Data => Data.Misses.ToString(this.GetIntCommas()), Data => Data.Misses.ToString()));
            DamageTypeData.ColumnDefs.Add("Swings", new DamageTypeData.ColumnDef("Swings", true, "INT", "Swings", Data => Data.Swings.ToString(this.GetIntCommas()), Data => Data.Swings.ToString()));
            DamageTypeData.ColumnDefs.Add("ToHit", new DamageTypeData.ColumnDef("ToHit", false, "FLOAT", "ToHit", Data => Data.ToHit.ToString(this.GetFloatCommas()), Data => Data.ToHit.ToString()));
            DamageTypeData.ColumnDefs.Add("AvgDelay", new DamageTypeData.ColumnDef("AvgDelay", false, "FLOAT", "AverageDelay", Data => Data.AverageDelay.ToString(this.GetFloatCommas()), Data => Data.AverageDelay.ToString()));
            DamageTypeData.ColumnDefs.Add("Crit%", new DamageTypeData.ColumnDef("Crit%", true, "VARCHAR(8)", "CritPerc", Data => Data.CritPerc.ToString("0'%"), Data => Data.CritPerc.ToString("0'%")));
            AttackType.ColumnDefs.Clear();
            AttackType.ColumnDefs.Add("EncId", new AttackType.ColumnDef("EncId", false, "CHAR(8)", "EncId", Data => string.Empty, Data => Data.Parent.Parent.Parent.EncId, (Left, Right) => 0));
            AttackType.ColumnDefs.Add("Attacker", new AttackType.ColumnDef("Attacker", false, "VARCHAR(64)", "Attacker", delegate (AttackType Data) {
                if (!Data.Parent.Outgoing)
                {
                    return string.Empty;
                }
                return Data.Parent.Parent.Name;
            }, delegate (AttackType Data) {
                if (!Data.Parent.Outgoing)
                {
                    return string.Empty;
                }
                return Data.Parent.Parent.Name;
            }, (Left, Right) => 0));
            AttackType.ColumnDefs.Add("Victim", new AttackType.ColumnDef("Victim", false, "VARCHAR(64)", "Victim", delegate (AttackType Data) {
                if (!Data.Parent.Outgoing)
                {
                    return Data.Parent.Parent.Name;
                }
                return string.Empty;
            }, delegate (AttackType Data) {
                if (!Data.Parent.Outgoing)
                {
                    return Data.Parent.Parent.Name;
                }
                return string.Empty;
            }, (Left, Right) => 0));
            AttackType.ColumnDefs.Add("SwingType", new AttackType.ColumnDef("SwingType", false, "TINYINT", "SwingType", new AttackType.StringDataCallback(this.GetAttackTypeSwingType), new AttackType.StringDataCallback(this.GetAttackTypeSwingType), (Left, Right) => 0));
            AttackType.ColumnDefs.Add("Type", new AttackType.ColumnDef("Type", true, "VARCHAR(64)", "Type", Data => Data.Type, Data => Data.Type, (Left, Right) => Left.Type.CompareTo(Right.Type)));
            AttackType.ColumnDefs.Add("StartTime", new AttackType.ColumnDef("StartTime", false, "TIMESTAMP", "StartTime", delegate (AttackType Data) {
                if (!(Data.StartTime == DateTime.MaxValue))
                {
                    return Data.StartTime.ToString("T");
                }
                return "--:--:--";
            }, delegate (AttackType Data) {
                if (!(Data.StartTime == DateTime.MaxValue))
                {
                    return Data.StartTime.ToString("u").TrimEnd(new char[] { 'Z' });
                }
                return "0000-00-00 00:00:00";
            }, (Left, Right) => Left.StartTime.CompareTo(Right.StartTime)));
            AttackType.ColumnDefs.Add("EndTime", new AttackType.ColumnDef("EndTime", false, "TIMESTAMP", "EndTime", delegate (AttackType Data) {
                if (!(Data.EndTime == DateTime.MinValue))
                {
                    return Data.EndTime.ToString("T");
                }
                return "--:--:--";
            }, delegate (AttackType Data) {
                if (!(Data.EndTime == DateTime.MinValue))
                {
                    return Data.EndTime.ToString("u").TrimEnd(new char[] { 'Z' });
                }
                return "0000-00-00 00:00:00";
            }, (Left, Right) => Left.EndTime.CompareTo(Right.EndTime)));
            AttackType.ColumnDefs.Add("Duration", new AttackType.ColumnDef("Duration", false, "INT", "Duration", Data => Data.DurationS, Data => Data.Duration.TotalSeconds.ToString("0"), (Left, Right) => Left.Duration.CompareTo(Right.Duration)));
            AttackType.ColumnDefs.Add("Damage", new AttackType.ColumnDef("Damage", true, "BIGINT", "Damage", Data => Data.Damage.ToString(this.GetIntCommas()), Data => Data.Damage.ToString(), (Left, Right) => Left.Damage.CompareTo(Right.Damage)));
            AttackType.ColumnDefs.Add("EncDPS", new AttackType.ColumnDef("EncDPS", true, "DOUBLE", "EncDPS", Data => Data.EncDPS.ToString(this.GetFloatCommas()), Data => Data.EncDPS.ToString(usCulture), (Left, Right) => Left.EncDPS.CompareTo(Right.EncDPS)));
            AttackType.ColumnDefs.Add("CharDPS", new AttackType.ColumnDef("CharDPS", false, "DOUBLE", "CharDPS", Data => Data.CharDPS.ToString(this.GetFloatCommas()), Data => Data.CharDPS.ToString(usCulture), (Left, Right) => Left.CharDPS.CompareTo(Right.CharDPS)));
            AttackType.ColumnDefs.Add("DPS", new AttackType.ColumnDef("DPS", false, "DOUBLE", "DPS", Data => Data.DPS.ToString(this.GetFloatCommas()), Data => Data.DPS.ToString(usCulture), (Left, Right) => Left.DPS.CompareTo(Right.DPS)));
            AttackType.ColumnDefs.Add("Average", new AttackType.ColumnDef("Average", true, "FLOAT", "Average", Data => Data.Average.ToString(this.GetFloatCommas()), Data => Data.Average.ToString(usCulture), (Left, Right) => Left.Average.CompareTo(Right.Average)));
            AttackType.ColumnDefs.Add("Median", new AttackType.ColumnDef("Median", true, "INT", "Median", Data => Data.Median.ToString(this.GetIntCommas()), Data => Data.Median.ToString(), (Left, Right) => Left.Median.CompareTo(Right.Median)));
            AttackType.ColumnDefs.Add("MinHit", new AttackType.ColumnDef("MinHit", true, "INT", "MinHit", Data => Data.MinHit.ToString(this.GetIntCommas()), Data => Data.MinHit.ToString(), (Left, Right) => Left.MinHit.CompareTo(Right.MinHit)));
            AttackType.ColumnDefs.Add("MaxHit", new AttackType.ColumnDef("MaxHit", true, "INT", "MaxHit", Data => Data.MaxHit.ToString(this.GetIntCommas()), Data => Data.MaxHit.ToString(), (Left, Right) => Left.MaxHit.CompareTo(Right.MaxHit)));
            AttackType.ColumnDefs.Add("Resist", new AttackType.ColumnDef("Resist", true, "VARCHAR(64)", "Resist", Data => Data.Resist, Data => Data.Resist, (Left, Right) => Left.Resist.CompareTo(Right.Resist)));
            AttackType.ColumnDefs.Add("Hits", new AttackType.ColumnDef("Hits", true, "INT", "Hits", Data => Data.Hits.ToString(this.GetIntCommas()), Data => Data.Hits.ToString(), (Left, Right) => Left.Hits.CompareTo(Right.Hits)));
            AttackType.ColumnDefs.Add("CritHits", new AttackType.ColumnDef("CritHits", false, "INT", "CritHits", Data => Data.CritHits.ToString(this.GetIntCommas()), Data => Data.CritHits.ToString(), (Left, Right) => Left.CritHits.CompareTo(Right.CritHits)));
            AttackType.ColumnDefs.Add("Avoids", new AttackType.ColumnDef("Avoids", false, "INT", "Blocked", Data => Data.Blocked.ToString(this.GetIntCommas()), Data => Data.Blocked.ToString(), (Left, Right) => Left.Blocked.CompareTo(Right.Blocked)));
            AttackType.ColumnDefs.Add("Misses", new AttackType.ColumnDef("Misses", false, "INT", "Misses", Data => Data.Misses.ToString(this.GetIntCommas()), Data => Data.Misses.ToString(), (Left, Right) => Left.Misses.CompareTo(Right.Misses)));
            AttackType.ColumnDefs.Add("Swings", new AttackType.ColumnDef("Swings", true, "INT", "Swings", Data => Data.Swings.ToString(this.GetIntCommas()), Data => Data.Swings.ToString(), (Left, Right) => Left.Swings.CompareTo(Right.Swings)));
            AttackType.ColumnDefs.Add("ToHit", new AttackType.ColumnDef("ToHit", true, "FLOAT", "ToHit", Data => Data.ToHit.ToString(this.GetFloatCommas()), Data => Data.ToHit.ToString(usCulture), (Left, Right) => Left.ToHit.CompareTo(Right.ToHit)));
            AttackType.ColumnDefs.Add("AvgDelay", new AttackType.ColumnDef("AvgDelay", false, "FLOAT", "AverageDelay", Data => Data.AverageDelay.ToString(this.GetFloatCommas()), Data => Data.AverageDelay.ToString(usCulture), (Left, Right) => Left.AverageDelay.CompareTo(Right.AverageDelay)));
            AttackType.ColumnDefs.Add("Crit%", new AttackType.ColumnDef("Crit%", true, "VARCHAR(8)", "CritPerc", Data => Data.CritPerc.ToString("0'%"), Data => Data.CritPerc.ToString("0'%"), (Left, Right) => Left.CritPerc.CompareTo(Right.CritPerc)));
            MasterSwing.ColumnDefs.Clear();
            MasterSwing.ColumnDefs.Add("EncId", new MasterSwing.ColumnDef("EncId", false, "CHAR(8)", "EncId", Data => string.Empty, Data => Data.ParentEncounter.EncId, (Left, Right) => 0));
            MasterSwing.ColumnDefs.Add("Time", new MasterSwing.ColumnDef("Time", true, "TIMESTAMP", "STime", Data => Data.Time.ToString("T"), Data => Data.Time.ToString("u").TrimEnd(new char[] { 'Z' }), (Left, Right) => Left.Time.CompareTo(Right.Time)));
            MasterSwing.ColumnDefs.Add("Attacker", new MasterSwing.ColumnDef("Attacker", true, "VARCHAR(64)", "Attacker", Data => Data.Attacker, Data => Data.Attacker, (Left, Right) => Left.Attacker.CompareTo(Right.Attacker)));
            MasterSwing.ColumnDefs.Add("SwingType", new MasterSwing.ColumnDef("SwingType", false, "TINYINT", "SwingType", Data => Data.SwingType.ToString(), Data => Data.SwingType.ToString(), (Left, Right) => Left.SwingType.CompareTo(Right.SwingType)));
            MasterSwing.ColumnDefs.Add("AttackType", new MasterSwing.ColumnDef("AttackType", true, "VARCHAR(64)", "AttackType", Data => Data.AttackType, Data => Data.AttackType, (Left, Right) => Left.AttackType.CompareTo(Right.AttackType)));
            MasterSwing.ColumnDefs.Add("DamageType", new MasterSwing.ColumnDef("DamageType", true, "VARCHAR(64)", "DamageType", Data => Data.DamageType, Data => Data.DamageType, (Left, Right) => Left.DamageType.CompareTo(Right.DamageType)));
            MasterSwing.ColumnDefs.Add("Victim", new MasterSwing.ColumnDef("Victim", true, "VARCHAR(64)", "Victim", Data => Data.Victim, Data => Data.Victim, (Left, Right) => Left.Victim.CompareTo(Right.Victim)));
            MasterSwing.ColumnDefs.Add("DamageNum", new MasterSwing.ColumnDef("DamageNum", false, "INT", "Damage", Data => ((int) Data.Damage).ToString(), Data => ((int) Data.Damage).ToString(), (Left, Right) => Left.Damage.CompareTo(Right.Damage)));
            MasterSwing.ColumnDefs.Add("Damage", new MasterSwing.ColumnDef("Damage", true, "VARCHAR(128)", "DamageString", Data => Data.Damage.ToString(), Data => Data.Damage.ToString(), (Left, Right) => Left.Damage.CompareTo(Right.Damage)));
            MasterSwing.ColumnDefs.Add("Critical", new MasterSwing.ColumnDef("Critical", true, "CHAR(1)", "Critical", Data => Data.Critical.ToString(), Data => Data.Critical.ToString(usCulture)[0].ToString(), (Left, Right) => Left.Critical.CompareTo(Right.Critical)));
            MasterSwing.ColumnDefs.Add("Special", new MasterSwing.ColumnDef("Special", true, "VARCHAR(64)", "Special", new MasterSwing.StringDataCallback(this.GetCellDataSpecial), new MasterSwing.StringDataCallback(this.GetSqlDataSpecial), new Comparison<MasterSwing>(this.MasterSwingCompareSpecial)));
            ActGlobals.oFormActMain.ValidateLists();
            ActGlobals.oFormActMain.ValidateTableSetup();
        }

        internal string ShareCustomTriggerToXml(CustomTrigger triggerData)
        {
            return string.Format("<Trigger R=\"{0}\" SD=\"{1}\" ST=\"{2}\" CR=\"{3}\" C=\"{4}\" T=\"{5}\" TN=\"{6}\" Ta=\"{7}\" />", new object[] { HttpUtility.HtmlEncode(triggerData.ShortRegexString).Replace("&#39;", "'").Replace("#", "&#35;"), HttpUtility.HtmlEncode(triggerData.SoundData), triggerData.SoundType.ToString(), triggerData.RestrictToCategoryZone ? "T" : "F", HttpUtility.HtmlEncode(triggerData.Category), triggerData.Timer ? "T" : "F", HttpUtility.HtmlEncode(triggerData.TimerName), triggerData.Tabbed ? "T" : "F" });
        }

        internal string ShareSpellToXml(TimerData spellData, bool IncludeSoundData)
        {
            if (IncludeSoundData)
            {
                return string.Format("<Spell N=\"{0}\" T=\"{1}\" OM=\"{14}\" R=\"{2}\" A=\"{3}\" WV=\"{4}\" RD=\"{5}\" M=\"{6}\" Tt=\"{7}\" FC=\"{8}\" RV=\"{9}\" C=\"{10}\" RC=\"{11}\" SS=\"{12}\" WS=\"{13}\" />", new object[] { HttpUtility.HtmlEncode(spellData.Name).Replace("&#39;", "'"), spellData.TimerValue, spellData.RestrictToMe ? "T" : "F", spellData.AbsoluteTiming ? "T" : "F", spellData.WarningValue, spellData.RadialDisplay ? "T" : "F", spellData.Modable ? "T" : "F", HttpUtility.HtmlEncode(spellData.Tooltip), spellData.FillColor.ToArgb(), spellData.RemoveValue, HttpUtility.HtmlEncode(spellData.Category), spellData.RestrictToCategory ? "T" : "F", spellData.StartSoundData, spellData.WarningSoundData, spellData.OnlyMasterTicks ? "T" : "F" });
            }
            return string.Format("<Spell N=\"{0}\" T=\"{1}\" OM=\"{12}\" R=\"{2}\" A=\"{3}\" WV=\"{4}\" RD=\"{5}\" M=\"{6}\" Tt=\"{7}\" FC=\"{8}\" RV=\"{9}\" C=\"{10}\" RC=\"{11}\" />", new object[] { HttpUtility.HtmlEncode(spellData.Name).Replace("&#39;", "'"), spellData.TimerValue, spellData.RestrictToMe ? "T" : "F", spellData.AbsoluteTiming ? "T" : "F", spellData.WarningValue, spellData.RadialDisplay ? "T" : "F", spellData.Modable ? "T" : "F", HttpUtility.HtmlEncode(spellData.Tooltip), spellData.FillColor.ToArgb(), spellData.RemoveValue, HttpUtility.HtmlEncode(spellData.Category), spellData.RestrictToCategory ? "T" : "F", spellData.OnlyMasterTicks ? "T" : "F" });
        }

        internal CustomTrigger ShareXmlToCustomTrigger(string xmlFragment)
        {
            XmlDocument document = new XmlDocument();
            document.LoadXml(xmlFragment);
            string cRegex = document.FirstChild.Attributes["R"].Value;
            string cCategory = document.FirstChild.Attributes["C"].Value;
            CustomTrigger trigger = new CustomTrigger(cRegex, cCategory);
            if (this.customTriggers.ContainsKey(trigger.Key))
            {
                trigger = this.customTriggers[trigger.Key];
            }
            try
            {
                trigger.SoundData = document.FirstChild.Attributes["SD"].Value;
            }
            catch
            {
            }
            try
            {
                trigger.SoundType = int.Parse(document.FirstChild.Attributes["ST"].Value);
            }
            catch
            {
            }
            try
            {
                trigger.RestrictToCategoryZone = document.FirstChild.Attributes["CR"].Value == "T";
            }
            catch
            {
            }
            try
            {
                trigger.Timer = document.FirstChild.Attributes["T"].Value == "T";
            }
            catch
            {
            }
            try
            {
                trigger.TimerName = document.FirstChild.Attributes["TN"].Value;
            }
            catch
            {
            }
            try
            {
                trigger.Tabbed = document.FirstChild.Attributes["Ta"].Value == "T";
            }
            catch
            {
            }
            return trigger;
        }

        internal TimerData ShareXmlToSpell(string xmlFragment)
        {
            XmlDocument document = new XmlDocument();
            document.LoadXml(xmlFragment);
            string name = document.FirstChild.Attributes["N"].Value;
            string category = document.FirstChild.Attributes["C"].Value;
            TimerData data = new TimerData(name, category);
            if (ActGlobals.oFormSpellTimers.TimerDefs.ContainsKey(data.Key))
            {
                data = ActGlobals.oFormSpellTimers.TimerDefs[data.Key];
            }
            try
            {
                data.TimerValue = int.Parse(document.FirstChild.Attributes["T"].Value);
            }
            catch
            {
            }
            try
            {
                data.RestrictToMe = document.FirstChild.Attributes["R"].Value == "T";
            }
            catch
            {
            }
            try
            {
                data.OnlyMasterTicks = document.FirstChild.Attributes["OM"].Value == "T";
            }
            catch
            {
            }
            try
            {
                data.AbsoluteTiming = document.FirstChild.Attributes["A"].Value == "T";
            }
            catch
            {
            }
            try
            {
                data.WarningValue = int.Parse(document.FirstChild.Attributes["WV"].Value);
            }
            catch
            {
            }
            try
            {
                data.RadialDisplay = document.FirstChild.Attributes["RD"].Value == "T";
            }
            catch
            {
            }
            try
            {
                data.Modable = document.FirstChild.Attributes["M"].Value == "T";
            }
            catch
            {
            }
            try
            {
                data.Tooltip = document.FirstChild.Attributes["Tt"].Value;
            }
            catch
            {
            }
            try
            {
                data.StartSoundData = document.FirstChild.Attributes["SS"].Value;
            }
            catch
            {
            }
            try
            {
                data.WarningSoundData = document.FirstChild.Attributes["WS"].Value;
            }
            catch
            {
            }
            try
            {
                data.FillColor = System.Drawing.Color.FromArgb(int.Parse(document.FirstChild.Attributes["FC"].Value));
            }
            catch
            {
            }
            try
            {
                data.RemoveValue = int.Parse(document.FirstChild.Attributes["RV"].Value);
            }
            catch
            {
            }
            try
            {
                data.RestrictToCategory = document.FirstChild.Attributes["RC"].Value == "T";
            }
            catch
            {
            }
            return data;
        }

        private void sortableLview_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            ListView view = (ListView) sender;
            try
            {
                ListViewItemComparer listViewItemSorter = (ListViewItemComparer) view.ListViewItemSorter;
                if (listViewItemSorter.Column == e.Column)
                {
                    if (listViewItemSorter.Ascending)
                    {
                        view.ListViewItemSorter = new ListViewItemComparer(e.Column, false);
                    }
                    else
                    {
                        view.ListViewItemSorter = new ListViewItemComparer(e.Column, true);
                    }
                }
                else
                {
                    view.ListViewItemSorter = new ListViewItemComparer(e.Column, true);
                }
            }
            catch
            {
                view.ListViewItemSorter = new ListViewItemComparer(e.Column, true);
            }
        }

        private void specialAttacksReportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Parent.Index];
                CombatantData combatant = data.Items[this.tvDG.SelectedNode.Parent.Index].GetCombatant(this.tvDG.SelectedNode.Text);
                ActGlobals.oFormAvoidanceReport.ShowSpecialsReport(combatant);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void SplitLogFile(FileInfo closedFile)
        {
            if (!this.importThreadAlive)
            {
                try
                {
                    FileInfo info = new FileInfo(closedFile.FullName);
                    if ((closedFile.Length > (ActGlobals.oFormActMain.opMisc.nudLogFileSplit.Value * 1048576M)) && (ActGlobals.oFormActMain.opMisc.nudLogFileSplit.Value != 0M))
                    {
                        closedFile.MoveTo(closedFile.DirectoryName + @"\" + string.Format("{0}.{1}.{2:00}.{3:00}{4}", new object[] { Path.GetFileNameWithoutExtension(closedFile.Name), DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, Path.GetExtension(closedFile.Name) }));
                        StreamWriter writer = new StreamWriter(info.Open(FileMode.CreateNew));
                        writer.WriteLine();
                        writer.Close();
                    }
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, "Attempted to split log file");
                }
            }
        }

        private string SqlSafe(string input)
        {
            float naN = float.NaN;
            float negativeInfinity = float.NegativeInfinity;
            float positiveInfinity = float.PositiveInfinity;
            return input.Replace(naN.ToString(), "0").Replace(negativeInfinity.ToString(), "0").Replace(positiveInfinity.ToString(), "0").Replace("'", "''");
        }

        private void StartEncThread(EncounterData EncounterSource)
        {
            try
            {
                this.graphingThread.Abort();
            }
            catch
            {
            }
            this.graphingThread = new Thread(new ParameterizedThreadStart(this.ThreadEncSamples));
            this.graphingThread.IsBackground = true;
            string text = this.opGraphing.ddlGraphPriority.Text;
            if (text != null)
            {
                if (!(text == "Above Normal"))
                {
                    if (text == "Below Normal")
                    {
                        this.graphingThread.Priority = ThreadPriority.BelowNormal;
                        goto Label_00A6;
                    }
                    if (text == "Lowest")
                    {
                        this.graphingThread.Priority = ThreadPriority.Lowest;
                        goto Label_00A6;
                    }
                }
                else
                {
                    this.graphingThread.Priority = ThreadPriority.AboveNormal;
                    goto Label_00A6;
                }
            }
            this.graphingThread.Priority = ThreadPriority.Normal;
        Label_00A6:
            this.graphingThread.Name = "Encounter Graph Thread";
            this.graphingThread.SetApartmentState(ApartmentState.STA);
            this.graphingThread.Start(EncounterSource);
        }

        private void StartHTMLThread()
        {
            try
            {
                this.exportThread.Abort();
            }
            catch
            {
            }
            this.exportThread = new Thread(new ThreadStart(this.ThreadEQ2HTMLExport));
            this.exportThread.IsBackground = true;
            string text = this.opGraphing.ddlGraphPriority.Text;
            if (text != null)
            {
                if (!(text == "Above Normal"))
                {
                    if (text == "Below Normal")
                    {
                        this.exportThread.Priority = ThreadPriority.BelowNormal;
                        goto Label_00A6;
                    }
                    if (text == "Lowest")
                    {
                        this.exportThread.Priority = ThreadPriority.Lowest;
                        goto Label_00A6;
                    }
                }
                else
                {
                    this.exportThread.Priority = ThreadPriority.AboveNormal;
                    goto Label_00A6;
                }
            }
            this.exportThread.Priority = ThreadPriority.Normal;
        Label_00A6:
            this.exportThread.Name = "EQ2 HTML Export Thread";
            this.exportThread.SetApartmentState(ApartmentState.STA);
            this.exportThread.Start();
        }

        private void StartOdbcExportThread()
        {
            if (this.importThreadAlive)
            {
                return;
            }
            this.odbcThread = new Thread(new ThreadStart(this.ThreadOdbcExportSingle));
            this.odbcThread.IsBackground = true;
            string text = this.opGraphing.ddlGraphPriority.Text;
            if (text != null)
            {
                if (!(text == "Above Normal"))
                {
                    if (text == "Below Normal")
                    {
                        this.odbcThread.Priority = ThreadPriority.BelowNormal;
                        goto Label_00A1;
                    }
                    if (text == "Lowest")
                    {
                        this.odbcThread.Priority = ThreadPriority.Lowest;
                        goto Label_00A1;
                    }
                }
                else
                {
                    this.odbcThread.Priority = ThreadPriority.AboveNormal;
                    goto Label_00A1;
                }
            }
            this.odbcThread.Priority = ThreadPriority.Normal;
        Label_00A1:
            this.odbcThread.Name = "ODBC Export Thread";
            this.odbcThread.SetApartmentState(ApartmentState.STA);
            this.odbcThread.Start();
        }

        private void StartSoloThread(CombatantData CombatantSource)
        {
            try
            {
                this.graphingThread.Abort();
            }
            catch
            {
            }
            this.graphingThread = new Thread(new ParameterizedThreadStart(this.ThreadSoloSamples));
            this.graphingThread.IsBackground = true;
            string text = this.opGraphing.ddlGraphPriority.Text;
            if (text != null)
            {
                if (!(text == "Above Normal"))
                {
                    if (text == "Below Normal")
                    {
                        this.graphingThread.Priority = ThreadPriority.BelowNormal;
                        goto Label_00A6;
                    }
                    if (text == "Lowest")
                    {
                        this.graphingThread.Priority = ThreadPriority.Lowest;
                        goto Label_00A6;
                    }
                }
                else
                {
                    this.graphingThread.Priority = ThreadPriority.AboveNormal;
                    goto Label_00A6;
                }
            }
            this.graphingThread.Priority = ThreadPriority.Normal;
        Label_00A6:
            this.graphingThread.Name = "Solo Graph Thread";
            this.graphingThread.SetApartmentState(ApartmentState.STA);
            this.graphingThread.Start(CombatantSource);
        }

        internal string StrCapitalize(string Input)
        {
            if (string.IsNullOrWhiteSpace(Input))
            {
                return Input;
            }
            char[] chArray = Input.ToLower().ToCharArray();
            chArray[0] = char.ToUpper(chArray[0]);
            return new string(chArray);
        }

        internal void SubAddEntry(XmlShareEntry item)
        {
            if (this.subEntries.ContainsKey(item.Url))
            {
                this.subEntries.Remove(item.Url);
            }
            this.subEntries.Add(item.Url, item);
        }

        internal void SubAddQueryInfo(string InfoText)
        {
            this.opXmlSubs.tbSubInfo.Text = this.opXmlSubs.tbSubInfo.Text + InfoText + "\r\n";
        }

        internal void SubAddQueryNodeCounts(string xmlData)
        {
            foreach (KeyValuePair<string, int> pair in this.SubQueryXml(xmlData))
            {
                this.SubAddQueryInfo(pair.Key + ": " + pair.Value.ToString());
            }
        }

        private void SubDoAutoImports()
        {
            this.SubUpdateEntries();
            List<string> entries = new List<string>();
            foreach (KeyValuePair<string, XmlShareEntry> pair in this.subEntries)
            {
                if (pair.Value.RbAuto && pair.Value.New)
                {
                    entries.Add(pair.Key);
                }
            }
            this.SubDoXmlImports(entries, false);
            entries.Clear();
            string str = string.Empty;
            foreach (KeyValuePair<string, XmlShareEntry> pair2 in this.subEntries)
            {
                if (pair2.Value.RbNotify && pair2.Value.New)
                {
                    str = str + string.Format("{0} is -- outdated.\r\n\r\n", pair2.Value.Url);
                    entries.Add(pair2.Key);
                }
            }
            if ((entries.Count > 0) && (MessageBox.Show(str + "\r\nImport these now?", "XML Subscriptions", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes))
            {
                this.SubDoXmlImports(entries, true);
            }
            this.SubUpdateListbox(false);
        }

        internal void SubDoXmlImports(List<string> entries, bool AlertBox)
        {
            int num = 0;
            foreach (string str in entries)
            {
                if (string.IsNullOrEmpty(this.subEntries[str].LastXml))
                {
                    WebClient client = new WebClient();
                    client.Headers.Add(HttpRequestHeader.UserAgent, "ACT-Parser");
                    try
                    {
                        StreamReader reader = new StreamReader(client.OpenRead(this.subEntries[str].Url));
                        if (!string.IsNullOrEmpty(client.ResponseHeaders["Last-Modified"]))
                        {
                            this.subEntries[str].LastModified = DateTime.Parse(client.ResponseHeaders["Last-Modified"]);
                        }
                        else
                        {
                            this.subEntries[str].LastModified = DateTime.Now;
                        }
                        this.subEntries[str].LastXml = reader.ReadToEnd();
                    }
                    catch (Exception exception)
                    {
                        if (AlertBox)
                        {
                            MessageBox.Show(exception.Message, this.subEntries[str].Url, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        }
                        this.WriteExceptionLog(exception, this.subEntries[str].Url);
                    }
                }
                StringReader input = new StringReader(this.subEntries[str].LastXml);
                XmlTextReader xReader = new XmlTextReader(input);
                ActGlobals.oFormActMain.LoadNewSettings(xReader);
                this.subEntries[str].LastUpdated = this.subEntries[str].LastModified;
                this.subEntries[str].LastXml = string.Empty;
                num++;
            }
            if (AlertBox)
            {
                MessageBox.Show(num.ToString() + " external XML file(s) have been imported.", "Updates Complete", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }

        internal void SubQuery(string XmlUrl)
        {
            WebClient client = new WebClient();
            client.Headers.Add(HttpRequestHeader.UserAgent, "ACT-Parser");
            try
            {
                StreamReader reader = new StreamReader(client.OpenRead(XmlUrl));
                this.opXmlSubs.tbSubInfo.Text = string.Empty;
                if (!string.IsNullOrEmpty(client.ResponseHeaders["Last-Modified"]))
                {
                    DateTime time = DateTime.Parse(client.ResponseHeaders["Last-Modified"]);
                    this.SubAddQueryInfo(string.Format("Last updated: {0} {1}", time.ToShortDateString(), time.ToLongTimeString()));
                }
                string xmlData = reader.ReadToEnd();
                this.SubAddQueryNodeCounts(xmlData);
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message, XmlUrl, MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        }

        internal Dictionary<string, int> SubQueryXml(string XmlData)
        {
            Dictionary<string, int> xmlNodeCounts = new Dictionary<string, int>();
            XmlTextReader xReader = new XmlTextReader(XmlData, XmlNodeType.Document, new XmlParserContext(null, null, string.Empty, XmlSpace.Default, Encoding.UTF8));
            try
            {
                while (xReader.Read())
                {
                    if (xReader.NodeType == XmlNodeType.Element)
                    {
                        try
                        {
                            if (xReader.LocalName == "SettingsSerializer")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "SParseList")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "ClipFormats")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "MacroExports")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                                this.SubAddQueryInfo("WARNING: Macro Export definitions are easily mismatched and should not be included in exports.");
                            }
                            if (xReader.LocalName == "MiniFormats")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "CustomTriggers")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "SpellTimers")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "TimerWhiteList")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "ApostropheNameFix")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "RenameFix")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "AbilityRedirectFix")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            if (xReader.LocalName == "ActPlugins")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                                this.SubAddQueryInfo("WARNING: Plugin load settings are specific to the local file system and should not be included in exports.");
                            }
                            if (xReader.LocalName == "XmlSubs")
                            {
                                this.GetSubNodeCounts(xReader, ref xmlNodeCounts);
                            }
                            continue;
                        }
                        catch (Exception exception)
                        {
                            ActGlobals.oFormActMain.WriteExceptionLog(exception, "SubQueryXml");
                            continue;
                        }
                    }
                }
            }
            catch (Exception exception2)
            {
                string text = "The XML settings file may be corrupt or unusable.";
                MessageBox.Show(text, ActGlobals.ActLocalization.LocalizationStrings["messageBoxTitle-xmlPrefError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                ActGlobals.oFormActMain.WriteExceptionLog(exception2, text);
            }
            xReader.Close();
            return xmlNodeCounts;
        }

        internal void SubRemoveEntry(string key)
        {
            this.subEntries.Remove(key);
        }

        internal void SubUpdateEntries()
        {
            foreach (KeyValuePair<string, XmlShareEntry> pair in this.subEntries)
            {
                WebClient client = new WebClient();
                client.Headers.Add(HttpRequestHeader.UserAgent, "ACT-Parser");
                try
                {
                    StreamReader reader = new StreamReader(client.OpenRead(pair.Value.Url));
                    if (!string.IsNullOrEmpty(client.ResponseHeaders["Last-Modified"]))
                    {
                        pair.Value.LastModified = DateTime.Parse(client.ResponseHeaders["Last-Modified"]);
                    }
                    else
                    {
                        pair.Value.LastModified = DateTime.Now;
                    }
                    pair.Value.LastXml = reader.ReadToEnd();
                    continue;
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, pair.Value.Url);
                    continue;
                }
            }
        }

        internal void SubUpdateListbox(bool AlertBox)
        {
            List<string> entries = new List<string>();
            string str = string.Empty;
            this.opXmlSubs.clbSubs.BeginUpdate();
            this.opXmlSubs.clbSubs.Items.Clear();
            foreach (KeyValuePair<string, XmlShareEntry> pair in this.subEntries)
            {
                CheckState indeterminate;
                this.opXmlSubs.clbSubs.Items.Add(pair.Key);
                if (pair.Value.New)
                {
                    if (pair.Value.RbIgnore)
                    {
                        indeterminate = CheckState.Indeterminate;
                        str = str + string.Format("Warning: {0} -- is outdated but ignored.\r\n\r\n", pair.Value.Url);
                    }
                    else
                    {
                        indeterminate = CheckState.Checked;
                        str = str + string.Format("{0} -- is outdated.\r\n\r\n", pair.Value.Url);
                        entries.Add(pair.Key);
                    }
                }
                else
                {
                    indeterminate = CheckState.Unchecked;
                }
                this.opXmlSubs.clbSubs.SetItemCheckState(this.opXmlSubs.clbSubs.Items.Count - 1, indeterminate);
            }
            this.opXmlSubs.clbSubs.EndUpdate();
            if (((entries.Count > 0) && AlertBox) && (MessageBox.Show(str + "\r\nImport these now?", "XML Subscriptions", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes))
            {
                this.SubDoXmlImports(entries, true);
            }
            if ((entries.Count == 0) && AlertBox)
            {
                MessageBox.Show("There are no external XML files that need to be updated.", "No Updates", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }

        private void tbFeedbackEmail_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Return)
            {
                this.ActCommands(this.tbFeedbackEmail.Text);
            }
        }

        private void tbOptionsSearch_Enter(object sender, EventArgs e)
        {
            if (!string.IsNullOrWhiteSpace(this.tbOptionsSearch.Text))
            {
                this.tbOptionsSearch.ForeColor = SystemColors.ControlText;
                if (this.tbOptionsSearch.Text == "Search Options...")
                {
                    this.tbOptionsSearch.Text = string.Empty;
                }
            }
        }

        private void tbOptionsSearch_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(this.tbOptionsSearch.Text))
            {
                this.tbOptionsSearch.Text = "Search Options...";
                this.tbOptionsSearch.ForeColor = SystemColors.GrayText;
                this.RevertSearchHighlighting();
            }
            else
            {
                this.tbOptionsSearch.ForeColor = SystemColors.ControlText;
            }
        }

        private void tbOptionsSearch_TextChanged(object sender, EventArgs e)
        {
            this.RevertSearchHighlighting();
            string[] terms = this.tbOptionsSearch.Text.ToLower().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            if (terms.Length > 0)
            {
                List<TreeNode> nodesSoFar = new List<TreeNode>();
                this.GetSubNodes(this.tvOptions.Nodes, ref nodesSoFar);
                foreach (TreeNode node in nodesSoFar)
                {
                    if (this.optionsControlSets.ContainsKey(node.FullPath))
                    {
                        foreach (Control control in this.optionsControlSets[node.FullPath])
                        {
                            bool nodeHighlight = false;
                            this.SearchSubControls(control, terms, ref nodeHighlight);
                            if (nodeHighlight)
                            {
                                node.BackColor = System.Drawing.Color.LightCoral;
                            }
                        }
                        continue;
                    }
                }
            }
        }

        private void tbRecordSearchText_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Return)
            {
                this.btnRecordSearchText_Click(sender, e);
            }
        }

        private void tbSndTrigger_Update(object sender, EventArgs e)
        {
            if (this.rbSndTriggerTTS.Checked || this.rbSndTriggerWAV.Checked)
            {
                this.tbSndTrigger.Enabled = true;
            }
            else
            {
                this.tbSndTrigger.Enabled = false;
            }
        }

        private void tbTriggerSearch_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Return)
            {
                TextBox box = (TextBox) sender;
                CustomTrigger tag = (CustomTrigger) box.Tag;
                int num = 0;
                tag.TriggerListView.BeginUpdate();
                foreach (ListViewItem item in tag.TriggerListView.Items)
                {
                    string str = (string) item.Tag;
                    if (str.ToUpper().IndexOf(tag.TriggerSearchBox.Text.ToUpper()) > -1)
                    {
                        num++;
                        item.BackColor = System.Drawing.Color.LemonChiffon;
                    }
                    else
                    {
                        item.BackColor = item.ListView.BackColor;
                    }
                }
                tag.TriggerListView.EndUpdate();
                MessageBox.Show(string.Format(this.Trans["messageBox-searchResults"].DisplayedText, num), this.Trans["messageBoxTitle-searchResults"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                tag.TabbedCurrentIndex = -1;
            }
        }

        private void TempInsertIoControls()
        {
            this.flpIoControls.Controls.Add(this.ioImportLog);
            this.flpIoControls.Controls.Add(this.ioImportClip);
            this.flpIoControls.Controls.Add(this.ioImportLog);
            this.flpIoControls.Controls.Add(this.ioImportAct);
            this.flpIoControls.Controls.Add(this.ioExportAct);
            this.flpIoControls.Controls.Add(this.ioExportHtml);
            this.flpIoControls.Controls.Add(this.ioOdbc);
            this.flpIoControls.Controls.Add(this.ioXmlFile);
        }

        private void TempInsertOpControls()
        {
            this.flpOptionControls.Controls.Add(this.opXmlShare);
            this.flpOptionControls.Controls.Add(this.opXmlSubs);
            this.flpOptionControls.Controls.Add(this.opLcdGeneral);
            this.flpOptionControls.Controls.Add(this.opLcdMono);
            this.flpOptionControls.Controls.Add(this.opLcdColor);
            this.flpOptionControls.Controls.Add(this.opEncCulling);
            this.flpOptionControls.Controls.Add(this.opMiniParse);
            this.flpOptionControls.Controls.Add(this.opTableZone);
            this.flpOptionControls.Controls.Add(this.opTableEncounter);
            this.flpOptionControls.Controls.Add(this.opTableCombatant);
            this.flpOptionControls.Controls.Add(this.opTableDamageType);
            this.flpOptionControls.Controls.Add(this.opTableAttackType);
            this.flpOptionControls.Controls.Add(this.opMainTableGen);
            this.flpOptionControls.Controls.Add(this.opGraphing);
            this.flpOptionControls.Controls.Add(this.opTextExports);
            this.flpOptionControls.Controls.Add(this.opOdbc);
            this.flpOptionControls.Controls.Add(this.opFileHTML);
            this.flpOptionControls.Controls.Add(this.opWebServer);
            this.flpOptionControls.Controls.Add(this.opSound);
            this.flpOptionControls.Controls.Add(this.opColorUserInterface);
            this.flpOptionControls.Controls.Add(this.opColorGraphing);
            this.flpOptionControls.Controls.Add(this.opColorMisc);
            this.flpOptionControls.Controls.Add(this.opMisc);
            this.flpOptionControls.Controls.Add(this.opImportExport);
            this.flpOptionControls.Controls.Add(this.opSelectiveParsing);
            this.flpOptionControls.Controls.Add(this.opDataCorrectionMisc);
            this.flpOptionControls.Controls.Add(this.opDataCorrectionRename);
            this.flpOptionControls.Controls.Add(this.opDataCorrectionRedirect);
        }

        private void ThreadCheckFiles()
        {
            try
            {
                int num = -1;
                FileInfo[] files = this.logfileBaseFolder.GetFiles(this.logFileFilter, SearchOption.AllDirectories);
                long[] numArray = new long[files.Length];
                for (int i = 0; i < files.Length; i++)
                {
                    if (files[i].FullName == this.logFilePath)
                    {
                        num = i;
                    }
                    numArray[i] = files[i].Length;
                }
                while (true)
                {
                    FileInfo[] infoArray2 = this.logfileBaseFolder.GetFiles(this.logFileFilter, SearchOption.AllDirectories);
                    if (infoArray2.Length != files.Length)
                    {
                        files = infoArray2;
                        numArray = new long[files.Length];
                        for (int k = 0; k < files.Length; k++)
                        {
                            if (files[k].FullName == this.logFilePath)
                            {
                                num = k;
                            }
                            numArray[k] = files[k].Length;
                        }
                    }
                    for (int j = 0; j < files.Length; j++)
                    {
                        FileInfo info = files[j];
                        info = new FileInfo(info.FullName);
                        if (info.Length > numArray[j])
                        {
                            numArray[j] = info.Length;
                            if (((j != num) && !this.importThreadAlive) && !this.exportThreadAlive)
                            {
                                num = j;
                                this.logFilePath = info.FullName;
                                this.triggerOpenLog = true;
                            }
                        }
                    }
                    Thread.Sleep(0x2710);
                }
            }
            catch (ThreadAbortException)
            {
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "ThreadCheckFiles");
            }
        }

        private void ThreadEncSamples(object EncounterSource)
        {
            this.graphingThreadAlive = true;
            if ((this.pbDG.Width > 4) && (this.pbDG.Height > 4))
            {
                this.pbDG.Image = this.GenerateEncounterGraph((EncounterData) EncounterSource, this.pbDG.Width - 4, this.pbDG.Height - 4, ActGlobals.eDSort);
            }
            this.updateEncGraph = false;
            this.graphingThreadAlive = false;
        }

        private void ThreadEQ2HTMLExport()
        {
            this.exportThreadAlive = true;
            try
            {
                EncounterData data;
                FileStream stream;
                string str = string.Empty;
                FileInfo info = null;
                FileInfo info2 = null;
                try
                {
                    data = this.zoneList[this.exportZdIndex].Items[this.exportEdIndex];
                }
                catch
                {
                    return;
                }
                List<CombatantData> list = new List<CombatantData>(data.Items.Values);
                try
                {
                    list.Sort();
                    if (this.opMainTableGen.cbReverseSort.Checked)
                    {
                        list.Reverse();
                    }
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, string.Empty);
                }
                this.htmlIndex++;
                info = new FileInfo(string.Concat(new object[] { this.htmlDir.FullName, @"\", this.htmlIndex, ".html" }));
                info2 = new FileInfo(string.Concat(new object[] { this.htmlDir.FullName, @"\", this.htmlIndex, ".png" }));
                StringBuilder builder = new StringBuilder();
                builder.Append("<table cellspacing='0' cellpadding='0' border='1' width='100%'>");
                builder.Append(this.ExportTBodyHTML(data.Items.Values));
                builder.Append("</table>");
                str = builder.ToString();
                try
                {
                    stream = new FileStream(info.FullName, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                    stream.Seek(0, SeekOrigin.Begin);
                    stream.SetLength(0);
                }
                catch (Exception exception2)
                {
                    MessageBox.Show(string.Format(this.Trans["messageBox-htmlNoFileAccess"].DisplayedText, exception2.Message), this.Trans["messageBoxTitle-htmlNoFileAccess"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.WriteExceptionLog(exception2, "Could not write to required files.");
                    return;
                }
                StreamWriter writer = new StreamWriter(stream);
                writer.WriteLine("<html><head><META http-equiv='Content-Type' content='text/html; charset=utf-8'></head>");
                writer.WriteLine("<BODY BGCOLOR='#000000' TEXT='#FFFFFF' ALINK='#9999FF' LINK='#9999FF' VLINK='#990099'>");
                writer.WriteLine("<h4><a href=\"index.html\">Return to Index</a></h4><br><hr><br>");
                writer.WriteLine("<center><h3>" + data.Title + "</h3></center>");
                writer.WriteLine("<center><h4>" + data.StartTime.ToLongTimeString() + " to " + data.EndTime.ToLongTimeString() + "</h4></center>");
                writer.Write(str);
                if (this.opFileHTML.cbExGraph.Checked)
                {
                    writer.WriteLine("<center><hr><img src=\"" + info2.Name + "\"></center>");
                }
                writer.WriteLine("</BODY>");
                writer.WriteLine("</html>");
                writer.Close();
                this.htmlEntries.Add(new EncounterHTMLEntry(data.Title, data.StartTime.ToLongTimeString(), data.EndTime.ToLongTimeString(), data.DurationS, data.Damage.ToString(), data.DPS.ToString("F")));
                while (this.opFileHTML.cbHTMLCullEncounters.Checked && ((this.htmlIndex - this.htmlStartIndex) > decimal.op_Decrement(this.opFileHTML.nudHTMLCullingCount.Value)))
                {
                    this.htmlStartIndex++;
                }
                if (this.opFileHTML.cbExHTMLFTP.Checked)
                {
                    this.FTPUploadFile(info.Name, info.OpenRead(), false);
                    try
                    {
                        if (this.htmlStartIndex > 1)
                        {
                            string fileName = ((this.htmlStartIndex - 1)).ToString() + ".html";
                            this.FTPDeleteFile(fileName);
                        }
                    }
                    catch (WebException exception3)
                    {
                        string statusDescription = ((FtpWebResponse) exception3.Response).StatusDescription;
                        this.WriteExceptionLog(exception3, statusDescription);
                    }
                    catch (Exception exception4)
                    {
                        this.WriteExceptionLog(exception4, string.Empty);
                    }
                }
                try
                {
                    this.indexFs.Seek(0, SeekOrigin.Begin);
                    this.indexFs.SetLength(0);
                }
                catch (Exception exception5)
                {
                    MessageBox.Show(string.Format(this.Trans["messageBox-htmlNoFileAccess"].DisplayedText, exception5.Message), this.Trans["messageBoxTitle-htmlNoFileAccess"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.WriteExceptionLog(exception5, "Could not write to required files.");
                    return;
                }
                try
                {
                    writer = new StreamWriter(this.indexFs);
                    writer.WriteLine("<html><head><META http-equiv='Content-Type' content='text/html; charset=utf-8'></head>");
                    writer.WriteLine("<BODY BGCOLOR='#000000' TEXT='#FFFFFF' ALINK='#9999FF' LINK='#9999FF' VLINK='#990099'>");
                    writer.WriteLine("<h4><a href=\"index.html\">Return to Index</a> - ");
                    writer.WriteLine("<a href=\"" + this.htmlIndex + ".html\">Last Encounter</a>");
                    if (this.opFileHTML.cbCurrentGraph.Checked || this.opFileHTML.cbCurrentTable.Checked)
                    {
                        writer.WriteLine(" - <a href=\"current.html\">Current Encounter</a>");
                    }
                    if (this.opFileHTML.cbHtmlTimers.Checked)
                    {
                        writer.WriteLine(" - <a href=\"timers.html\">Timers Window</a>");
                    }
                    writer.WriteLine("</h4><br>");
                    writer.WriteLine("Last Updated: " + DateTime.Now.ToLongTimeString() + "<br><hr>");
                    writer.WriteLine("<table cellspacing='0' cellpadding='0' border='1' width='100%'>");
                    writer.WriteLine("<tr><th>Title</th><th>Start</th><th>End</th><th>Duration</th><th>Allied Damage</th><th>EncDPS</th></tr>");
                    for (int i = this.htmlStartIndex; i <= this.htmlIndex; i++)
                    {
                        EncounterHTMLEntry entry = this.htmlEntries[i - 1];
                        writer.Write("<tr>");
                        writer.Write(string.Concat(new object[] { "<td><a href=\"", i, ".html\">", entry.Title, "</a></td>" }));
                        writer.Write("<td>" + entry.Start + "</td>");
                        writer.Write("<td>" + entry.End + "</td>");
                        writer.Write("<td>" + entry.Duration + "</td>");
                        writer.Write("<td>" + entry.Damage + "</td>");
                        writer.Write("<td>" + entry.DPS + "</td>");
                        writer.Write("<tr>\n");
                    }
                    writer.WriteLine("</table>");
                    writer.WriteLine("</BODY></HTML>");
                    writer.Flush();
                }
                catch (Exception exception6)
                {
                    this.WriteExceptionLog(exception6, string.Empty);
                }
                if (this.opFileHTML.cbExHTMLFTP.Checked)
                {
                    this.indexFs.Seek(0, SeekOrigin.Begin);
                    this.FTPUploadFile("index.html", this.indexFs, false);
                }
                if (this.opFileHTML.cbExGraph.Checked)
                {
                    try
                    {
                        stream = new FileStream(info2.FullName, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
                        stream.Seek(0, SeekOrigin.Begin);
                        stream.SetLength(0);
                        this.GenerateEncounterGraph(data, (int) this.opFileHTML.nudGraphX.Value, (int) this.opFileHTML.nudGraphY.Value, this.opTableEncounter.btnEDSort.Text).Save(stream, ImageFormat.Png);
                        stream.Close();
                    }
                    catch (Exception exception7)
                    {
                        this.WriteExceptionLog(exception7, string.Empty);
                    }
                    if (this.opFileHTML.cbExHTMLFTP.Checked)
                    {
                        this.FTPUploadFile(info2.Name, info2.OpenRead(), true);
                        try
                        {
                            if (this.htmlStartIndex > 1)
                            {
                                string str4 = ((this.htmlStartIndex - 1)).ToString() + ".png";
                                this.FTPDeleteFile(str4);
                            }
                        }
                        catch (WebException exception8)
                        {
                            string moreInfo = ((FtpWebResponse) exception8.Response).StatusDescription;
                            this.WriteExceptionLog(exception8, moreInfo);
                        }
                        catch (Exception exception9)
                        {
                            this.WriteExceptionLog(exception9, string.Empty);
                        }
                    }
                }
                if (this.opFileHTML.cbExHTMLFTP.Checked)
                {
                    this.FTPDisconnect();
                }
                this.ExportBeep();
            }
            catch (WebException exception10)
            {
                string str6 = ((FtpWebResponse) exception10.Response).StatusDescription;
                this.WriteExceptionLog(exception10, str6);
            }
            catch (Exception exception11)
            {
                this.WriteExceptionLog(exception11, string.Empty);
            }
            finally
            {
                this.exportThreadAlive = false;
            }
        }

        internal void ThreadExportHTML()
        {
            this.ioExportHtml.exportThreadAlive = true;
            try
            {
                if (!this.ioExportHtml.tvHTMLExport.Nodes[0].Checked)
                {
                    MessageBox.Show(this.Trans["messageBox-exportNoOptions"].DisplayedText, this.Trans["messageBoxTitle-exportNoEncounters"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.ioExportHtml.exportThreadAlive = false;
                }
                else
                {
                    List<EncounterData> list = new List<EncounterData>();
                    try
                    {
                        if (this.tvDG.CheckBoxes)
                        {
                            for (int i = 0; i < this.tvDG.Nodes.Count; i++)
                            {
                                for (int j = 0; j < this.tvDG.Nodes[i].Nodes.Count; j++)
                                {
                                    TreeNode node = this.tvDG.Nodes[i].Nodes[j];
                                    if (node.Checked)
                                    {
                                        list.Add(this.zoneList[i].Items[j]);
                                    }
                                }
                            }
                        }
                        else if ((this.tvDG.SelectedNode.Parent != null) && (this.tvDG.SelectedNode.Parent.Parent == null))
                        {
                            list.Add(this.zoneList[this.tvDG.SelectedNode.Parent.Index].Items[this.tvDG.SelectedNode.Index]);
                        }
                    }
                    catch
                    {
                        MessageBox.Show(this.Trans["messageBox-exportNoEncounters"].DisplayedText, this.Trans["messageBoxTitle-exportNoEncounters"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        this.ioExportHtml.exportThreadAlive = false;
                        return;
                    }
                    SaveFileDialog dialog = new SaveFileDialog {
                        AddExtension = true,
                        CheckPathExists = true,
                        CreatePrompt = false,
                        Filter = "HTML File (*.html)|*.html",
                        Title = "Export Encounter to HTML",
                        ValidateNames = true,
                        OverwritePrompt = true,
                        FileName = string.Empty
                    };
                    if ((this.folderExports != null) && this.folderExports.Exists)
                    {
                        dialog.InitialDirectory = this.folderExports.FullName;
                    }
                    if (dialog.ShowDialog() != DialogResult.OK)
                    {
                        this.ioExportHtml.exportThreadAlive = false;
                    }
                    else
                    {
                        this.folderExports = new DirectoryInfo(Path.GetDirectoryName(dialog.FileName));
                        DateTime now = DateTime.Now;
                        bool flag2 = this.ioExportHtml.tvHTMLExport.Nodes[1].Checked;
                        bool flag3 = this.ioExportHtml.tvHTMLExport.Nodes[0].Nodes[0].Checked;
                        bool flag4 = this.ioExportHtml.tvHTMLExport.Nodes[1].Nodes[0].Checked;
                        bool flag5 = this.ioExportHtml.tvHTMLExport.Nodes[0].Nodes[0].Nodes[0].Checked;
                        bool flag6 = this.ioExportHtml.tvHTMLExport.Nodes[1].Nodes[0].Nodes[0].Checked;
                        bool flag7 = this.ioExportHtml.tvHTMLExport.Nodes[0].Nodes[0].Nodes[0].Nodes[0].Checked;
                        bool flag8 = this.ioExportHtml.tvHTMLExport.Nodes[1].Nodes[0].Nodes[0].Nodes[0].Checked;
                        StringBuilder builder = new StringBuilder();
                        List<string> list2 = new List<string>();
                        List<string> list3 = new List<string>();
                        MemoryStream stream = new MemoryStream();
                        StreamWriter writer = new StreamWriter(stream);
                        StreamReader reader = new StreamReader(stream);
                        string item = string.Empty;
                        FileInfo info = new FileInfo(dialog.FileName);
                        DirectoryInfo info2 = new DirectoryInfo(string.Format(@"{0}\{1}_data", info.DirectoryName, info.Name));
                        info2.Create();
                        this.SendResourceToFile("g_PH.png", info2.Parent.FullName + @"\g_PH.png");
                        this.SendResourceToFile("bullet.png", info2.Parent.FullName + @"\bullet.png");
                        this.SendResourceToFile("plus.png", info2.Parent.FullName + @"\plus.png");
                        this.SendResourceToFile("minus.png", info2.Parent.FullName + @"\minus.png");
                        this.SendResourceToFile("actHtml.css", info2.Parent.FullName + @"\actHtml.css");
                        this.SendResourceToFile("actHtml.js", info2.Parent.FullName + @"\actHtml.js");
                        for (int k = 0; k < list.Count; k++)
                        {
                            int num4 = (int) ((((float) k) / ((float) list.Count)) * 100f);
                            ThreadInvokes.ControlSetText(this, this.ioExportHtml.lblHtmlExportStatus, "Generating HTML...\n" + num4 + "%");
                            EncounterData encounterSource = list[k];
                            writer.WriteLine("<!-- Main Encounter Table -->");
                            item = string.Format("ed{0:000}", k);
                            list2.Add(item);
                            list3.Add(encounterSource.ToString());
                            writer.Write(string.Format("<div id=\"{0}\" style=\"display:none\">\n", item));
                            writer.Write(string.Format("<h2>{0}</h2><h4>{1} - {2} to {3}</h4>\n", new object[] { encounterSource.Title, encounterSource.StartTime.ToLongDateString(), encounterSource.StartTime.ToLongTimeString(), encounterSource.EndTime.ToLongTimeString() }));
                            writer.Write(string.Format("<div align=\"right\"><a href=\"javascript:initTable('t_{0}');\"><span class=\"sortButton\">Enable Table Sorting</span></a></div><br>\n", item));
                            writer.Write(string.Format("<table class=\"datatable\" id=\"t_{0}\">\n", item));
                            string str2 = this.ExportTBodyHTML(encounterSource.Items.Values);
                            writer.Write(str2);
                            writer.WriteLine("</table>");
                            if (flag2)
                            {
                                writer.WriteLine("<!-- Main Encounter Graph -->");
                                writer.Write(string.Format("<br><a href=\"javascript:imgToggle('g_{1}','{0}/g_{1}.png')\"><img alt=\"Main Encounter Graph\" id=\"g_{1}\" src=\"g_PH.png\"></a>", info2.Name, item));
                                this.GenerateEncounterGraph(encounterSource, (int) this.ioExportHtml.nudExportGraphX.Value, (int) this.ioExportHtml.nudExportGraphY.Value, ActGlobals.mDSort).Save(string.Format(@"{0}\g_{1}.png", info2.FullName, item), ImageFormat.Png);
                            }
                            writer.WriteLine("</div>");
                            if (flag3)
                            {
                                for (int num5 = 0; num5 < encounterSource.Items.Values.Count; num5++)
                                {
                                    int num6 = (int) ((((float) num5) / ((float) encounterSource.Items.Count)) * 100f);
                                    ThreadInvokes.ControlSetText(this, this.ioExportHtml.lblHtmlExportStatus, string.Concat(new object[] { "Generating HTML...\n", num4, "% | ", num6, "%" }));
                                    Application.DoEvents();
                                    CombatantData combatantSource = encounterSource.Items.Values[num5];
                                    writer.Write(string.Format("<!-- {0}'s Table -->\n", combatantSource.Name));
                                    item = string.Format("ed{0:000}cd{1:000}", k, num5);
                                    list2.Add(item);
                                    list3.Add(combatantSource.Name);
                                    writer.Write(string.Format("<div id=\"{0}\" style=\"display:none\">\n", item));
                                    writer.Write(string.Format("<h2>{0}</h2>\n", combatantSource.Name));
                                    writer.Write(string.Format("<div align=\"right\"><a href=\"javascript:initTable('t_{0}');\"><span class=\"sortButton\">Enable Table Sorting</span></a></div><br>\n", item));
                                    writer.Write(string.Format("<table class=\"datatable\" id=\"t_{0}\">\n", item));
                                    str2 = this.ExportTBodyHTML(combatantSource.Items.Values);
                                    writer.Write(str2);
                                    writer.WriteLine("</table>");
                                    if (flag4)
                                    {
                                        writer.WriteLine("<!-- Combatant Graph -->");
                                        writer.Write(string.Format("<br><a href=\"javascript:imgToggle('g_{1}','{0}/g_{1}.png')\"><img alt=\"Combatant Graph\" id=\"g_{1}\" src=\"g_PH.png\"></a>", info2.Name, item));
                                        this.GenerateCombatantGraph(combatantSource, (int) this.ioExportHtml.nudExportGraphX.Value, (int) this.ioExportHtml.nudExportGraphY.Value).Save(string.Format(@"{0}\g_{1}.png", info2.FullName, item), ImageFormat.Png);
                                    }
                                    writer.WriteLine("</div>");
                                    if (flag5)
                                    {
                                        int num7 = -1;
                                        foreach (KeyValuePair<string, DamageTypeData> pair in combatantSource.Items)
                                        {
                                            num7++;
                                            int num8 = (int) ((((float) num7) / ((float) combatantSource.Items.Count)) * 100f);
                                            ThreadInvokes.ControlSetText(this, this.ioExportHtml.lblHtmlExportStatus, string.Concat(new object[] { "Generating HTML...\n", num4, "% | ", num6, "% | ", num8, "%" }));
                                            Application.DoEvents();
                                            DamageTypeData damageTypeSource = pair.Value;
                                            writer.Write(string.Format("<!-- {0}'s ({1}) Table -->\n", combatantSource.Name, damageTypeSource.Type));
                                            item = string.Format("ed{0:000}cd{1:000}dt{2:000}", k, num5, num7);
                                            list2.Add(item);
                                            list3.Add(damageTypeSource.Type);
                                            writer.Write(string.Format("<div id=\"{0}\" style=\"display:none\">\n", item));
                                            writer.Write(string.Format("<h2>{0}</h2><h4>{1}</h4>\n", combatantSource.Name, damageTypeSource.Type));
                                            writer.Write(string.Format("<div align=\"right\"><a href=\"javascript:initTable('t_{0}');\"><span class=\"sortButton\">Enable Table Sorting</span></a></div><br>\n", item));
                                            writer.Write(string.Format("<table class=\"datatable\" id=\"t_{0}\">\n", item));
                                            str2 = this.ExportTBodyHTML(damageTypeSource.Items.Values);
                                            writer.Write(str2);
                                            writer.WriteLine("</table>");
                                            if (flag6)
                                            {
                                                writer.WriteLine("<!-- DamageType Graph -->");
                                                writer.Write(string.Format("<br><a href=\"javascript:imgToggle('g_{1}','{0}/g_{1}.png')\"><img alt=\"DamageType Graph\" id=\"g_{1}\" src=\"g_PH.png\"></a>", info2.Name, item));
                                                this.GenerateDamageTypeGraph(damageTypeSource, (int) this.ioExportHtml.nudExportGraphX.Value, (int) this.ioExportHtml.nudExportGraphY.Value, ActGlobals.mDSort).Save(string.Format(@"{0}\g_{1}.png", info2.FullName, item), ImageFormat.Png);
                                            }
                                            writer.WriteLine("</div>");
                                            if (flag7)
                                            {
                                                for (int num9 = 0; num9 < damageTypeSource.Items.Count; num9++)
                                                {
                                                    int num10 = (int) ((((float) num9) / ((float) damageTypeSource.Items.Count)) * 100f);
                                                    ThreadInvokes.ControlSetText(this, this.ioExportHtml.lblHtmlExportStatus, string.Concat(new object[] { "Generating HTML...\n", num4, "% | ", num6, "% | ", num8, "% | ", num10, "%" }));
                                                    AttackType attackTypeSource = damageTypeSource.Items.Values[num9];
                                                    writer.Write(string.Format("<!-- {0}'s ({1}|{2}) Table -->\n", combatantSource.Name, damageTypeSource.Type, attackTypeSource.Type));
                                                    item = string.Format("ed{0:000}cd{1:000}dt{2:000}at{3:000}", new object[] { k, num5, num7, num9 });
                                                    list2.Add(item);
                                                    list3.Add(attackTypeSource.Type);
                                                    writer.Write(string.Format("<div id=\"{0}\" style=\"display:none\">\n", item));
                                                    writer.Write(string.Format("<h2>{0}</h2><h4>{1} - [{2}]</h4>\n", combatantSource.Name, damageTypeSource.Type, attackTypeSource.Type));
                                                    writer.Write(string.Format("<div align=\"right\"><a href=\"javascript:initTable('t_{0}');\"><span class=\"sortButton\">Enable Table Sorting</span></a></div><br>\n", item));
                                                    writer.Write(string.Format("<table class=\"datatable\" id=\"t_{0}\">\n", item));
                                                    str2 = this.ExportTBodyHTML(attackTypeSource.Items);
                                                    writer.Write(str2);
                                                    writer.WriteLine("</table>");
                                                    if (flag8)
                                                    {
                                                        writer.WriteLine("<!-- AttackType Graph -->");
                                                        writer.Write(string.Format("<br><a href=\"javascript:imgToggle('g_{1}','{0}/g_{1}.png')\"><img alt=\"AttackType Graph\" id=\"g_{1}\" src=\"g_PH.png\"></a>", info2.Name, item));
                                                        this.GenerateAttackTypeGraph(attackTypeSource, (int) this.ioExportHtml.nudExportGraphX.Value, (int) this.ioExportHtml.nudExportGraphY.Value, "Time").Save(string.Format(@"{0}\g_{1}.png", info2.FullName, item), ImageFormat.Png);
                                                    }
                                                    writer.WriteLine("</div>");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        for (int m = 0; m < list3.Count; m++)
                        {
                            list3[m] = list3[m].Replace(" ", "&nbsp;");
                        }
                        int num12 = 0;
                        for (int n = 0; n < list2.Count; n++)
                        {
                            if ((n == 0) || (list2[n].Length > list2[n - 1].Length))
                            {
                                if (n == 0)
                                {
                                    builder.AppendLine("<ul class=\"aqtree3clickable\">");
                                }
                                else
                                {
                                    builder.AppendLine("<ul>");
                                }
                                num12++;
                            }
                            if ((n != (list2.Count - 1)) && (list2[n + 1].Length > list2[n].Length))
                            {
                                builder.AppendFormat("<li><a href=\"javascript:expand('{0}')\">{1}</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n", list2[n], list3[n]);
                            }
                            else
                            {
                                builder.AppendFormat("<li><a href=\"javascript:expand('{0}')\">{1}</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>\n", list2[n], list3[n]);
                            }
                            if (n == (list2.Count - 1))
                            {
                                while (num12 > 1)
                                {
                                    builder.AppendLine("</ul></li>");
                                    num12--;
                                }
                                builder.AppendLine("</ul>");
                            }
                            else
                            {
                                if (list2[n].Length == (list2[n + 1].Length + 20))
                                {
                                    builder.AppendLine("</ul></li>");
                                    builder.AppendLine("</ul></li>");
                                    builder.AppendLine("</ul></li>");
                                    builder.AppendLine("</ul></li>");
                                    num12 -= 4;
                                }
                                if (list2[n].Length == (list2[n + 1].Length + 15))
                                {
                                    builder.AppendLine("</ul></li>");
                                    builder.AppendLine("</ul></li>");
                                    builder.AppendLine("</ul></li>");
                                    num12 -= 3;
                                }
                                if (list2[n].Length == (list2[n + 1].Length + 10))
                                {
                                    builder.AppendLine("</ul></li>");
                                    builder.AppendLine("</ul></li>");
                                    num12 -= 2;
                                }
                                if (list2[n].Length == (list2[n + 1].Length + 5))
                                {
                                    builder.AppendLine("</ul></li>");
                                    num12--;
                                }
                            }
                        }
                        StringBuilder builder2 = new StringBuilder();
                        builder2.AppendLine("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");
                        builder2.AppendLine("<html>");
                        builder2.AppendLine("<head>");
                        builder2.AppendLine("<title>Advanced Combat Tracker - HTML Export</title>");
                        builder2.AppendLine("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">");
                        builder2.AppendLine("<script src=\"actHtml.js\" type=\"text/javascript\" language=\"javascript\"></script>");
                        builder2.AppendLine("<link rel=\"stylesheet\" href=\"actHtml.css\"> ");
                        builder2.AppendLine("</head>");
                        builder2.AppendLine("<body>");
                        builder2.AppendLine("<table class=\"mainLayout\">");
                        builder2.AppendLine("<tr>");
                        builder2.AppendLine("<td class=\"leftLayout\">");
                        builder2.AppendLine("<table class=\"selectorBorder\"><tr><td>");
                        builder2.Append(builder.ToString());
                        builder2.AppendLine("</td></tr></table>");
                        builder2.AppendLine("</td>");
                        builder2.AppendLine("<td class=\"rightLayout\">");
                        StringBuilder builder3 = new StringBuilder();
                        builder3.AppendLine("</td>");
                        builder3.AppendLine("</tr>");
                        builder3.AppendLine("</table>");
                        builder3.AppendLine("</body>");
                        builder3.AppendLine("</html>");
                        ThreadInvokes.ControlSetText(this, this.ioExportHtml.lblHtmlExportStatus, "Writing HTML to file...");
                        FileStream stream2 = new FileStream(dialog.FileName, FileMode.Create);
                        StreamWriter writer2 = new StreamWriter(stream2);
                        writer2.Write(builder2.ToString());
                        reader.BaseStream.Seek(0, SeekOrigin.Begin);
                        int count = 0;
                        char[] buffer = new char[0x1000];
                        do
                        {
                            count = reader.Read(buffer, 0, 0x1000);
                            writer2.Write(buffer, 0, count);
                        }
                        while (count == 0x1000);
                        writer2.Write(builder3.ToString());
                        writer2.Flush();
                        writer2.Close();
                        string[] strArray = new string[5];
                        strArray[0] = "Export to ";
                        strArray[1] = dialog.FileName;
                        strArray[2] = " has completed.\n";
                        TimeSpan span = (TimeSpan) (DateTime.Now - now);
                        strArray[3] = span.TotalSeconds.ToString("F");
                        strArray[4] = " seconds elapsed.";
                        ThreadInvokes.ControlSetText(this, this.ioExportHtml.lblHtmlExportStatus, string.Concat(strArray));
                        SystemSounds.Beep.Play();
                    }
                }
            }
            finally
            {
                this.ioExportHtml.exportThreadAlive = false;
            }
        }

        private void ThreadHistoryImport()
        {
            this.importThreadAlive = true;
            ActGlobals.oFormImportProgress.StartOperationStats();
            try
            {
                int numerator = 0;
                int denominator = 0;
                for (int i = 0; i < this.recordResults.Count; i++)
                {
                    if (this.clbRecordResults.GetItemChecked(i))
                    {
                        denominator++;
                    }
                }
                ActGlobals.oFormImportProgress.ResetBatchStats();
                for (int j = 0; j < this.recordResults.Count; j++)
                {
                    if (!this.clbRecordResults.GetItemChecked(j))
                    {
                        continue;
                    }
                    numerator++;
                    ActGlobals.oFormImportProgress.SetBatch(numerator, denominator);
                    FileInfo info = new FileInfo(this.logFilePath);
                    FileInfo[] files = info.Directory.GetFiles(this.logFileFilter, SearchOption.AllDirectories);
                    List<FileInfo> list = new List<FileInfo>();
                    if (this.logPathHasCharName)
                    {
                        for (int m = 0; m < files.Length; m++)
                        {
                            if (files[m].FullName.Contains(this.recordResults[j].CharName))
                            {
                                list.Add(files[m]);
                            }
                        }
                    }
                    else
                    {
                        list.AddRange(files);
                    }
                    string fullName = string.Empty;
                    for (int k = 0; k < list.Count; k++)
                    {
                        if (list[k].LastWriteTime > this.recordResults[j].EndTime)
                        {
                            fullName = list[k].FullName;
                            break;
                        }
                    }
                    if (string.IsNullOrEmpty(fullName))
                    {
                        MessageBox.Show(this.Trans["messageBox-importHistoryNoLogMatch"].DisplayedText, string.Format("{0} {1} to {2} {3}", new object[] { this.recordResults[j].StartTime.ToShortDateString(), this.recordResults[j].StartTime.ToLongTimeString(), this.recordResults[j].EndTime.ToShortDateString(), this.recordResults[j].EndTime.ToLongTimeString() }));
                        OpenFileDialog dialog = new OpenFileDialog {
                            Title = string.Format("Open log file containing {0} {1} to {2} {3}", new object[] { this.recordResults[j].StartTime.ToShortDateString(), this.recordResults[j].StartTime.ToLongTimeString(), this.recordResults[j].EndTime.ToShortDateString(), this.recordResults[j].EndTime.ToLongTimeString() }),
                            Filter = "Game Log Files|" + this.logFileFilter + "|Text Files (*.txt)|*.txt|Log Files (*.log)|*.log|Any File (*.*)|*.*"
                        };
                        DialogResult cancel = DialogResult.Cancel;
                        try
                        {
                            if ((this.folderLogs != null) && this.folderLogs.Exists)
                            {
                                dialog.InitialDirectory = this.folderLogs.FullName;
                            }
                            cancel = dialog.ShowDialog();
                        }
                        catch (SecurityException exception)
                        {
                            MessageBox.Show(this.Trans["messageBoxTitle-localSecurityPolicy"].DisplayedText + exception.Message, this.Trans["messageBoxTitle-localSecurityPolicy"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            this.WriteExceptionLog(exception, this.Trans["messageBoxTitle-localSecurityPolicy"].DisplayedText);
                            return;
                        }
                        if (cancel == DialogResult.OK)
                        {
                            this.folderLogs = new DirectoryInfo(Path.GetDirectoryName(dialog.FileName));
                            fullName = dialog.FileName;
                        }
                    }
                    if (!string.IsNullOrEmpty(fullName))
                    {
                        string text = string.IsNullOrEmpty(this.recordResults[j].CharName) ? ActGlobals.charName : this.recordResults[j].CharName;
                        ThreadInvokes.ControlSetText(this, this.opDataCorrectionMisc.tbCharName, text);
                        this.SetCharName(false);
                        this.importStream = new FileStream(fullName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                        this.ImportFile(false, false, this.recordResults[j].StartTime, this.recordResults[j].EndTime);
                        ThreadInvokes.CheckedListBoxSetChecked(this, this.clbRecordResults, j, false);
                    }
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, "ThreadHistoryImport");
            }
            ActGlobals.oFormImportProgress.progressBar1.Value = 0;
            ActGlobals.oFormImportProgress.SetProgress(-1);
            ActGlobals.oFormImportProgress.EndOperationStats();
            this.importThreadAlive = false;
            this.lvDG.XPFlushUpdate();
        }

        internal void ThreadOdbcExportBatch()
        {
            this.ioOdbc.exportThreadAlive = true;
            try
            {
                DateTime now = DateTime.Now;
                int num = 0;
                if (this.tvDG.CheckBoxes)
                {
                    for (int i = 0; i < this.tvDG.Nodes.Count; i++)
                    {
                        foreach (TreeNode node in this.tvDG.Nodes[i].Nodes)
                        {
                            if (node.Checked)
                            {
                                this.exportZdIndex = i;
                                this.exportEdIndex = node.Index;
                                this.exportError = -1;
                                this.ThreadOdbcExportSingle();
                                if (this.exportError != -1)
                                {
                                    num++;
                                }
                                if (this.exportError != 0x274c)
                                {
                                    node.Checked = false;
                                }
                            }
                        }
                    }
                }
                else if ((this.tvDG.SelectedNode.Parent.Parent == null) && (this.tvDG.SelectedNode.Parent != null))
                {
                    this.exportZdIndex = this.tvDG.SelectedNode.Parent.Index;
                    this.exportEdIndex = this.tvDG.SelectedNode.Index;
                    this.exportError = -1;
                    this.ThreadOdbcExportSingle();
                    if (this.exportError != -1)
                    {
                        num++;
                    }
                }
                else
                {
                    MessageBox.Show(this.Trans["messageBox-exportNoEncounters"].DisplayedText, this.Trans["messageBoxTitle-exportNoEncounters"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                TimeSpan span = (TimeSpan) (DateTime.Now - now);
                string text = string.Format("ODBC export has completed.\n{0} seconds elapsed.\n{1} errors.", span.TotalSeconds.ToString("F"), num);
                if (num > 0)
                {
                    text = text + "    Please see the General Options tab ODBC section for error descriptions.";
                }
                ThreadInvokes.ControlSetText(this, this.ioOdbc.lblOdbcStatus, text);
            }
            catch
            {
                MessageBox.Show(this.Trans["messageBox-exportNoEncounters"].DisplayedText, this.Trans["messageBoxTitle-exportNoEncounters"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            finally
            {
                this.ioOdbc.exportThreadAlive = false;
            }
        }

        private void ThreadOdbcExportSingle()
        {
            this.odbcThreadAlive = true;
            string str = string.Empty;
            string str2 = string.Empty;
            foreach (string str3 in CombatantData.OutgoingDamageTypeDataObjects.Keys)
            {
                str = str3;
            }
            foreach (string str4 in CombatantData.IncomingDamageTypeDataObjects.Keys)
            {
                str2 = str4;
            }
            try
            {
                ZoneData data = this.zoneList[this.exportZdIndex];
                EncounterData data2 = data.Items[this.exportEdIndex];
                StringBuilder builder = new StringBuilder();
                MemoryStream stream = new MemoryStream();
                StreamWriter writer = new StreamWriter(stream);
                List<string> tableVals = new List<string>();
                List<string> list2 = new List<string>();
                List<string> list3 = new List<string>();
                List<string> list4 = new List<string>();
                List<string> list5 = new List<string>();
                Dictionary<string, EncounterData.ColumnDef> dictionary = new Dictionary<string, EncounterData.ColumnDef>();
                Dictionary<string, CombatantData.ColumnDef> dictionary2 = new Dictionary<string, CombatantData.ColumnDef>();
                Dictionary<string, DamageTypeData.ColumnDef> dictionary3 = new Dictionary<string, DamageTypeData.ColumnDef>();
                Dictionary<string, AttackType.ColumnDef> dictionary4 = new Dictionary<string, AttackType.ColumnDef>();
                Dictionary<string, MasterSwing.ColumnDef> dictionary5 = new Dictionary<string, MasterSwing.ColumnDef>();
                DateTime now = DateTime.Now;
                bool flag = this.opOdbc.cbSqlSafeMode.Checked;
                int num = 0;
                if (this.opOdbc.rbOdbcEx1.Checked)
                {
                    num = 1;
                }
                if (this.opOdbc.rbOdbcEx2.Checked)
                {
                    num = 2;
                }
                if (this.opOdbc.rbOdbcEx3.Checked)
                {
                    num = 3;
                }
                if (this.opOdbc.rbOdbcEx4.Checked)
                {
                    num = 4;
                }
                if (this.opOdbc.rbOdbcEx5.Checked)
                {
                    num = 5;
                }
                ThreadInvokes.ControlSetText(this, this.ioOdbc.lblOdbcStatus, string.Format("{0}, {1}.\nGenerating SQL...", this.ZoneList[this.exportZdIndex].ZoneName, this.ZoneList[this.exportZdIndex].Items[this.exportEdIndex].ToString()));
                OdbcConnection selectConnection = new OdbcConnection(this.opOdbc.tbOdbcConnectionString.Text);
                OdbcDataAdapter adapter = new OdbcDataAdapter("SELECT * FROM encounter_table LIMIT 1;", selectConnection);
                DataSet dataSet = new DataSet();
                adapter.Fill(dataSet);
                foreach (DataColumn column in dataSet.Tables[0].Columns)
                {
                    foreach (KeyValuePair<string, EncounterData.ColumnDef> pair in EncounterData.ColumnDefs)
                    {
                        if (column.ColumnName.Equals(pair.Value.SqlDataName, StringComparison.CurrentCultureIgnoreCase))
                        {
                            dictionary.Add(column.ColumnName, pair.Value);
                        }
                    }
                }
                builder.Clear();
                int num2 = 0;
                foreach (KeyValuePair<string, EncounterData.ColumnDef> pair2 in dictionary)
                {
                    if (num2 == 0)
                    {
                        builder.AppendFormat("'{0}'", this.SqlSafe(pair2.Value.GetSqlData(data2)));
                    }
                    else
                    {
                        builder.AppendFormat(", '{0}'", this.SqlSafe(pair2.Value.GetSqlData(data2)));
                    }
                    num2++;
                }
                if (flag)
                {
                    writer.WriteLine(string.Format("INSERT INTO encounter_table ({1}) VALUES ({0});", builder.ToString(), string.Join(",", dictionary.Keys)));
                }
                else
                {
                    tableVals.Add(builder.ToString());
                }
                if (num < 2)
                {
                    return;
                }
                for (int i = 0; i < data2.Items.Values.Count; i++)
                {
                    int num4 = (int) ((((float) i) / ((float) data2.Items.Count)) * 100f);
                    ThreadInvokes.ControlSetText(this, this.ioOdbc.lblOdbcStatus, string.Format("{0}, {1}.\nGenerating SQL... {2}%", this.ZoneList[this.exportZdIndex].ZoneName, this.ZoneList[this.exportZdIndex].Items[this.exportEdIndex].ToString(), num4));
                    CombatantData data3 = data2.Items.Values[i];
                    if (dictionary2.Count == 0)
                    {
                        selectConnection = new OdbcConnection(this.opOdbc.tbOdbcConnectionString.Text);
                        adapter = new OdbcDataAdapter("SELECT * FROM combatant_table LIMIT 1;", selectConnection);
                        dataSet = new DataSet();
                        adapter.Fill(dataSet);
                        foreach (DataColumn column2 in dataSet.Tables[0].Columns)
                        {
                            foreach (KeyValuePair<string, CombatantData.ColumnDef> pair3 in CombatantData.ColumnDefs)
                            {
                                if (column2.ColumnName.Equals(pair3.Value.SqlDataName, StringComparison.CurrentCultureIgnoreCase))
                                {
                                    dictionary2.Add(column2.ColumnName, pair3.Value);
                                }
                            }
                        }
                    }
                    builder.Clear();
                    num2 = 0;
                    foreach (KeyValuePair<string, CombatantData.ColumnDef> pair4 in dictionary2)
                    {
                        if (num2 == 0)
                        {
                            builder.AppendFormat("'{0}'", this.SqlSafe(pair4.Value.GetSqlData(data3)));
                        }
                        else
                        {
                            builder.AppendFormat(", '{0}'", this.SqlSafe(pair4.Value.GetSqlData(data3)));
                        }
                        num2++;
                    }
                    if (flag)
                    {
                        writer.WriteLine(string.Format("INSERT INTO combatant_table ({1}) VALUES ({0});", builder.ToString(), string.Join(",", dictionary2.Keys)));
                    }
                    else
                    {
                        list2.Add(builder.ToString());
                    }
                    if (num >= 3)
                    {
                        int num5 = -1;
                        foreach (KeyValuePair<string, DamageTypeData> pair5 in data3.Items)
                        {
                            num5++;
                            int num6 = (int) ((((float) num5) / ((float) data3.Items.Count)) * 100f);
                            ThreadInvokes.ControlSetText(this, this.ioOdbc.lblOdbcStatus, string.Format("{0}, {1}.\nGenerating SQL... {2}% | {3}%", new object[] { this.ZoneList[this.exportZdIndex].ZoneName, this.ZoneList[this.exportZdIndex].Items[this.exportEdIndex].ToString(), num4, num6 }));
                            DamageTypeData data4 = pair5.Value;
                            if (dictionary3.Count == 0)
                            {
                                selectConnection = new OdbcConnection(this.opOdbc.tbOdbcConnectionString.Text);
                                adapter = new OdbcDataAdapter("SELECT * FROM damagetype_table LIMIT 1;", selectConnection);
                                dataSet = new DataSet();
                                adapter.Fill(dataSet);
                                foreach (DataColumn column3 in dataSet.Tables[0].Columns)
                                {
                                    foreach (KeyValuePair<string, DamageTypeData.ColumnDef> pair6 in DamageTypeData.ColumnDefs)
                                    {
                                        if (column3.ColumnName.Equals(pair6.Value.SqlDataName, StringComparison.CurrentCultureIgnoreCase))
                                        {
                                            dictionary3.Add(column3.ColumnName, pair6.Value);
                                        }
                                    }
                                }
                            }
                            builder.Clear();
                            num2 = 0;
                            foreach (KeyValuePair<string, DamageTypeData.ColumnDef> pair7 in dictionary3)
                            {
                                if (num2 == 0)
                                {
                                    builder.AppendFormat("'{0}'", this.SqlSafe(pair7.Value.GetSqlData(data4)));
                                }
                                else
                                {
                                    builder.AppendFormat(", '{0}'", this.SqlSafe(pair7.Value.GetSqlData(data4)));
                                }
                                num2++;
                            }
                            if (flag)
                            {
                                writer.WriteLine(string.Format("INSERT INTO damagetype_table ({1}) VALUES ({0});", builder.ToString(), string.Join(",", dictionary3.Keys)));
                            }
                            else
                            {
                                list3.Add(builder.ToString());
                            }
                            if ((num >= 4) && ((data4.Type == str) || (data4.Type == str2)))
                            {
                                for (int j = 0; j < data4.Items.Count; j++)
                                {
                                    int num8 = (int) ((((float) j) / ((float) data4.Items.Count)) * 100f);
                                    ThreadInvokes.ControlSetText(this, this.ioOdbc.lblOdbcStatus, string.Format("{0}, {1}.\nGenerating SQL... {2}% | {3}% | {4}%", new object[] { this.ZoneList[this.exportZdIndex].ZoneName, this.ZoneList[this.exportZdIndex].Items[this.exportEdIndex].ToString(), num4, num6, num8 }));
                                    AttackType type = data4.Items.Values[j];
                                    if (dictionary4.Count == 0)
                                    {
                                        selectConnection = new OdbcConnection(this.opOdbc.tbOdbcConnectionString.Text);
                                        adapter = new OdbcDataAdapter("SELECT * FROM attacktype_table LIMIT 1;", selectConnection);
                                        dataSet = new DataSet();
                                        adapter.Fill(dataSet);
                                        foreach (DataColumn column4 in dataSet.Tables[0].Columns)
                                        {
                                            foreach (KeyValuePair<string, AttackType.ColumnDef> pair8 in AttackType.ColumnDefs)
                                            {
                                                if (column4.ColumnName.Equals(pair8.Value.SqlDataName, StringComparison.CurrentCultureIgnoreCase))
                                                {
                                                    dictionary4.Add(column4.ColumnName, pair8.Value);
                                                }
                                            }
                                        }
                                    }
                                    builder.Clear();
                                    num2 = 0;
                                    foreach (KeyValuePair<string, AttackType.ColumnDef> pair9 in dictionary4)
                                    {
                                        if (num2 == 0)
                                        {
                                            builder.AppendFormat("'{0}'", this.SqlSafe(pair9.Value.GetSqlData(type)));
                                        }
                                        else
                                        {
                                            builder.AppendFormat(", '{0}'", this.SqlSafe(pair9.Value.GetSqlData(type)));
                                        }
                                        num2++;
                                    }
                                    if (flag)
                                    {
                                        writer.WriteLine(string.Format("INSERT INTO attacktype_table ({1}) VALUES ({0});", builder.ToString(), string.Join(",", dictionary4.Keys)));
                                    }
                                    else
                                    {
                                        list4.Add(builder.ToString());
                                    }
                                    if (((num >= 5) && (data4.Type == str)) && (type.Type == ActGlobals.ActLocalization.LocalizationStrings["attackTypeTerm-all"].DisplayedText))
                                    {
                                        List<MasterSwing> list6 = new List<MasterSwing>(type.Items);
                                        for (int k = 0; k < list6.Count; k++)
                                        {
                                            MasterSwing swing = list6[k];
                                            if (dictionary5.Count == 0)
                                            {
                                                selectConnection = new OdbcConnection(this.opOdbc.tbOdbcConnectionString.Text);
                                                adapter = new OdbcDataAdapter("SELECT * FROM swing_table LIMIT 1;", selectConnection);
                                                dataSet = new DataSet();
                                                adapter.Fill(dataSet);
                                                foreach (DataColumn column5 in dataSet.Tables[0].Columns)
                                                {
                                                    foreach (KeyValuePair<string, MasterSwing.ColumnDef> pair10 in MasterSwing.ColumnDefs)
                                                    {
                                                        if (column5.ColumnName.Equals(pair10.Value.SqlDataName, StringComparison.CurrentCultureIgnoreCase))
                                                        {
                                                            dictionary5.Add(column5.ColumnName, pair10.Value);
                                                        }
                                                    }
                                                }
                                            }
                                            builder.Clear();
                                            num2 = 0;
                                            foreach (KeyValuePair<string, MasterSwing.ColumnDef> pair11 in dictionary5)
                                            {
                                                if (num2 == 0)
                                                {
                                                    builder.AppendFormat("'{0}'", this.SqlSafe(pair11.Value.GetSqlData(swing)));
                                                }
                                                else
                                                {
                                                    builder.AppendFormat(", '{0}'", this.SqlSafe(pair11.Value.GetSqlData(swing)));
                                                }
                                                num2++;
                                            }
                                            if (flag)
                                            {
                                                writer.WriteLine(string.Format("INSERT INTO swing_table ({1}) VALUES ({0});", builder.ToString(), string.Join(",", dictionary5.Keys)));
                                            }
                                            else
                                            {
                                                list5.Add(builder.ToString());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                writer.Flush();
                TimeSpan span = (TimeSpan) (DateTime.Now - now);
                ThreadInvokes.RichTextBoxAppendDateTimeLine(this, this.opOdbc.rtbOdbc, string.Format("Data calculated for {0} in {1} secs.", data2.Title, span.TotalSeconds.ToString("0")));
                if (selectConnection.State == ConnectionState.Closed)
                {
                    selectConnection.Open();
                }
                OdbcCommand command = selectConnection.CreateCommand();
                DateTime time2 = DateTime.Now;
                if (flag)
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    StreamReader reader = new StreamReader(stream);
                    int num10 = 0;
                    command.CommandText = reader.ReadLine();
                    this.lastSql = command.CommandText;
                    do
                    {
                        command.ExecuteNonQuery();
                        num10++;
                        if ((num10 % 10) == 0)
                        {
                            int num11 = (int) ((((double) stream.Position) / ((double) stream.Length)) * 100.0);
                            ThreadInvokes.ControlSetText(this, this.ioOdbc.lblOdbcStatus, string.Format("{0}, {1}.\nSending SQL to datasource... {2}%", this.ZoneList[this.exportZdIndex].ZoneName, this.ZoneList[this.exportZdIndex].Items[this.exportEdIndex].ToString(), num11));
                        }
                        command.CommandText = this.AccessSafe(selectConnection.ConnectionString, reader.ReadLine());
                        this.lastSql = command.CommandText;
                    }
                    while (!string.IsNullOrEmpty(command.CommandText));
                    span = (TimeSpan) (DateTime.Now - time2);
                    ThreadInvokes.RichTextBoxAppendDateTimeLine(this, this.opOdbc.rtbOdbc, string.Format("{0:0,0} SQL commands sent for {1} in {2} secs.", num10, data2.Title, span.TotalSeconds.ToString("0")));
                }
                else
                {
                    List<string> list7 = new List<string>();
                    int num12 = 0;
                    command.CommandTimeout = 0x3a98;
                    this.lastSql = "Block SQL sending enabled.  Please use debug mode to troubleshoot each row sent.";
                    if (tableVals.Count > 0)
                    {
                        list7.AddRange(this.BatchSqlCommands("encounter_table", string.Join(",", dictionary.Keys), tableVals, 100));
                        num12 += tableVals.Count;
                    }
                    if (list2.Count > 0)
                    {
                        list7.AddRange(this.BatchSqlCommands("combatant_table", string.Join(",", dictionary2.Keys), list2, 100));
                        num12 += list2.Count;
                    }
                    if (list3.Count > 0)
                    {
                        list7.AddRange(this.BatchSqlCommands("damagetype_table", string.Join(",", dictionary3.Keys), list3, 100));
                        num12 += list3.Count;
                    }
                    if (list4.Count > 0)
                    {
                        list7.AddRange(this.BatchSqlCommands("attacktype_table", string.Join(",", dictionary4.Keys), list4, 100));
                        num12 += list4.Count;
                    }
                    if (list5.Count > 0)
                    {
                        list7.AddRange(this.BatchSqlCommands("swing_table", string.Join(",", dictionary5.Keys), list5, 100));
                        num12 += list5.Count;
                    }
                    for (int m = 0; m < list7.Count; m++)
                    {
                        int num14 = (int) ((((float) m) / ((float) list7.Count)) * 100f);
                        ThreadInvokes.ControlSetText(this, this.ioOdbc.lblOdbcStatus, string.Format("{0}, {1}.\nSending SQL to datasource... {2}%", this.ZoneList[this.exportZdIndex].ZoneName, this.ZoneList[this.exportZdIndex].Items[this.exportEdIndex].ToString(), num14));
                        command.CommandText = this.AccessSafe(selectConnection.ConnectionString, list7[m]);
                        this.lastSql = command.CommandText;
                        command.ExecuteNonQuery();
                    }
                    object[] args = new object[4];
                    args[0] = num12;
                    args[1] = list7.Count;
                    args[2] = data2.Title;
                    span = (TimeSpan) (DateTime.Now - time2);
                    args[3] = span.TotalSeconds.ToString("0");
                    ThreadInvokes.RichTextBoxAppendDateTimeLine(this, this.opOdbc.rtbOdbc, string.Format("{0:0,0} rows sent in {1} commands for {2} in {3} secs.", args));
                }
            }
            catch (OdbcException exception)
            {
                if (exception.Message.Contains("10060"))
                {
                    this.exportError = 0x274c;
                }
                else
                {
                    this.exportError = 1;
                }
                ThreadInvokes.RichTextBoxAppendDateTimeLine(this, this.opOdbc.rtbOdbc, exception.Message);
                this.WriteExceptionLog(exception, this.lastSql);
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, string.Empty);
                this.exportError = 2;
            }
            finally
            {
                this.odbcThreadAlive = false;
            }
            if (!this.exportThreadAlive)
            {
                this.ExportBeep();
            }
        }

        private void ThreadSoloSamples(object CombatantSource)
        {
            this.graphingThreadAlive = true;
            this.pbDG.Image = this.GenerateCombatantGraph((CombatantData) CombatantSource, this.pbDG.Width - 4, this.pbDG.Height - 4);
            this.graphingThreadAlive = false;
        }

        private void ThreadSpellTimersServer()
        {
            DateTime minValue = DateTime.MinValue;
            int port = (int) this.opWebServer.nudWebServerPort.Value;
            TcpListener listener = new TcpListener(IPAddress.Any, port);
            try
            {
                listener.Start();
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message, this.Trans["messageBoxTitle-serverStartError"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
            }
            try
            {
                while (this.opWebServer.cbWebServerEnabled.Checked)
                {
                    if (listener.Pending())
                    {
                        Socket connectedSocket = listener.AcceptSocket();
                        this.webConnections.Add(new ActWebConnection(connectedSocket));
                    }
                    else
                    {
                        Thread.Sleep(10);
                    }
                    if ((DateTime.Now - minValue) >= TimeSpan.FromMilliseconds(100.0))
                    {
                        minValue = DateTime.Now;
                        this.UpdateWebConnectionTimers();
                    }
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, string.Empty);
            }
            finally
            {
                listener.Stop();
                for (int i = 0; i < this.webConnections.Count; i++)
                {
                    this.webConnections[i].Dispose();
                }
                this.webConnections.Clear();
                ThreadInvokes.ControlSetText(this, this.opWebServer.lblWebServerConnections, "Server Status");
                ThreadInvokes.CheckboxSetChecked(this, this.opWebServer.cbWebServerEnabled, false);
            }
        }

        private void tmrTen_Tick(object sender, EventArgs e)
        {
            try
            {
                dW.Flush();
                if (this.curLogPos <= this.oldLogPos)
                {
                    if (ActGlobals.charName != "YOU")
                    {
                        this.logActiveText = " - (" + ActGlobals.charName + ") Log Idle";
                    }
                    else
                    {
                        this.logActiveText = " - Log Idle";
                    }
                }
                this.oldLogPos = this.curLogPos;
                foreach (TabPage page in this.tcTriggers.TabPages)
                {
                    if (page.Tag != null)
                    {
                        CustomTrigger tag = (CustomTrigger) page.Tag;
                        page.ImageIndex = tag.TabbedAge;
                        tag.TabbedAge++;
                    }
                }
                if (this.opWebServer.cbWebServerEnabled.Checked)
                {
                    ActWebConnection.UpdateStats(10);
                    this.opWebServer.lblWebServerConnections.Text = string.Format("Session stats | During the last 10s\r\n{0:#,0} bytes in | {3:0.00} KB/s in\r\n{1:#,0} bytes out | {4:0.00} KB/s out\r\n{2} unique clients | {5} unique clients", new object[] { ActWebConnection.IncomingBytes, ActWebConnection.OutgoingBytes, ActWebConnection.TotalClients, ActWebConnection.LastIncomingKBps, ActWebConnection.LastOutgoingKBps, ActWebConnection.LastClients });
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void tmrTenths_Tick(object sender, EventArgs e)
        {
            try
            {
                if (((this.logStream != null) && this.readThreadAlive) && !ActGlobals.oFormActMain.opMisc.cbbPauseLog.Checked)
                {
                    try
                    {
                        string str = string.Empty;
                        long num = this.logStream.Length - this.logStream.Position;
                        if (num > 0)
                        {
                            str = string.Format("Reading {0}\nAt position: {1:0,0}. ({2} behind.)", this.logFilePath, this.logStream.Position, num);
                            this.readThreadDataAvailable = true;
                        }
                        else
                        {
                            str = string.Format("Reading {0}\nAt position: {1:0,0}.", this.logFilePath, this.logStream.Position);
                        }
                        if (ActGlobals.oFormActMain.opMisc.lblLogFile.Text != str)
                        {
                            ActGlobals.oFormActMain.opMisc.lblLogFile.Text = str;
                        }
                    }
                    catch
                    {
                        this.readThreadDataAvailable = true;
                    }
                }
            }
            catch
            {
            }
        }

        private void tmrTick_Tick(object sender, EventArgs e)
        {
            this.readThreadDataAvailable = true;
            if (this.selectiveListRebuild)
            {
                this.selectiveListRebuild = false;
                this.opSelectiveParsing.SelectiveListUpdate();
            }
            if (this.rebuildActiveCustomTriggers)
            {
                this.RebuildActiveCustomTriggers();
                this.rebuildActiveCustomTriggers = false;
            }
            if (this.rebuildCustomTriggerTreeView)
            {
                this.RebuildCustomTriggerTreeView();
                this.rebuildCustomTriggerTreeView = false;
            }
            if (this.triggerOpenLog)
            {
                this.triggerOpenLog = false;
                this.OpenLog(true, true);
            }
            if (!this.lastEstimatedUpdated)
            {
                this.lastEstimatedTime += TimeSpan.FromSeconds(1.0);
            }
            this.lastEstimatedUpdated = false;
            try
            {
                this.cbbMiniParse.Checked = ActGlobals.oFormMiniParse.Visible;
                this.cbbShowTimers.Checked = ActGlobals.oFormSpellTimersPanel.Visible;
                ActGlobals.oFormActMain.opMisc.cbbPauseLog.Checked = this.readThreadLock;
                if (this.readThreadLock)
                {
                    ActGlobals.oFormActMain.opMisc.lblLogFile.Text = "Parsing Paused...";
                }
                if (this.resizeColumns)
                {
                    this.resizeColumns = false;
                    this.lvDG.XPBeginUpdate();
                    this.ResizeLVCols(this.lvDG);
                    this.lvDG.XPEndUpdate();
                }
                if (ActGlobals.oFormMiniParse.formatIndex > -1)
                {
                    this.opMiniParse.ddlMiniFormat.SelectedIndex = ActGlobals.oFormMiniParse.formatIndex;
                    ActGlobals.oFormMiniParse.formatIndex = -1;
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "1");
            }
            try
            {
                if (this.switchToLogLabel)
                {
                    this.switchToLogLabel = false;
                    this.tc1.SelectedIndex = 1;
                    this.opMisc.gbFile.BackColor = System.Drawing.Color.Salmon;
                    if (!this.flpOptionControls.Controls.Contains(this.opMisc))
                    {
                        this.flpOptionControls.Controls.Clear();
                        this.flpOptionControls.Controls.Add(this.opMisc);
                    }
                }
                if (this.importThreadAlive)
                {
                    this.ioImportClip.btnImportClip.Enabled = false;
                    this.ioImportLog.btnImportFile.Enabled = false;
                    this.btnRecordsImport.Enabled = false;
                }
                else
                {
                    if (!this.ioImportClip.btnImportClip.Enabled)
                    {
                        this.SetCharName(true);
                    }
                    this.ioImportClip.btnImportClip.Enabled = true;
                    this.ioImportLog.btnImportFile.Enabled = true;
                    this.btnRecordsImport.Enabled = true;
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, "2");
            }
            try
            {
                if (this.opFileHTML.cbHtmlTimers.Checked)
                {
                    this.GenerateCurrentTimers();
                }
                if (this.opLcdGeneral.cbLcdEnabled.Checked)
                {
                    this.UpdateLcd("Spell Timers", false);
                }
            }
            catch (Exception exception3)
            {
                this.WriteExceptionLog(exception3, "3");
            }
            try
            {
                if ((this.opMainTableGen.cbIdleEnd.Checked && this.opMainTableGen.cbIdleTimerEnd.Checked) && (this.inCombat && !this.readThreadLock))
                {
                    this.idleCounter++;
                    if (this.idleCounter > (((int) this.opMainTableGen.nudIdleLimit.Value) + 2))
                    {
                        this.EndCombat(true);
                    }
                }
                string str = string.Empty;
                if (this.inCombat)
                {
                    str = "*Combat* ";
                    ActGlobals.oFormMiniParse.Text = "Mini Parse - *Combat*";
                    this.lblDG.BackColor = System.Drawing.Color.DarkOrange;
                    ActGlobals.oFormMiniParse.BackColor = this.opMiniParse.fccMiniParse.BackColorSetting;
                    this.notifyIcon1.Icon = this.cIcon;
                    this.globalTicks++;
                    if (((this.opMainTableGen.nudUpdateValue.Value != 0M) && !this.cbLockDG.Checked) && ((this.globalTicks % ((int) this.opMainTableGen.nudUpdateValue.Value)) == 0))
                    {
                        this.updateDataGrid = true;
                        this.updateEncGraph = true;
                    }
                    this.refreshCurGraphTicks++;
                    if (this.refreshCurGraphTicks > ((int) this.opFileHTML.nudCGraphDelay.Value))
                    {
                        this.refreshCurGraphTicks = 0;
                        if (((this.opFileHTML.nudCGraphDelay.Value > 0M) && (this.opFileHTML.cbCurrentGraph.Checked || this.opFileHTML.cbCurrentTable.Checked)) && !this.importThreadAlive)
                        {
                            this.GenerateCurrentGraph();
                        }
                    }
                    this.refreshCurOdbcTicks++;
                    if (this.refreshCurOdbcTicks > ((int) this.opOdbc.nudCOdbcDelay.Value))
                    {
                        this.refreshCurOdbcTicks = 0;
                        if ((this.opOdbc.cbCurrentOdbc.Checked && (this.opOdbc.nudCOdbcDelay.Value > 0M)) && !this.importThreadAlive)
                        {
                            this.GenerateCurrentOdbc();
                        }
                    }
                    if ((!this.importThreadAlive && this.opLcdGeneral.cbLcdEnabled.Checked) && ((this.globalTicks % ((int) this.opMiniParse.nudMiniUpdateInterval.Value)) == 0))
                    {
                        this.UpdateLcd("Mini Window", false);
                        this.UpdateLcd("Sort Bars", false);
                        this.UpdateLcd("Personal Stats", false);
                    }
                    if ((!this.importThreadAlive && ActGlobals.oFormMiniParse.Visible) && ((this.globalTicks % ((int) this.opMiniParse.nudMiniUpdateInterval.Value)) == 0))
                    {
                        this.UpdateMiniEnc();
                    }
                }
                else
                {
                    str = string.Empty;
                    ActGlobals.oFormMiniParse.Text = "Mini Parse";
                    ActGlobals.oFormMiniParse.BackColor = SystemColors.GrayText;
                    if (this.lblDG.BackColor != System.Drawing.Color.LightSteelBlue)
                    {
                        this.lblDG.BackColor = System.Drawing.Color.LightSteelBlue;
                        this.notifyIcon1.Icon = this.nIcon;
                    }
                }
                if ((this.refreshTree && (base.WindowState != FormWindowState.Minimized)) && !this.importThreadAlive)
                {
                    this.PopulateTView();
                }
                if (this.updateEncGraph && (this.tableType == "ED"))
                {
                    this.updateEncGraph = false;
                    FormWindowState windowState = base.WindowState;
                }
                if (this.updateDataGrid)
                {
                    this.tv1_AfterSelect(sender, new TreeViewEventArgs(this.tvDG.SelectedNode, TreeViewAction.Unknown));
                    this.updateDataGrid = false;
                }
                if (this.curLogPos > this.oldLogPos)
                {
                    if (ActGlobals.charName != "YOU")
                    {
                        this.logActiveText = " - (" + ActGlobals.charName + ") Log Active";
                    }
                    else
                    {
                        this.logActiveText = " - Log Active";
                    }
                }
                bool flag = false;
                string str2 = string.Empty;
                if ((this.importThread != null) && this.importThread.IsAlive)
                {
                    flag = true;
                }
                if ((this.exportThread != null) && this.exportThread.IsAlive)
                {
                    flag = true;
                }
                if ((this.odbcThread != null) && this.odbcThread.IsAlive)
                {
                    flag = true;
                }
                if ((this.actFileThread != null) && this.actFileThread.IsAlive)
                {
                    flag = true;
                }
                if (this.exportThreadAlive)
                {
                    str2 = str2 + "[Exporting] ";
                    flag = true;
                }
                if (this.importThreadAlive)
                {
                    str2 = str2 + "[Importing] ";
                    flag = true;
                }
                if (this.odbcThreadAlive)
                {
                    str2 = str2 + "[ODBC] ";
                    flag = true;
                }
                if (flag && (this.Cursor == Cursors.Default))
                {
                    this.Cursor = Cursors.AppStarting;
                }
                if (!flag && (this.Cursor == Cursors.AppStarting))
                {
                    this.Cursor = Cursors.Default;
                }
                this.Text = string.Format("{0}{1}Advanced Combat Tracker{2} - {3} - Log Time: {4} (Est. {5})", new object[] { str2, str, this.logActiveText, this.currentZone, this.LastKnownTime.ToLongTimeString(), this.LastEstimatedTime.ToLongTimeString() });
            }
            catch (Exception exception4)
            {
                this.WriteExceptionLog(exception4, "4");
            }
            try
            {
                foreach (TabPage page in this.tcTriggers.TabPages)
                {
                    if (page.Tag != null)
                    {
                        CustomTrigger tag = (CustomTrigger) page.Tag;
                        if (page.ImageIndex != tag.TabbedAge)
                        {
                            page.ImageIndex = tag.TabbedAge;
                        }
                    }
                }
            }
            catch (Exception exception5)
            {
                this.WriteExceptionLog(exception5, "5");
            }
        }

        private bool TreeViewIsActiveEncounter()
        {
            ZoneData data = null;
            EncounterData data2 = null;
            switch (this.tableType)
            {
                case "EL":
                    return false;

                case "ED":
                    data = this.zoneList[this.tvDG.SelectedNode.Parent.Index];
                    data2 = data.Items[this.tvDG.SelectedNode.Index];
                    break;

                case "CD":
                    data = this.zoneList[this.tvDG.SelectedNode.Parent.Parent.Index];
                    data2 = data.Items[this.tvDG.SelectedNode.Parent.Index];
                    break;

                case "MD":
                    data = this.zoneList[this.tvDG.SelectedNode.Parent.Parent.Parent.Index];
                    data2 = data.Items[this.tvDG.SelectedNode.Parent.Parent.Index];
                    break;

                case "AT":
                    data = this.zoneList[this.tvDG.SelectedNode.Parent.Parent.Parent.Parent.Index];
                    data2 = data.Items[this.tvDG.SelectedNode.Parent.Parent.Parent.Index];
                    break;
            }
            return (data2 == this.ActiveZone.ActiveEncounter);
        }

        public void TTS(string SpeechText)
        {
            try
            {
                SpeechSynthesizer synthesizer = new SpeechSynthesizer();
                string path = Path.Combine(Path.GetTempPath(), "AdvancedCombatTracker", DateTime.Now.ToBinary().ToString() + "sapi.wav");
                FileStream audioDestination = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite);
                audioDestination.SetLength(0);
                synthesizer.SetOutputToWaveStream(audioDestination);
                synthesizer.Speak(SpeechText);
                audioDestination.Flush();
                audioDestination.Close();
                this.PlaySound(path);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, "TTS");
            }
        }

        private void tv1_AfterCheck(object sender, TreeViewEventArgs e)
        {
            if (e.Action != TreeViewAction.Unknown)
            {
                e.Node.Expand();
                for (int i = 0; i < e.Node.Nodes.Count; i++)
                {
                    TreeNode node = e.Node.Nodes[i];
                    if ((i != 0) || ((node.Parent != null) && !this.zoneList[node.Parent.Index].PopulateAll))
                    {
                        node.Checked = e.Node.Checked;
                    }
                }
            }
        }

        private void tv1_AfterExpand(object sender, TreeViewEventArgs e)
        {
            this.PopulateTView();
        }

        private void tv1_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if ((e.Node != null) && ((this.lastSelectedNode != e.Node) || this.TreeViewIsActiveEncounter()))
            {
                this.lastSelectedNode = e.Node;
                try
                {
                    if (this.graphingThreadAlive)
                    {
                        this.graphingThread.Abort();
                    }
                    this.graphingThreadAlive = false;
                }
                catch
                {
                }
                this.lvDG.XPBeginUpdate();
                try
                {
                    ZoneData data;
                    AttackType type;
                    this.iListViewItems.Clear();
                    this.cListViewItems.Clear();
                    string tag = (string) e.Node.Tag;
                    string str2 = tag;
                    if (str2 == null)
                    {
                        return;
                    }
                    if (!(str2 == "ZoneData"))
                    {
                        if (str2 != "EncounterData")
                        {
                            if (str2 == "CombatantData")
                            {
                                goto Label_01F0;
                            }
                            if (str2 == "DamageTypeData")
                            {
                                goto Label_02AE;
                            }
                            if (str2 != "AttackType")
                            {
                                return;
                            }
                            goto Label_03DA;
                        }
                    }
                    else
                    {
                        this.tableType = "EL";
                        this.lvDG.ContextMenuStrip = this.cmsEList;
                        data = this.zoneList[e.Node.Index];
                        this.currentTable = data.Items;
                        goto Label_0526;
                    }
                    this.tableType = "ED";
                    this.lvDG.ContextMenuStrip = this.cmsEDSort;
                    data = this.zoneList[e.Node.Parent.Index];
                    EncounterData encounterSource = data.Items[e.Node.Index];
                    List<CombatantData> list = new List<CombatantData>(encounterSource.Items.Values);
                    this.currentTable = list;
                    try
                    {
                        list.Sort();
                        if (this.opMainTableGen.cbReverseSort.Checked)
                        {
                            list.Reverse();
                        }
                    }
                    catch (Exception exception)
                    {
                        this.WriteExceptionLog(exception, string.Empty);
                    }
                    if (e.Action == TreeViewAction.Expand)
                    {
                        goto Label_0526;
                    }
                    try
                    {
                        if (this.cmiEnabled.Checked)
                        {
                            this.StartEncThread(encounterSource);
                        }
                        this.updateEncGraph = false;
                        goto Label_0526;
                    }
                    catch
                    {
                        goto Label_0526;
                    }
                Label_01F0:
                    this.tableType = "CD";
                    this.lvDG.ContextMenuStrip = this.cmsCDSort;
                    data = this.zoneList[e.Node.Parent.Parent.Index];
                    encounterSource = data.Items[e.Node.Parent.Index];
                    list = new List<CombatantData>(encounterSource.Items.Values);
                    CombatantData combatant = encounterSource.GetCombatant(e.Node.Text);
                    List<DamageTypeData> list2 = new List<DamageTypeData>(combatant.Items.Values);
                    this.currentTable = list2;
                    if ((e.Action != TreeViewAction.Expand) && this.cmiEnabled.Checked)
                    {
                        this.StartSoloThread(combatant);
                    }
                    goto Label_0526;
                Label_02AE:
                    this.tableType = "MD";
                    this.lvDG.ContextMenuStrip = this.cmsMDSort;
                    data = this.zoneList[e.Node.Parent.Parent.Parent.Index];
                    encounterSource = data.Items[e.Node.Parent.Parent.Index];
                    DamageTypeData damageTypeSource = encounterSource.GetCombatant(e.Node.Parent.Text).Items[e.Node.Text];
                    List<AttackType> list3 = new List<AttackType>(damageTypeSource.Items.Values);
                    this.currentTable = list3;
                    try
                    {
                        list3.Sort();
                        if (this.opMainTableGen.cbReverseSort.Checked)
                        {
                            list3.Reverse();
                        }
                    }
                    catch (Exception exception2)
                    {
                        this.WriteExceptionLog(exception2, string.Empty);
                    }
                    if (this.cmiEnabled.Checked)
                    {
                        this.pbDG.Image = this.GenerateDamageTypeGraph(damageTypeSource, this.pbDG.Width - 4, this.pbDG.Height - 4, ActGlobals.mDSort);
                    }
                    goto Label_0526;
                Label_03DA:
                    this.tableType = "AT";
                    this.lvDG.ContextMenuStrip = this.cmsATSort;
                    data = this.zoneList[e.Node.Parent.Parent.Parent.Parent.Index];
                    encounterSource = data.Items[e.Node.Parent.Parent.Parent.Index];
                    damageTypeSource = encounterSource.GetCombatant(e.Node.Parent.Parent.Text).Items[e.Node.Parent.Text];
                    damageTypeSource.Items.TryGetValue(e.Node.Text, out type);
                    List<MasterSwing> items = type.Items;
                    this.currentTable = items;
                    try
                    {
                        items.Sort();
                        if (this.opMainTableGen.cbReverseSort.Checked)
                        {
                            items.Reverse();
                        }
                    }
                    catch (Exception exception3)
                    {
                        this.WriteExceptionLog(exception3, string.Empty);
                    }
                    if (this.cmiEnabled.Checked)
                    {
                        this.pbDG.Image = this.GenerateAttackTypeGraph(type, this.pbDG.Width - 4, this.pbDG.Height - 4, "Time");
                    }
                Label_0526:
                    this.PopulateLV();
                    ThreadInvokes.ControlSetText(this, this.lblDG, e.Node.FullPath);
                    this.ResizeLVCols(this.lvDG);
                }
                catch (Exception exception4)
                {
                    this.WriteExceptionLog(exception4, string.Empty);
                }
                this.lvDG.XPEndUpdate();
            }
        }

        private void tv1_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Right)
                {
                    TreeNode nodeAt = this.tvDG.GetNodeAt(e.X, e.Y);
                    this.tvDG.SelectedNode = nodeAt;
                }
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void tvCustomTriggers_AfterCheck(object sender, TreeViewEventArgs e)
        {
            try
            {
                string tag = (string) e.Node.Tag;
                if (tag == "Category")
                {
                    foreach (TreeNode node in e.Node.Nodes)
                    {
                        node.Checked = e.Node.Checked;
                    }
                }
                else if (this.customTriggers.ContainsKey(tag))
                {
                    CustomTrigger trigger = this.customTriggers[tag];
                    trigger.Active = e.Node.Checked;
                    if (e.Node.Checked)
                    {
                        char[] trimChars = new char[] { ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
                        if ((!trigger.RestrictToCategoryZone || (this.CurrentZone.TrimEnd(trimChars) == trigger.Category)) && trigger.Active)
                        {
                            e.Node.BackColor = System.Drawing.Color.LightGreen;
                        }
                        else
                        {
                            e.Node.BackColor = System.Drawing.Color.LightPink;
                        }
                        if (!this.activeCustomTriggers.ContainsKey(trigger.Key))
                        {
                            this.activeCustomTriggers.Add(trigger.Key, trigger);
                        }
                    }
                    else
                    {
                        e.Node.BackColor = System.Drawing.Color.LightPink;
                        if (this.activeCustomTriggers.ContainsKey(trigger.Key))
                        {
                            this.activeCustomTriggers.Remove(trigger.Key);
                        }
                    }
                }
            }
            catch
            {
            }
        }

        private void tvCustomTriggers_AfterSelect(object sender, TreeViewEventArgs e)
        {
            try
            {
                string tag = (string) e.Node.Tag;
                if ((tag != "Category") && this.customTriggers.ContainsKey(tag))
                {
                    CustomTrigger trigger = this.customTriggers[tag];
                    this.tbTriggerText.Text = trigger.ShortRegexString;
                    this.tbSndTrigger.Text = trigger.SoundData;
                    this.tbTriggerTimer.Text = trigger.TimerName;
                    this.cbTriggerTimer.Checked = trigger.Timer;
                    switch (trigger.SoundType)
                    {
                        case 0:
                            this.rbSndTriggerNone.Checked = true;
                            break;

                        case 1:
                            this.rbSndTriggerBeep.Checked = true;
                            break;

                        case 2:
                            this.rbSndTriggerWAV.Checked = true;
                            break;

                        case 3:
                            this.rbSndTriggerTTS.Checked = true;
                            break;
                    }
                    this.cbTriggerTabbed.Checked = trigger.Tabbed;
                    this.cbTriggerCategoryRestrict.Checked = trigger.RestrictToCategoryZone;
                    this.tbTriggerCategory.Text = trigger.Category;
                }
            }
            catch
            {
            }
        }

        private void tvCustomTriggers_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Right)
                {
                    TreeNode nodeAt = this.tvCustomTriggers.GetNodeAt(e.X, e.Y);
                    this.tvCustomTriggers.SelectedNode = nodeAt;
                }
            }
            catch
            {
            }
        }

        private void tvIo_AfterSelect(object sender, TreeViewEventArgs e)
        {
            this.flpIoControls.Controls.Clear();
            if ((e.Node != null) && this.ioControlSets.ContainsKey(e.Node.FullPath))
            {
                foreach (Control control in this.ioControlSets[e.Node.FullPath])
                {
                    this.flpIoControls.Controls.Add(control);
                    this.controlIO_MouseHover(control, new EventArgs());
                }
                this.flpIoControls.Controls.Add(this.gbIoHelp);
            }
        }

        private void tvOptions_AfterSelect(object sender, TreeViewEventArgs e)
        {
            this.flpOptionControls.Controls.Clear();
            if ((e.Node != null) && this.optionsControlSets.ContainsKey(e.Node.FullPath))
            {
                foreach (Control control in this.optionsControlSets[e.Node.FullPath])
                {
                    this.flpOptionControls.Controls.Add(control);
                    this.control_MouseHover(control, new EventArgs());
                }
                this.flpOptionControls.Controls.Add(this.gbHelp);
            }
        }

        private bool UIExport(string eqDirVar, string skinSubdirVar, string skinNameVar)
        {
            DirectoryInfo info = new DirectoryInfo(eqDirVar + @"\" + skinSubdirVar + @"\" + skinNameVar);
            try
            {
                if (!info.Exists)
                {
                    info.Create();
                }
            }
            catch (Exception exception)
            {
                MessageBox.Show("Could not create " + info.FullName + ".\n" + exception.Message, "Unable to continue", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                this.WriteExceptionLog(exception, "Could not create " + info.FullName + ".");
                return false;
            }
            try
            {
                this.SendResourceToFile("eq2ui_mainhud_browser.xml", string.Format(@"{0}\eq2ui_mainhud_browser.xml", info.FullName));
            }
            catch (Exception exception2)
            {
                MessageBox.Show("Could not create " + string.Format(@"{0}\eq2ui_mainhud_browser.xml", info.FullName) + ".\n" + exception2.Message, "Unable to continue", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                this.WriteExceptionLog(exception2, "Could not create " + string.Format(@"{0}\eq2ui_mainhud_browser.xml", info.FullName) + ".");
                return false;
            }
            return true;
        }

        internal void UIFix(bool replaceHomepage, bool exportXml)
        {
            bool flag = false;
            string fullName = string.Empty;
            try
            {
                RegistryKey key = Registry.LocalMachine.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\App Paths\EverQuest2.exe");
                if (key == null)
                {
                    key = Registry.LocalMachine.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\App Paths\LaunchPad.exe");
                }
                if (key != null)
                {
                    fullName = key.GetValue("Path").ToString();
                }
            }
            catch
            {
            }
            DirectoryInfo info = new DirectoryInfo(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), @"Sony Online Entertainment\Installed Games\EverQuest II Streaming"));
            if (info.Exists)
            {
                FileInfo info2 = new FileInfo(Path.Combine(info.FullName, "EverQuest2.exe"));
                if (info2.Exists)
                {
                    fullName = info.FullName;
                }
            }
            if (string.IsNullOrWhiteSpace(fullName))
            {
                if (MessageBox.Show(this.Trans["messageBox-selectEq2Path"].DisplayedText, this.Trans["messageBoxTitle-selectEq2Path"].DisplayedText, MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == DialogResult.Cancel)
                {
                    return;
                }
            }
            else
            {
                flag = true;
            }
            while (!flag)
            {
                FolderBrowserDialog dialog = new FolderBrowserDialog {
                    Description = "Select your EQ2 installation folder",
                    ShowNewFolderButton = false
                };
                if (dialog.ShowDialog() == DialogResult.Cancel)
                {
                    return;
                }
                fullName = dialog.SelectedPath;
                FileInfo info3 = new FileInfo(dialog.SelectedPath + @"\EverQuest2.exe");
                if (info3.Exists)
                {
                    flag = true;
                }
                else
                {
                    switch (MessageBox.Show(this.Trans["messageBox-eq2NotFound"].DisplayedText, this.Trans["messageBoxTitle-eq2NotFound"].DisplayedText, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Exclamation))
                    {
                        case DialogResult.Abort:
                            return;

                        case DialogResult.Ignore:
                            flag = true;
                            break;
                    }
                }
            }
            StringBuilder builder = new StringBuilder();
            List<string> list = new List<string>();
            string str2 = (this.htmlDir.FullName + "/html/index.html").Replace(" ", "%20").Replace(@"\", "/");
            str2 = "cl_browser_homepage file:///" + str2;
            DirectoryInfo info4 = new DirectoryInfo(fullName);
            FileInfo info5 = new FileInfo(info4.FullName + @"\eq2.ini");
            FileStream stream = null;
            int index = -1;
            Regex regex = new Regex("cl_ui_skinname (.+)", RegexOptions.Singleline | RegexOptions.IgnoreCase);
            Regex regex2 = new Regex("cl_ui_subdir (.+)/?", RegexOptions.Singleline | RegexOptions.IgnoreCase);
            Regex regex3 = new Regex("cl_browser_homepage (.+)", RegexOptions.Singleline | RegexOptions.IgnoreCase);
            builder.AppendLine(string.Format("EQ2 Folder is: {0}", info4.FullName));
            if (info5.Exists)
            {
                builder.AppendLine("eq2.ini found.");
                stream = new FileStream(info5.FullName, FileMode.Open, FileAccess.ReadWrite);
                StreamReader reader = new StreamReader(stream);
                int num2 = 0;
                while (num2 < 100)
                {
                    string str3 = reader.ReadLine();
                    if (string.IsNullOrEmpty(str3))
                    {
                        num2++;
                    }
                    else
                    {
                        list.Add(str3);
                    }
                }
                int num3 = -1;
                int num4 = -1;
                for (int j = 0; j < list.Count; j++)
                {
                    if (regex3.IsMatch(list[j]))
                    {
                        index = j;
                    }
                    if (exportXml && regex.IsMatch(list[j]))
                    {
                        num3 = j;
                    }
                    if (exportXml && regex2.IsMatch(list[j]))
                    {
                        num4 = j;
                    }
                }
                if (exportXml)
                {
                    if (num3 == -1)
                    {
                        list.Add("cl_ui_skinname ACT");
                        num3 = list.Count - 1;
                    }
                    if (num4 == -1)
                    {
                        list.Add("cl_ui_subdir UI/");
                        num4 = list.Count - 1;
                    }
                    string skinSubdirVar = regex2.Replace(list[num4], "$1");
                    string skinNameVar = regex.Replace(list[num3], "$1");
                    if (!this.UIExport(info4.FullName, skinSubdirVar, skinNameVar))
                    {
                        return;
                    }
                    builder.AppendLine(string.Format(@"UI Folder: {0}\{1}", skinSubdirVar.Trim(new char[] { '/', '\\' }), skinNameVar));
                    builder.AppendLine("Extracted eq2ui_mainhud_browser.xml");
                }
            }
            else
            {
                stream = new FileStream(info5.FullName, FileMode.Create, FileAccess.ReadWrite);
                if (exportXml)
                {
                    list.Add("cl_ui_skinname ACT");
                    list.Add("cl_ui_subdir UI/");
                    if (!this.UIExport(info4.FullName, "UI", "ACT"))
                    {
                        return;
                    }
                    builder.AppendLine(@"UI Folder: UI\ACT");
                    builder.AppendLine("Extracted eq2ui_mainhud_browser.xml");
                }
            }
            if (index > -1)
            {
                list.RemoveAt(index);
                builder.AppendLine("eq2.ini -> cl_browser_homepage UNSET");
            }
            stream.Seek(0, SeekOrigin.Begin);
            stream.SetLength(0);
            StreamWriter writer = new StreamWriter(stream);
            for (int i = 0; i < list.Count; i++)
            {
                writer.WriteLine(list[i]);
            }
            writer.Flush();
            writer.Close();
            info5 = new FileInfo(info4.FullName + @"\eq2_recent.ini");
            stream = null;
            writer = null;
            index = -1;
            if (info5.Exists && replaceHomepage)
            {
                stream = new FileStream(info5.FullName, FileMode.Open, FileAccess.ReadWrite);
                StreamReader reader2 = new StreamReader(stream);
                int num7 = 0;
                list.Clear();
                while (num7 < 100)
                {
                    string str6 = reader2.ReadLine();
                    if (string.IsNullOrEmpty(str6))
                    {
                        num7++;
                    }
                    else
                    {
                        list.Add(str6);
                    }
                }
                for (int k = 0; k < list.Count; k++)
                {
                    if (regex3.IsMatch(list[k]))
                    {
                        index = k;
                    }
                }
                if (index > -1)
                {
                    builder.AppendLine("eq2_recent.ini setting found.");
                    list[index] = str2;
                    builder.AppendLine("eq2_recent.ini -> cl_browser_homepage set");
                    stream.Seek(0, SeekOrigin.Begin);
                    stream.SetLength(0);
                    writer = new StreamWriter(stream);
                    for (int m = 0; m < list.Count; m++)
                    {
                        writer.WriteLine(list[m]);
                    }
                    writer.Flush();
                    writer.Close();
                }
                else
                {
                    builder.AppendLine("eq2_recent.ini -> cl_browser_homepage set");
                    stream.Seek(0, SeekOrigin.Begin);
                    stream.SetLength(0);
                    writer = new StreamWriter(stream);
                    for (int n = 0; n < list.Count; n++)
                    {
                        writer.WriteLine(list[n]);
                    }
                    writer.WriteLine(str2);
                    writer.Flush();
                    writer.Close();
                }
            }
            builder.AppendLine("\nOperation Complete. Type \"/browser\" in-game to show the web browser.");
            MessageBox.Show(builder.ToString(), this.Trans["messageBoxTitle-complete"].DisplayedText, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }

        public List<FileInfo> UnZip(string ZipArchive, string DestinationFolder)
        {
            ZipEntry entry;
            List<FileInfo> list = new List<FileInfo>();
            FileStream baseInputStream = new FileStream(ZipArchive, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            ZipInputStream stream2 = new ZipInputStream(baseInputStream);
            while ((entry = stream2.GetNextEntry()) != null)
            {
                string fileName = Path.GetFileName(entry.Name);
                Directory.CreateDirectory(DestinationFolder + @"\" + Path.GetDirectoryName(entry.Name));
                if (fileName != string.Empty)
                {
                    int num;
                    FileStream stream3 = new FileStream(DestinationFolder + @"\" + entry.Name, FileMode.Create, FileAccess.Write);
                    byte[] buffer = new byte[0x1000];
                    do
                    {
                        num = stream2.Read(buffer, 0, buffer.Length);
                        stream3.Write(buffer, 0, num);
                    }
                    while (num > 0);
                    stream3.Close();
                    list.Add(new FileInfo(DestinationFolder + @"\" + entry.Name));
                }
            }
            stream2.Close();
            baseInputStream.Close();
            return list;
        }

        public void UpdateLcd(string ModeString, bool ActHighPriority)
        {
            try
            {
                if (((this.lcdDevice != null) && !this.lcdDevice.IsDisposed) || (this.opLcdGeneral.cbLcdRoute.Checked && this.opLcdGeneral.cbLcdRoute.Enabled))
                {
                    LcdUpdateEventArgs lcdInfo = new LcdUpdateEventArgs {
                        LcdType = this.lcdDeviceType
                    };
                    if ((this.LcdUpdate != null) && ((this.LcdCurrentMode == ModeString) || ActHighPriority))
                    {
                        this.LcdUpdate(ModeString, lcdInfo);
                    }
                    if (lcdInfo.LcdBitmap == null)
                    {
                        return;
                    }
                    if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                    {
                        this.opLcdMono.pbLcd.Image = lcdInfo.LcdBitmap;
                    }
                    else
                    {
                        this.opLcdColor.pbColorLcd.Image = lcdInfo.LcdBitmap;
                    }
                    if (this.opLcdGeneral.cbLcdRoute.Checked && this.opLcdGeneral.cbLcdRoute.Enabled)
                    {
                        try
                        {
                            if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                            {
                                byte[] lcdData = this.LcdGetMonoView(lcdInfo.LcdBitmap, lcdInfo.BitmapYOffset);
                                this.LcdSendToSharer(lcdData);
                            }
                            else
                            {
                                byte[] buffer2 = this.LcdGetColorView(lcdInfo.LcdBitmap, lcdInfo.BitmapYOffset);
                                this.LcdSendToSharer(buffer2);
                            }
                        }
                        catch (Exception exception)
                        {
                            this.UpdateLcdStatus(exception.Message, true);
                        }
                    }
                    else if (this.lcdDeviceType == LcdDeviceType.Monochrome)
                    {
                        this.lcdDevice.UpdateBitmap(this.LcdGetMonoView(lcdInfo.LcdBitmap, lcdInfo.BitmapYOffset), LcdPriority.Normal, LcdUpdateMode.Async);
                        this.lcdDevice.DoUpdateAndDraw();
                    }
                    else
                    {
                        this.lcdDevice.UpdateBitmap(this.LcdGetColorView(lcdInfo.LcdBitmap, lcdInfo.BitmapYOffset), LcdPriority.Normal, LcdUpdateMode.Async);
                        this.lcdDevice.DoUpdateAndDraw();
                    }
                }
                if (((this.lcdDevice != null) && this.lcdDevice.IsDisposed) && (!this.opLcdGeneral.cbLcdRoute.Checked || !this.opLcdGeneral.cbLcdRoute.Enabled))
                {
                    ThreadInvokes.CheckboxSetChecked(this, this.opLcdGeneral.cbLcdEnabled, false);
                }
            }
            catch (Exception exception2)
            {
                this.WriteExceptionLog(exception2, "LCD Update");
            }
        }

        public void UpdateLcdStatus(string Message, bool Error)
        {
            ThreadInvokes.RichTextBoxAppendText(this, this.opLcdGeneral.rtbLcdStatus, "\r\n" + DateTime.Now.ToLongTimeString() + " - " + Message);
            if (Error)
            {
                string.Format("*****\n{0}\n{1}\n{2}\n*****", DateTime.Now.ToString("s"), "LCD Display Error", Message);
                this.WriteExceptionLog(new Exception(Message), "LCD Display Error");
            }
        }

        public void UpdateMiniEnc()
        {
            if (ActGlobals.oFormMiniParse.cbbDisplayGraph.Checked)
            {
                try
                {
                    if (this.opMiniParse.ddlMiniFormat.SelectedIndex != -1)
                    {
                        ActGlobals.oFormMiniParse.pb1.Image = this.GenEncounterGraph(this.ActiveZone.ActiveEncounter, ActGlobals.oFormMiniParse.pb1.Width, ActGlobals.oFormMiniParse.pb1.Height, this.textExportFormats[this.opMiniParse.ddlMiniFormat.SelectedIndex].Sorting);
                    }
                    else
                    {
                        ActGlobals.oFormMiniParse.pb1.Image = this.GenEncounterGraph(this.ActiveZone.ActiveEncounter, ActGlobals.oFormMiniParse.pb1.Width, ActGlobals.oFormMiniParse.pb1.Height, this.defaultTextFormat.Sorting);
                    }
                }
                catch (Exception exception)
                {
                    this.WriteExceptionLog(exception, string.Empty);
                }
            }
            else
            {
                try
                {
                    string textExport;
                    TextExportFormatOptions defaultTextFormat;
                    if (this.opMiniParse.ddlMiniFormat.SelectedIndex == -1)
                    {
                        defaultTextFormat = this.defaultTextFormat;
                    }
                    else
                    {
                        defaultTextFormat = this.textExportFormats[this.opMiniParse.ddlMiniFormat.SelectedIndex];
                    }
                    if (this.opMiniParse.cbMiniColumnAlign.Checked)
                    {
                        textExport = this.GetTextExport(this.ActiveZone.ActiveEncounter, defaultTextFormat, ActGlobals.oFormMiniParse.rtb2.Font, 0);
                    }
                    else
                    {
                        textExport = this.GetTextExport(this.ActiveZone.ActiveEncounter, defaultTextFormat);
                    }
                    if (ActGlobals.oFormMiniParse.rtb2.Text != textExport)
                    {
                        ThreadInvokes.ControlSetText(this, ActGlobals.oFormMiniParse.rtb2, textExport);
                    }
                }
                catch (Exception exception2)
                {
                    this.WriteExceptionLog(exception2, string.Empty);
                }
            }
        }

        private void UpdateWebConnectionTimers()
        {
            for (int i = this.webConnections.Count - 1; i >= 0; i--)
            {
                if (this.webConnections[i].ConnectedSocket == null)
                {
                    this.webConnections.RemoveAt(i);
                }
                else
                {
                    this.webConnections[i].Update();
                }
            }
        }

        public void ValidateLists()
        {
            ActGlobals.oFormExportFormat.ddlSort.Items.Clear();
            foreach (string str in this.opTableEncounter.clbED.Items)
            {
                ActGlobals.oFormExportFormat.ddlSort.Items.Add(str);
            }
            foreach (KeyValuePair<string, CombatantData.DamageTypeDef> pair in CombatantData.OutgoingDamageTypeDataObjects)
            {
                if (!this.opGraphing.clbSoloGraphTypes.Items.Contains(pair.Key))
                {
                    this.opGraphing.clbSoloGraphTypes.Items.Add(pair.Key, true);
                }
            }
            foreach (KeyValuePair<string, CombatantData.DamageTypeDef> pair2 in CombatantData.IncomingDamageTypeDataObjects)
            {
                if (!this.opGraphing.clbSoloGraphTypes.Items.Contains(pair2.Key))
                {
                    this.opGraphing.clbSoloGraphTypes.Items.Add(pair2.Key, true);
                }
            }
            for (int i = this.opGraphing.clbSoloGraphTypes.Items.Count - 1; i >= 0; i--)
            {
                if (!CombatantData.OutgoingDamageTypeDataObjects.ContainsKey((string) this.opGraphing.clbSoloGraphTypes.Items[i]) && !CombatantData.IncomingDamageTypeDataObjects.ContainsKey((string) this.opGraphing.clbSoloGraphTypes.Items[i]))
                {
                    this.opGraphing.clbSoloGraphTypes.Items.RemoveAt(i);
                }
            }
        }

        public void ValidateTableSetup()
        {
            foreach (KeyValuePair<string, EncounterData.ColumnDef> pair in EncounterData.ColumnDefs)
            {
                if (!this.opTableZone.clbZD.Items.Contains(pair.Key))
                {
                    this.opTableZone.clbZD.Items.Add(pair.Key, pair.Value.DefaultVisible);
                }
            }
            for (int i = this.opTableZone.clbZD.Items.Count - 1; i >= 0; i--)
            {
                if (!EncounterData.ColumnDefs.ContainsKey((string) this.opTableZone.clbZD.Items[i]))
                {
                    this.opTableZone.clbZD.Items.RemoveAt(i);
                }
            }
            foreach (KeyValuePair<string, CombatantData.ColumnDef> pair2 in CombatantData.ColumnDefs)
            {
                if (!this.opTableEncounter.clbED.Items.Contains(pair2.Key))
                {
                    this.opTableEncounter.clbED.Items.Add(pair2.Key, pair2.Value.DefaultVisible);
                }
            }
            for (int j = this.opTableEncounter.clbED.Items.Count - 1; j >= 0; j--)
            {
                if (!CombatantData.ColumnDefs.ContainsKey((string) this.opTableEncounter.clbED.Items[j]))
                {
                    this.opTableEncounter.clbED.Items.RemoveAt(j);
                }
            }
            foreach (KeyValuePair<string, DamageTypeData.ColumnDef> pair3 in DamageTypeData.ColumnDefs)
            {
                if (!this.opTableCombatant.clbCD.Items.Contains(pair3.Key))
                {
                    this.opTableCombatant.clbCD.Items.Add(pair3.Key, pair3.Value.DefaultVisible);
                }
            }
            for (int k = this.opTableCombatant.clbCD.Items.Count - 1; k >= 0; k--)
            {
                if (!DamageTypeData.ColumnDefs.ContainsKey((string) this.opTableCombatant.clbCD.Items[k]))
                {
                    this.opTableCombatant.clbCD.Items.RemoveAt(k);
                }
            }
            foreach (KeyValuePair<string, AttackType.ColumnDef> pair4 in AttackType.ColumnDefs)
            {
                if (!this.opTableDamageType.clbDT.Items.Contains(pair4.Key))
                {
                    this.opTableDamageType.clbDT.Items.Add(pair4.Key, pair4.Value.DefaultVisible);
                }
            }
            for (int m = this.opTableDamageType.clbDT.Items.Count - 1; m >= 0; m--)
            {
                if (!AttackType.ColumnDefs.ContainsKey((string) this.opTableDamageType.clbDT.Items[m]))
                {
                    this.opTableDamageType.clbDT.Items.RemoveAt(m);
                }
            }
            foreach (KeyValuePair<string, MasterSwing.ColumnDef> pair5 in MasterSwing.ColumnDefs)
            {
                if (!this.opTableAttackType.clbAT.Items.Contains(pair5.Key))
                {
                    this.opTableAttackType.clbAT.Items.Add(pair5.Key, pair5.Value.DefaultVisible);
                }
            }
            for (int n = this.opTableAttackType.clbAT.Items.Count - 1; n >= 0; n--)
            {
                if (!MasterSwing.ColumnDefs.ContainsKey((string) this.opTableAttackType.clbAT.Items[n]))
                {
                    this.opTableAttackType.clbAT.Items.RemoveAt(n);
                }
            }
        }

        private void viewEncounterVCRToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Index];
                EncounterData encounter = data.Items[this.tvDG.SelectedNode.Index];
                ActGlobals.oFormEncounterVcr.ShowVcr(encounter, false);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        private void viewTimelineToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                ZoneData data = this.zoneList[this.tvDG.SelectedNode.Parent.Index];
                EncounterData encounter = data.Items[this.tvDG.SelectedNode.Index];
                ActGlobals.oFormTimeLine.ShowTimeline(encounter);
            }
            catch (Exception exception)
            {
                this.WriteExceptionLog(exception, string.Empty);
            }
        }

        public void WriteExceptionLog(Exception ex, string MoreInfo)
        {
            string str = string.Format("*****\n{0}\n{1}\n{2}\n*****", DateTime.Now.ToString("s"), MoreInfo, ex.ToString());
            Console.Out.WriteLine(str);
            dW.WriteLine(str);
            dW.Flush();
        }

        private List<EncounterData> XmlToEncounters(Stream XmlStream)
        {
            Regex regex = new Regex(@"\d+", RegexOptions.Compiled);
            List<EncounterData> list = new List<EncounterData>();
            EncounterData item = null;
            string s = string.Empty;
            List<CombatantData> allies = new List<CombatantData>();
            XmlTextReader reader = new XmlTextReader(XmlStream);
            try
            {
                while (reader.Read())
                {
                    if (reader.NodeType == XmlNodeType.Element)
                    {
                        try
                        {
                            DateTime time;
                            bool flag;
                            int num;
                            int num2;
                            if (reader.LocalName == "Encounter")
                            {
                                if (item != null)
                                {
                                    if (allies.Count > 0)
                                    {
                                        item.SetAllies(allies);
                                    }
                                    list.Add(item);
                                }
                                string charName = reader.GetAttribute("CharName", "");
                                if (charName == null)
                                {
                                    charName = ActGlobals.charName;
                                }
                                item = new EncounterData(charName, "Import", null) {
                                    Title = reader.GetAttribute("Name", "")
                                };
                                allies = new List<CombatantData>();
                            }
                            if (reader.LocalName == "Ally")
                            {
                                allies.Add(item.GetCombatant(reader.ReadString()));
                            }
                            if (reader.LocalName == "StartTime")
                            {
                                item.StartTimes.Add(DateTime.Parse(reader.ReadString()));
                            }
                            if (reader.LocalName == "EndTime")
                            {
                                item.EndTimes.Add(DateTime.Parse(reader.ReadString()));
                            }
                            if (reader.LocalName == "LogLine")
                            {
                                int parsedType = System.Convert.ToInt32(reader.GetAttribute("Type", ""));
                                string logLine = reader.GetAttribute("Line", "");
                                s = reader.GetAttribute("Time", "");
                                if ((s != null) && (s.Length > 1))
                                {
                                    time = DateTime.Parse(s);
                                }
                                else
                                {
                                    time = this.GetDateTimeFromLog(logLine);
                                }
                                item.LogLines.Add(new LogLineEntry(time, logLine, parsedType, ++this.globalTimeSorter));
                                if (this.ioImportAct.cbParseCt.Checked)
                                {
                                    try
                                    {
                                        if (logLine.Length > 40)
                                        {
                                            this.ParseCustom(time, logLine.Substring(0x27));
                                        }
                                    }
                                    catch (Exception exception)
                                    {
                                        this.WriteExceptionLog(exception, "ACT File - Parse Custom");
                                    }
                                }
                            }
                            if (!(reader.LocalName == "Swing"))
                            {
                                continue;
                            }
                            string attribute = reader.GetAttribute("Combatant", "");
                            string victim = reader.GetAttribute("Victim", "");
                            string theAttackType = reader.GetAttribute("AttackType", "");
                            string theDamageType = reader.GetAttribute("DamageType", "");
                            string input = reader.GetAttribute("Damage", "");
                            string str10 = input;
                            if (str10 == null)
                            {
                                goto Label_02DE;
                            }
                            if (!(str10 == "Miss"))
                            {
                                if (str10 == "No Damage")
                                {
                                    goto Label_02C6;
                                }
                                if (str10 == "Death")
                                {
                                    goto Label_02D2;
                                }
                                goto Label_02DE;
                            }
                            Dnum miss = Dnum.Miss;
                            goto Label_03D0;
                        Label_02C6:
                            miss = Dnum.NoDamage;
                            goto Label_03D0;
                        Label_02D2:
                            miss = Dnum.Death;
                            goto Label_03D0;
                        Label_02DE:
                            try
                            {
                                if (input.Contains("/"))
                                {
                                    int numberValue = 0;
                                    MatchCollection matchs = regex.Matches(input);
                                    for (int i = 0; i < matchs.Count; i++)
                                    {
                                        numberValue += int.Parse(matchs[i].Value);
                                    }
                                    miss = new Dnum(numberValue, input);
                                }
                                else if (char.IsDigit(input[input.Length - 1]))
                                {
                                    miss = int.Parse(input);
                                }
                                else if (input.Contains("("))
                                {
                                    string[] strArray = input.Split(new char[] { '(', ')' }, StringSplitOptions.RemoveEmptyEntries);
                                    miss = new Dnum(-9, strArray[0]) {
                                        DamageString2 = "(" + strArray[1] + ")"
                                    };
                                }
                                else
                                {
                                    miss = new Dnum(-9, input);
                                }
                            }
                            catch
                            {
                                miss = new Dnum(-9, input);
                            }
                        Label_03D0:
                            time = DateTime.Parse(reader.GetAttribute("Time", ""));
                            try
                            {
                                num = int.Parse(reader.GetAttribute("TimeSorter", ""));
                            }
                            catch
                            {
                                num = 0;
                            }
                            try
                            {
                                num2 = int.Parse(reader.GetAttribute("SwingType", ""));
                            }
                            catch
                            {
                                num2 = 0;
                            }
                            try
                            {
                                flag = bool.Parse(reader.GetAttribute("Critical", ""));
                            }
                            catch
                            {
                                flag = false;
                            }
                            string displayedText = reader.GetAttribute("Special", "");
                            if (string.IsNullOrEmpty(displayedText))
                            {
                                displayedText = ActGlobals.ActLocalization.LocalizationStrings["specialAttackTerm-none"].DisplayedText;
                            }
                            item.AddCombatAction(new MasterSwing(num2, flag, displayedText, miss, time, num, theAttackType, attribute, theDamageType, victim));
                            continue;
                        }
                        catch (Exception exception2)
                        {
                            ThreadInvokes.ControlSetText(this, this.ioImportAct.lblActImportStatus, string.Concat(new object[] { "Error while parsing ACT/XML file: Line #", reader.LineNumber, " (", reader.LocalName, ")\n", exception2.Message }));
                            this.WriteExceptionLog(exception2, string.Concat(new object[] { "Error while parsing ACT/XML file: Line #", reader.LineNumber, " (", reader.LocalName, ")" }));
                            continue;
                        }
                    }
                }
            }
            catch (Exception exception3)
            {
                ThreadInvokes.ControlSetText(this, this.ioImportAct.lblActImportStatus, "The ACT file was corrupt, and may be an incompatible version.\n" + exception3.Message);
                this.WriteExceptionLog(exception3, "The ACT file was corrupt, and may be an incompatible version.");
                reader.Close();
                return list;
            }
            reader.Close();
            if (allies.Count > 0)
            {
                item.SetAllies(allies);
            }
            list.Add(item);
            return list;
        }

        public void ZoneDatabaseAdd(HistoryRecord item)
        {
            if (((item.Label != "Unknown Zone") && (item.Label != "Import Zone")) && (item.StartTime <= item.EndTime))
            {
                if (item.EndTime == DateTime.MaxValue)
                {
                    item.EndTime = item.StartTime.AddDays(1.0);
                }
                int index = this.zoneDatabase.IndexOfKey(item.StartTime);
                if (index > -1)
                {
                    if ((this.zoneDatabase.Values[index].Duration > item.Duration) && !(this.zoneDatabase.Values[index].Duration == TimeSpan.FromHours(24.0)))
                    {
                        return;
                    }
                    this.zoneDatabase.RemoveAt(index);
                }
                this.zoneDatabase.Add(item.StartTime, item);
            }
        }

        public SortedList<string, CustomTrigger> ActiveCustomTriggers
        {
            get
            {
                return this.activeCustomTriggers;
            }
        }

        public ZoneData ActiveZone
        {
            get
            {
                return this.activeZone;
            }
            set
            {
                this.activeZone = value;
            }
        }

        public List<ActPluginData> ActPlugins
        {
            get
            {
                return this.plugins;
            }
            set
            {
                this.plugins = value;
            }
        }

        public DirectoryInfo AppDataFolder
        {
            get
            {
                return this.appDataFolder;
            }
        }

        public Regex CharacterFileNameRegex
        {
            get
            {
                return this.characterFileNameRegex;
            }
            set
            {
                this.characterFileNameRegex = value;
            }
        }

        public string CurrentZone
        {
            get
            {
                return this.currentZone;
            }
            set
            {
                this.currentZone = value;
            }
        }

        public SortedList<string, CustomTrigger> CustomTriggers
        {
            get
            {
                return this.customTriggers;
            }
        }

        public SortedList<DateTime, HistoryRecord> EncDatabase
        {
            get
            {
                return this.encDatabase;
            }
            set
            {
                this.encDatabase = value;
            }
        }

        public string GameMacroFolder
        {
            get
            {
                return this.gameFolder;
            }
            set
            {
                this.gameFolder = value;
            }
        }

        public int GlobalTimeSorter
        {
            get
            {
                return this.globalTimeSorter;
            }
            set
            {
                this.globalTimeSorter = value;
            }
        }

        public bool InCombat
        {
            get
            {
                return this.inCombat;
            }
            set
            {
                this.inCombat = value;
            }
        }

        public Dictionary<string, List<Control>> IoControlSets
        {
            get
            {
                return this.ioControlSets;
            }
            set
            {
                this.ioControlSets = value;
            }
        }

        public TreeView IoTreeView
        {
            get
            {
                return this.tvIo;
            }
            set
            {
                this.tvIo = value;
            }
        }

        public DateTime LastEstimatedTime
        {
            get
            {
                return this.lastEstimatedTime;
            }
        }

        public DateTime LastKnownTime
        {
            get
            {
                return this.lastKnownTime;
            }
            set
            {
                if (value != DateTime.MinValue)
                {
                    this.lastKnownTime = value;
                    this.lastEstimatedTime = value;
                    this.lastEstimatedUpdated = true;
                }
            }
        }

        public string LastLogLine
        {
            get
            {
                return this.lastLogLine;
            }
            set
            {
                this.lastLogLine = value;
            }
        }

        public string LcdCurrentMode
        {
            get
            {
                if (this.currentLcdMode != -1)
                {
                    return this.registeredLcdModes[this.currentLcdMode];
                }
                return "";
            }
        }

        public Encoding LogEncoding
        {
            get
            {
                return this.logEncoding;
            }
            set
            {
                this.logEncoding = value;
            }
        }

        public string LogFileFilter
        {
            get
            {
                return this.logFileFilter;
            }
            set
            {
                this.logFileFilter = value;
            }
        }

        public string LogFileParentFolderName
        {
            get
            {
                return this.logFileParentFolderName;
            }
            set
            {
                this.logFileParentFolderName = value.ToLower();
            }
        }

        public string LogFilePath
        {
            get
            {
                return this.logFilePath;
            }
            set
            {
                this.logFilePath = value;
            }
        }

        public bool LogPathHasCharName
        {
            get
            {
                return this.logPathHasCharName;
            }
            set
            {
                this.logPathHasCharName = value;
            }
        }

        public TreeView MainTreeView
        {
            get
            {
                return this.tvDG;
            }
            set
            {
                this.tvDG = value;
            }
        }

        public Dictionary<string, List<Control>> OptionsControlSets
        {
            get
            {
                return this.optionsControlSets;
            }
            set
            {
                this.optionsControlSets = value;
            }
        }

        public TreeView OptionsTreeView
        {
            get
            {
                return this.tvOptions;
            }
            set
            {
                this.tvOptions = value;
            }
        }

        public bool ReadThreadLock
        {
            get
            {
                return this.readThreadLock;
            }
            set
            {
                this.readThreadLock = value;
            }
        }

        public Regex SnippetShareRegex
        {
            get
            {
                return this.shareRegex;
            }
            set
            {
                this.shareRegex = value;
            }
        }

        public List<TextExportFormatOptions> TextExportFormats
        {
            get
            {
                return this.textExportFormats;
            }
        }

        public string TextExportFormatterCap1
        {
            get
            {
                return this.formatTagCap1;
            }
            set
            {
                this.formatTagCap1 = value;
            }
        }

        public string TextExportFormatterCap2
        {
            get
            {
                return this.formatTagCap2;
            }
            set
            {
                this.formatTagCap2 = value;
            }
        }

        public Regex TextExportFormatterRegex
        {
            get
            {
                return this.regexFormatTag;
            }
            set
            {
                this.regexFormatTag = value;
            }
        }

        public int TimeStampLen
        {
            get
            {
                return this.timeStampLen;
            }
            set
            {
                this.timeStampLen = value;
            }
        }

        public Regex ZoneChangeRegex
        {
            get
            {
                return this.zoneChangeRegex;
            }
            set
            {
                this.zoneChangeRegex = value;
            }
        }

        public SortedList<DateTime, HistoryRecord> ZoneDatabase
        {
            get
            {
                return this.zoneDatabase;
            }
            set
            {
                this.zoneDatabase = value;
            }
        }

        public List<ZoneData> ZoneList
        {
            get
            {
                return this.zoneList;
            }
            set
            {
                this.zoneList = value;
            }
        }

        internal class ActWebConnection : IDisposable
        {
            private BinaryWriter binWriter;
            private string clientIP = string.Empty;
            private static byte[] clipFlash = null;
            private Socket connectedSocket;
            private static int incomingBytes = 0;
            private bool keepAlive;
            private DateTime lastAction = DateTime.Now;
            private static int lastClients = 0;
            private static int lastIncomingBytes = 0;
            private static float lastIncomingKBps = 0f;
            private static List<string> lastIPs = new List<string>();
            private static int lastOutgoingBytes = 0;
            private static float lastOutgoingKBps = 0f;
            private string lastUrl = string.Empty;
            private NetworkStream netStream;
            private static int outgoingBytes = 0;
            private StreamReader reader;
            private static SortedDictionary<string, DateTime> uniqueClients = new SortedDictionary<string, DateTime>();
            private StreamWriter utfWriter;
            private StreamWriter writer;

            public ActWebConnection(Socket ConnectedSocket)
            {
                this.connectedSocket = ConnectedSocket;
                this.netStream = new NetworkStream(this.connectedSocket);
                this.reader = new StreamReader(this.netStream, Encoding.ASCII);
                this.writer = new StreamWriter(this.netStream, Encoding.ASCII);
                this.utfWriter = new StreamWriter(this.netStream, Encoding.UTF8);
                this.binWriter = new BinaryWriter(this.netStream);
                IPEndPoint remoteEndPoint = (IPEndPoint) this.connectedSocket.RemoteEndPoint;
                this.clientIP = remoteEndPoint.Address.ToString();
                if (uniqueClients.ContainsKey(this.clientIP))
                {
                    uniqueClients.Remove(this.clientIP);
                }
                uniqueClients.Add(this.clientIP, DateTime.Now);
            }

            private void CloseConnection()
            {
                if (this.connectedSocket != null)
                {
                    this.connectedSocket.Close();
                    this.connectedSocket = null;
                }
            }

            public void Dispose()
            {
                this.CloseConnection();
            }

            private Dictionary<string, string> ParseHeaders()
            {
                string str;
                Dictionary<string, string> dictionary = new Dictionary<string, string>();
                string key = null;
            Label_0008:
                str = this.reader.ReadLine();
                if (string.IsNullOrEmpty(str))
                {
                    return dictionary;
                }
                incomingBytes += str.Length + 2;
                if (char.IsWhiteSpace(str[0]) && (key != null))
                {
                    Dictionary<string, string> dictionary2;
                    string str4;
                    (dictionary2 = dictionary)[str4 = key] = dictionary2[str4] + str;
                    goto Label_0008;
                }
                int index = str.IndexOf(':');
                if (index != -1)
                {
                    key = str.Substring(0, index).Trim();
                    string str3 = str.Substring(index + 1).Trim();
                    dictionary.Add(key, str3);
                    goto Label_0008;
                }
                this.ResponseError(400, "Bad header " + str);
                return null;
            }

            private Dictionary<string, string> ParseUrlVars()
            {
                Dictionary<string, string> dictionary = new Dictionary<string, string>();
                if (this.lastUrl.Contains("?"))
                {
                    int index = this.lastUrl.IndexOf('?');
                    foreach (string str2 in this.lastUrl.Substring(index + 1).Split(new char[] { '&' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        int length = str2.IndexOf('=');
                        if (length == -1)
                        {
                            dictionary.Add(str2, "");
                        }
                        else
                        {
                            dictionary.Add(str2.Substring(0, length).Trim(), str2.Substring(length + 1).Trim());
                        }
                    }
                    this.lastUrl = this.lastUrl.Substring(0, index);
                }
                return dictionary;
            }

            private void ProcessGet()
            {
                Dictionary<string, string> headers = this.ParseHeaders();
                if (headers != null)
                {
                    this.keepAlive = false;
                    Dictionary<string, string> urlVars = this.ParseUrlVars();
                    bool flag = false;
                    if (ActGlobals.oFormActMain.UrlRequest != null)
                    {
                        UrlRequestEventArgs urlInfo = new UrlRequestEventArgs(this.lastUrl, headers, urlVars);
                        ActGlobals.oFormActMain.UrlRequest(urlInfo);
                        if (urlInfo.UrlHandled)
                        {
                            flag = true;
                            if (urlInfo.ReturnIsText)
                            {
                                this.ResponseTextData(urlInfo.ReturnText, urlInfo.ReturnContentType, false);
                            }
                            else
                            {
                                this.ResponseBinaryData(urlInfo.ReturnBinary, urlInfo.ReturnContentType, false);
                            }
                        }
                    }
                    if (!flag)
                    {
                        switch (this.lastUrl)
                        {
                            case "/_clipboard.swf":
                                this.ResponseBinaryData(ClipFlash, "application/x-shockwave-flash", true);
                                break;

                            case "/ACT.js":
                                this.ResponseTextData(DocActScript, "text/javascript; charset=UTF-8", true);
                                break;

                            case "/ACT.css":
                                this.ResponseTextData(DocCss, "text/css; charset=UTF-8", true);
                                break;

                            case "/browse":
                                this.ResponseTextData(DocBrowse, "text/html; charset=UTF-8", true);
                                break;

                            case "/browse.body":
                                this.ResponseBrowseBody(headers);
                                break;

                            case "/current":
                                this.ResponseTextData(DocCurrentEnc, "text/html; charset=UTF-8", true);
                                break;

                            case "/current.body":
                                if (ActGlobals.oFormActMain.ActiveZone.ActiveEncounter != null)
                                {
                                    this.ResponseTextData("<table class='smallerText' border='1'>" + ActGlobals.oFormActMain.ExportTBodyHTML(ActGlobals.oFormActMain.ActiveZone.ActiveEncounter.Items.Values) + "</table>", "text/html; charset=UTF-8", false);
                                }
                                else
                                {
                                    this.ResponseTextData("<table><tr><td><i>No Encounter</i></td></tr></table>", "text/html", false);
                                }
                                break;

                            case "/mini":
                                this.ResponseTextData(DocCurrentMini, "text/html; charset=UTF-8", true);
                                break;

                            case "/mini.body":
                                this.ResponseMiniBody(headers);
                                break;

                            case "/timers.body":
                                this.ResponseTimersBody(headers);
                                break;

                            case "/timers":
                                this.ResponseTextData(DocTimers, "text/html; charset=UTF-8", true);
                                break;

                            case "/":
                                this.ResponseTextData(this.DocIndex, "text/html; charset=UTF-8", true);
                                break;

                            case "/browseruidownload":
                                this.ResponseTextData(DocUIDownload, "text/html; charset=UTF-8", true);
                                break;

                            default:
                                this.ResponseError(0x194, "The requested resource did not exist: " + this.lastUrl);
                                break;
                        }
                    }
                    this.lastAction = DateTime.Now;
                    if (this.keepAlive)
                    {
                        this.writer.WriteLine();
                        this.writer.Flush();
                    }
                    else
                    {
                        this.CloseConnection();
                    }
                }
            }

            private bool ProcessRequest()
            {
                string str4;
                string str = this.reader.ReadLine();
                incomingBytes += str.Length + 2;
                string[] strArray = str.Split(new char[] { ' ' });
                if (strArray.Length != 3)
                {
                    this.ResponseError(400, "Invalid request");
                    return true;
                }
                string str2 = strArray[0].ToUpper();
                this.lastUrl = strArray[1];
                string protocolName = strArray[2];
                if (!ValidateProtocol(protocolName))
                {
                    this.ResponseError(400, "Invalid protocol " + protocolName);
                    return true;
                }
                if (!this.lastUrl.StartsWith("/"))
                {
                    this.ResponseError(400, "Invalid URL " + this.lastUrl);
                    return true;
                }
                if (((str4 = str2) != null) && (str4 == "GET"))
                {
                    this.ProcessGet();
                    return true;
                }
                this.ResponseError(0x1f5, str2 + " not implemented");
                return true;
            }

            private void Response(int Status, string Message, long Length, string ContentType, bool Cachable)
            {
                if ((Status == 200) && (((Length > 0xc800) || ActGlobals.oFormActMain.opWebServer.cbWebServerShowReq.Checked) || ((!this.lastUrl.Contains(".body") && !this.lastUrl.Contains(".js")) && !this.lastUrl.Contains(".css"))))
                {
                    ThreadInvokes.RichTextBoxAppendDateTimeLine(ActGlobals.oFormActMain, ActGlobals.oFormActMain.opWebServer.rtbWebServerLog, string.Format("{0} - {1} - Length: {2}", this.clientIP, this.lastUrl, Length));
                }
                this.WriteToStream(string.Format("HTTP/1.0 {0} {1}", Status, Message));
                this.WriteToStream(string.Format("Content-Length: {0}", Length));
                if (ContentType.Length > 0)
                {
                    this.WriteToStream(string.Format("Content-Type: {0}", ContentType));
                }
                if (!Cachable)
                {
                    this.WriteToStream("Cache-Control: no-cache");
                }
                this.WriteToStream(string.Format("Connection: {0}", this.keepAlive ? "Keep-Alive" : "close"));
                this.WriteToStream(string.Format("Server: ACT (Web Interface)/{0}", ActGlobals.oFormActMain.lblVersion.Text));
                this.WriteToStream(string.Format("Date: {0}", DateTime.UtcNow.ToString("R")));
                this.WriteToStream("");
                if (!this.keepAlive)
                {
                    this.writer.Flush();
                }
            }

            private void ResponseBinaryData(byte[] Data, string ContentType, bool Cachable)
            {
                this.Response(200, "OK", (long) Data.Length, ContentType, Cachable);
                outgoingBytes += Data.Length;
                this.binWriter.Write(Data);
                this.binWriter.Flush();
            }

            private void ResponseBrowseBody(Dictionary<string, string> headers)
            {
                int num = headers.ContainsKey("act-zd") ? int.Parse(headers["act-zd"]) : -1;
                int num2 = headers.ContainsKey("act-ed") ? int.Parse(headers["act-ed"]) : -1;
                string str = headers.ContainsKey("act-cd") ? GlobalObject.unescape(headers["act-cd"]) : "";
                string str2 = headers.ContainsKey("act-dt") ? GlobalObject.unescape(headers["act-dt"]) : "";
                string str3 = headers.ContainsKey("act-at") ? GlobalObject.unescape(headers["act-at"]) : "";
                string browseNavCustomSort = headers.ContainsKey("act-sorting") ? GlobalObject.unescape(headers["act-sorting"]) : "";
                string format = "\"{0}\",\"{1}\",\"{2}\",\"{3}\",\"{4}\",\"{5}\"";
                string str6 = string.Format("<a href='javascript:ActNav({0})'>[<i>Reload</i>]</a>", string.Format(format, new object[] { (num == -1) ? "" : num.ToString(), (num2 == -1) ? "" : num2.ToString(), GlobalObject.escape(str), GlobalObject.escape(str2), GlobalObject.escape(str3), browseNavCustomSort }));
                string str7 = string.Empty;
                string str8 = string.Empty;
                try
                {
                    if (num != -1)
                    {
                        ZoneData data = ActGlobals.oFormActMain.ZoneList[num];
                        str8 = str8 + string.Format("<a href='javascript:ActNav({0})'>{1}</a> | ", string.Format(format, new object[] { "", "", "", "", "", "" }), data.ZoneName);
                        if (num2 != -1)
                        {
                            EncounterData data2 = data.Items[num2];
                            str8 = str8 + string.Format("<a href='javascript:ActNav({0})'>{1}</a> | ", string.Format(format, new object[] { num, "", "", "", "", "" }), data2.Title);
                            if (!string.IsNullOrEmpty(str))
                            {
                                CombatantData combatant = data2.GetCombatant(str);
                                str8 = str8 + string.Format("<a href='javascript:ActNav({0})'>{1}</a> | ", string.Format(format, new object[] { num, num2, "", "", "", "" }), combatant.Name);
                                if (!string.IsNullOrEmpty(str2))
                                {
                                    DamageTypeData data4 = combatant.Items[str2];
                                    str8 = str8 + string.Format("<a href='javascript:ActNav({0})'>{1}</a> | ", string.Format(format, new object[] { num, num2, GlobalObject.escape(str), "", "", "" }), data4.Type);
                                    if (!string.IsNullOrEmpty(str3))
                                    {
                                        AttackType attackType = combatant.GetAttackType(str3, str2);
                                        str8 = str8 + string.Format("<a href='javascript:ActNav({0})'>{1}</a> | ", string.Format(format, new object[] { num, num2, GlobalObject.escape(str), str2, "", "" }), attackType.Type);
                                        str7 = ActGlobals.oFormActMain.ExportTBodyHTML(attackType.Items, browseNavCustomSort, string.Format(format, new object[] { num, num2, GlobalObject.escape(str), str2, GlobalObject.escape(str3), "{0}" }));
                                    }
                                    else
                                    {
                                        str7 = ActGlobals.oFormActMain.ExportTBodyHTML(data4.Items.Values, browseNavCustomSort, string.Format(format, new object[] { num, num2, GlobalObject.escape(str), str2, "{0}", "{1}" }));
                                    }
                                }
                                else
                                {
                                    str7 = ActGlobals.oFormActMain.ExportTBodyHTML(combatant.Items.Values, string.Format(format, new object[] { num, num2, GlobalObject.escape(str), "{0}", "", "" }));
                                }
                            }
                            else
                            {
                                str7 = ActGlobals.oFormActMain.ExportTBodyHTML(data2.Items.Values, browseNavCustomSort, string.Format(format, new object[] { num, num2, "{0}", "", "", "{1}" }));
                            }
                        }
                        else
                        {
                            str7 = ActGlobals.oFormActMain.ExportTBodyHTML(data.Items, string.Format(format, new object[] { num, "{0}", "", "", "", "" }));
                        }
                    }
                    else
                    {
                        str7 = ActGlobals.oFormActMain.ExportTBodyHTML(ActGlobals.oFormActMain.ZoneList, string.Format(format, new object[] { "{0}", "", "", "", "", "" }));
                    }
                }
                catch (ArgumentOutOfRangeException)
                {
                    this.ResponseError(400, "The requested resource does not currently exist");
                }
                this.ResponseTextData(string.Format("{0} {1}<table border='1' class='smallerText'>{2}</table>", str8, str6, str7), "text/html; charset=UTF-8", false);
            }

            private void ResponseError(int status, string message)
            {
                string s = string.Format("<h1>{0}</h1><hr><p>{1}</p>", status, message);
                ThreadInvokes.RichTextBoxAppendDateTimeLine(ActGlobals.oFormActMain, ActGlobals.oFormActMain.opWebServer.rtbWebServerLog, string.Format("{0} - {1} - {2} - {3}", new object[] { this.clientIP, this.lastUrl, status, message }));
                int num = Encoding.ASCII.GetByteCount(s) + 2;
                this.Response(status, message, (long) num, "text/html", false);
                this.WriteToStream(s);
                this.writer.Flush();
            }

            private void ResponseMiniBody(Dictionary<string, string> headers)
            {
                if (ActGlobals.oFormActMain.ActiveZone.ActiveEncounter == null)
                {
                    this.ResponseTextData("<i>No Encounter</i>", "text/html", false);
                }
                else
                {
                    int num = headers.ContainsKey("act-mini") ? int.Parse(headers["act-mini"]) : -1;
                    if (num == -1)
                    {
                        this.ResponseTextData("<i>No Text Format Selected</i>", "text/html", false);
                    }
                    else
                    {
                        TextExportFormatOptions exportFormatting = ActGlobals.oFormActMain.TextExportFormats[num];
                        this.ResponseTextData(ActGlobals.oFormActMain.GetTextExport(ActGlobals.oFormActMain.ActiveZone.ActiveEncounter, exportFormatting).Replace("\n", "<br>"), "text/html; charset=UTF-8", false);
                    }
                }
            }

            private void ResponseTextData(string Data, string ContentType, bool Cachable)
            {
                int byteCount;
                bool flag = ContentType.ToUpper().Contains("UTF-8");
                if (flag)
                {
                    byteCount = Encoding.UTF8.GetByteCount(Data) + 3;
                }
                else
                {
                    byteCount = Encoding.ASCII.GetByteCount(Data);
                }
                this.Response(200, "OK", (long) byteCount, ContentType, Cachable);
                outgoingBytes += byteCount;
                if (flag)
                {
                    this.utfWriter.Write(Data);
                    this.utfWriter.Flush();
                }
                else
                {
                    this.writer.Write(Data);
                    this.writer.Flush();
                }
            }

            private void ResponseTimersBody(Dictionary<string, string> headers)
            {
                string str = headers.ContainsKey("act-timers") ? headers["act-timers"] : "1";
                StringBuilder builder = new StringBuilder();
                List<TimerFrame> timerFrames = ActGlobals.oFormSpellTimers.GetTimerFrames();
                if (timerFrames.Count == 0)
                {
                    builder.AppendLine("<i>No Spell Timers to display.</i>");
                }
                else if (str == "0")
                {
                    for (int i = 0; i < timerFrames.Count; i++)
                    {
                        TimerFrame frame = timerFrames[i];
                        int num2 = 0;
                        for (int j = 0; j < timerFrames.Count; j++)
                        {
                            if (frame.Name == timerFrames[j].Name)
                            {
                                num2++;
                            }
                        }
                        TimeSpan span = TimeSpan.FromSeconds((double) frame.GetLargestVal(false));
                        if (span.TotalSeconds <= frame.WarningValue)
                        {
                            builder.Append("<font color='#ff4444'>");
                        }
                        builder.AppendFormat("<b>{0:00}m {1:00}s</b> - ", span.Minutes, span.Seconds);
                        if (span.TotalSeconds <= frame.WarningValue)
                        {
                            builder.Append("</font>");
                        }
                        if (frame.RadialDisplay)
                        {
                            builder.Append("<b>");
                        }
                        else
                        {
                            builder.Append("<i>");
                        }
                        if (num2 > 1)
                        {
                            builder.Append(frame.ToString());
                        }
                        else
                        {
                            builder.Append(frame.Name);
                        }
                        if (frame.TopModAmount > 0f)
                        {
                            builder.AppendFormat(" ({0}%)", ((int) (frame.TopModAmount * 100f)) + 100);
                        }
                        if (frame.RadialDisplay)
                        {
                            builder.Append("</b>");
                        }
                        else
                        {
                            builder.Append("</i>");
                        }
                        builder.AppendLine("<br>");
                    }
                }
                else
                {
                    builder.Append("<table border='1'>");
                    for (int k = 0; k < timerFrames.Count; k++)
                    {
                        TimerFrame frame2 = timerFrames[k];
                        int num5 = 0;
                        for (int m = 0; m < timerFrames.Count; m++)
                        {
                            if (frame2.Name == timerFrames[m].Name)
                            {
                                num5++;
                            }
                        }
                        TimeSpan span2 = TimeSpan.FromSeconds((double) frame2.GetLargestVal(false));
                        builder.Append("<tr><td>");
                        if (span2.TotalSeconds <= frame2.WarningValue)
                        {
                            builder.Append("<font color='#ff4444'>");
                        }
                        builder.AppendFormat("<b>{0:00}m {1:00}s</b>", span2.Minutes, span2.Seconds);
                        builder.Append("</td><td>");
                        if (frame2.RadialDisplay)
                        {
                            builder.Append("<b>");
                        }
                        else
                        {
                            builder.Append("<i>");
                        }
                        if (num5 > 1)
                        {
                            builder.Append(frame2.ToString());
                        }
                        else
                        {
                            builder.Append(frame2.Name);
                        }
                        if (frame2.TopModAmount > 0f)
                        {
                            builder.AppendFormat(" ({0}%)", ((int) (frame2.TopModAmount * 100f)) + 100);
                        }
                        if (frame2.RadialDisplay)
                        {
                            builder.Append("</b>");
                        }
                        else
                        {
                            builder.Append("</i>");
                        }
                        if (span2.TotalSeconds <= frame2.WarningValue)
                        {
                            builder.Append("</font>");
                        }
                        int totalSeconds = (int) span2.TotalSeconds;
                        if (totalSeconds > 60)
                        {
                            totalSeconds = 60;
                        }
                        totalSeconds *= 2;
                        builder.Append("</td><td width='120'>");
                        if (span2.TotalSeconds >= 1.0)
                        {
                            builder.AppendFormat("<hr {1}size='4' width='{0}' align='left'>", totalSeconds, frame2.RadialDisplay ? "noshade " : "");
                        }
                        builder.AppendLine("</td></tr>");
                    }
                    builder.Append("</table>");
                }
                this.ResponseTextData(builder.ToString(), "text/html; charset=UTF-8", false);
            }

            public void Update()
            {
                bool flag = false;
                try
                {
                    if (this.connectedSocket.Available > 0)
                    {
                        flag = this.ProcessRequest();
                    }
                    if ((DateTime.Now - this.lastAction) > TimeSpan.FromSeconds(5.0))
                    {
                        this.CloseConnection();
                    }
                }
                catch (Exception exception)
                {
                    if (!flag)
                    {
                        this.ResponseError(500, exception.ToString().Replace("\r\n", "<br>"));
                    }
                    ActGlobals.oFormActMain.WriteExceptionLog(exception, this.connectedSocket.RemoteEndPoint.ToString());
                }
            }

            public static void UpdateStats(int seconds)
            {
                float num = 1024f * seconds;
                lastOutgoingKBps = ((float) (outgoingBytes - lastOutgoingBytes)) / num;
                lastIncomingKBps = ((float) (incomingBytes - lastIncomingBytes)) / num;
                lastOutgoingBytes = outgoingBytes;
                lastIncomingBytes = incomingBytes;
                lastClients = 0;
                DateTime time = DateTime.Now.AddSeconds((double) -seconds);
                lastIPs.Clear();
                foreach (KeyValuePair<string, DateTime> pair in uniqueClients)
                {
                    if (pair.Value > time)
                    {
                        lastIPs.Add(pair.Key);
                        lastClients++;
                    }
                }
            }

            private static bool ValidateProtocol(string protocolName)
            {
                return protocolName.StartsWith("HTTP/1.");
            }

            private void WriteToStream(string data)
            {
                outgoingBytes += data.Length;
                this.writer.WriteLine(data);
            }

            private static byte[] ClipFlash
            {
                get
                {
                    if (clipFlash == null)
                    {
                        BinaryReader reader = new BinaryReader(Assembly.GetExecutingAssembly().GetManifestResourceStream(ActGlobals.oFormActMain.GetType(), "_clipboard.swf"));
                        clipFlash = reader.ReadBytes((int) reader.BaseStream.Length);
                    }
                    return clipFlash;
                }
            }

            public Socket ConnectedSocket
            {
                get
                {
                    return this.connectedSocket;
                }
                set
                {
                    this.connectedSocket = value;
                }
            }

            private static string DocActScript
            {
                get
                {
                    return "function GetXmlReqObject()\r\n{\r\n\txmlhttp = false;\r\n\tif(window.XMLHttpRequest && !(window.ActiveXObject))\r\n\t{\r\n\t\ttry \r\n\t\t{\r\n\t\t\txmlhttp = new XMLHttpRequest();\r\n\t\t} \r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\txmlhttp = false;\r\n\t\t}\r\n\t} \r\n\telse \r\n\t{\r\n\t\tif(window.ActiveXObject)\r\n\t\t{\r\n\t\t\ttry \r\n\t\t\t{\r\n\t\t\t\txmlhttp = new ActiveXObject('Msxml2.XMLHTTP');\r\n\t\t\t} \r\n\t\t\tcatch(e)\r\n\t\t\t{\r\n\t\t\t\ttry \r\n\t\t\t\t{\r\n\t\t\t\t\txmlhttp = new ActiveXObject('Microsoft.XMLHTTP');\r\n\t\t\t\t} \r\n\t\t\t\tcatch(e) \r\n\t\t\t\t{\r\n\t\t\t\t\txmlhttp = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn xmlhttp;\r\n}\r\nfunction SetText(getLocation, destElement)\r\n{\r\n\txmlhttp = GetXmlReqObject();\r\n\tif(xmlhttp)\r\n\t{\r\n\t\tvar textObj = document.getElementById(destElement);\r\n\t\txmlhttp.open('GET', getLocation, true);\r\n\t\txmlhttp.onreadystatechange=function()\r\n\t\t{\r\n\t\t\tif (xmlhttp.readyState==4) \r\n\t\t\t{\r\n\t\t\t\ttextObj.innerHTML = xmlhttp.responseText;\r\n\t\t\t}\r\n\t\t}\r\n\t\txmlhttp.send(null);\r\n\t}\r\n}\r\nfunction ActNav(actZd, actEd, actCd, actDt, actAt, sorting)\r\n{\r\n\tvar xmlhttp = GetXmlReqObject();\r\n\tif(xmlhttp)\r\n\t{\r\n\t\tvar textObj = document.getElementById('bodyText');\r\n\t\txmlhttp.open('GET', '/browse.body', true);\r\n\t\tif(actZd != '')\r\n\t\t\txmlhttp.setRequestHeader('act-zd', actZd);\r\n\t\tif(actZd != '')\r\n\t\t\txmlhttp.setRequestHeader('act-ed', actEd);\r\n\t\tif(actZd != '')\r\n\t\t\txmlhttp.setRequestHeader('act-cd', actCd);\r\n\t\tif(actZd != '')\r\n\t\t\txmlhttp.setRequestHeader('act-dt', actDt);\r\n\t\tif(actZd != '')\r\n\t\t\txmlhttp.setRequestHeader('act-at', actAt);\r\n\t\tif(sorting != '')\r\n\t\t\txmlhttp.setRequestHeader('act-sorting', sorting);\r\n\t\txmlhttp.onreadystatechange=function()\r\n\t\t{\r\n\t\t\tif (xmlhttp.readyState==4) \r\n\t\t\t{\r\n\t\t\t\ttextObj.innerHTML = xmlhttp.responseText;\r\n\t\t\t}\r\n\t\t}\r\n\t\txmlhttp.send(null);\r\n\t}\r\n}\r\nfunction ActCopyElement(sourceElement)\r\n{\r\n\tvar textObj = document.getElementById(sourceElement);\r\n\tvar objText = textObj.innerHTML;\r\n\tobjText = objText.replace(/<br>/g,\"\\n\");\r\n\tif (window.clipboardData)\r\n\t{\r\n\t\twindow.clipboardData.setData(\"Text\",objText);\r\n\t} \r\n\telse \r\n\t{\r\n\t\tvar flashcopier = 'flashcopier';\r\n\t\tif(!document.getElementById(flashcopier)) \r\n\t\t{\r\n\t\t  var divholder = document.createElement('div');\r\n\t\t  divholder.id = flashcopier;\r\n\t\t  document.body.appendChild(divholder);\r\n\t\t}\r\n\t\tdocument.getElementById(flashcopier).innerHTML = '';\r\n\t\tvar divinfo = '<embed src=\"/_clipboard.swf\" FlashVars=\"clipboard='+encodeURIComponent(objText)+'\" width=\"0\" height=\"0\" type=\"application/x-shockwave-flash\"></embed>';\r\n\t\tdocument.getElementById(flashcopier).innerHTML = divinfo;\r\n\t}\r\n}\r\nfunction ActModeSwitch(destElement, sourceUrl, headerLabel, headerValue)\r\n{\r\n\tvar xmlhttp = GetXmlReqObject();\r\n\tif(xmlhttp)\r\n\t{\r\n\t\tvar textObj = document.getElementById(destElement);\r\n\t\txmlhttp.open('GET', sourceUrl, true);\r\n\t\tif(headerValue == '')\r\n\t\t\theaderValue = textObj.title;\r\n\t\telse\r\n\t\t\ttextObj.title = headerValue;\r\n\t\txmlhttp.setRequestHeader(headerLabel, headerValue);\r\n\t\txmlhttp.onreadystatechange=function()\r\n\t\t{\r\n\t\t\tif (xmlhttp.readyState==4) \r\n\t\t\t{\r\n\t\t\t\ttextObj.innerHTML = xmlhttp.responseText;\r\n\t\t\t}\r\n\t\t}\r\n\t\txmlhttp.send(null);\r\n\t}\r\n}";
                }
            }

            private static string DocBrowse
            {
                get
                {
                    return "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\r\n   \"http://www.w3.org/TR/html4/loose.dtd\"><html><head><META http-equiv='Content-Type' content='text/html; charset=utf-8'>\r\n<link rel='stylesheet' type='text/css' href='/ACT.css'>\r\n<script src='/ACT.js' type='text/javascript'></script>\r\n<title>Browse</title></head>\r\n<body onload=\"ActNav('','','','','','')\"><hr>\r\n<div id='bodyText'>Loading...</div>\r\n<hr></body></html>";
                }
            }

            private static string DocCss
            {
                get
                {
                    return "body { background-color: #000000; color: #ffffff; }\r\na:active { text-decoration: none; color: #ff7777; background: none; }\r\na:link { text-decoration: none; color: #bbbbff; background: none; }\r\na:visited { text-decoration: none; color: #eebbff; background: none; }\r\na:hover { text-decoration: underline; color: #9999ff; background: none; }\r\n.smallerText { font-size: smaller; }";
                }
            }

            private static string DocCurrentEnc
            {
                get
                {
                    return "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\r\n   \"http://www.w3.org/TR/html4/loose.dtd\"><html><head><META http-equiv='Content-Type' content='text/html; charset=utf-8'>\r\n<link rel='stylesheet' type='text/css' href='/ACT.css'>\r\n<script src='/ACT.js' type='text/javascript'></script>\r\n<script type='text/javascript'>\r\nsetInterval(\"SetText('current.body', 'bodyText')\", 5000);\r\n</script><title>Current Encounter</title></head>\r\n<body><hr><div id='bodyText'>Loading...</div><hr></body></html>";
                }
            }

            private static string DocCurrentMini
            {
                get
                {
                    StringBuilder builder = new StringBuilder();
                    for (int i = 0; i < ActGlobals.oFormActMain.TextExportFormats.Count; i++)
                    {
                        builder.AppendFormat("<a href=\"javascript:ActModeSwitch('bodyText','/mini.body','act-mini','{0}')\">#{1}&nbsp;({2})</a> | ", i, i + 1, ActGlobals.oFormActMain.TextExportFormats[i].Sorting);
                    }
                    if (builder.Length > 3)
                    {
                        builder.Length -= 3;
                    }
                    return string.Format("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\r\n   \"http://www.w3.org/TR/html4/loose.dtd\"><html><head><META http-equiv='Content-Type' content='text/html; charset=utf-8'>\r\n<link rel='stylesheet' type='text/css' href='/ACT.css'>\r\n<script src='/ACT.js' type='text/javascript'></script>\r\n<script type='text/javascript'>setInterval(\"ActModeSwitch('bodyText','/mini.body','act-mini','')\", 5000);</script>\r\n<title>Current Encounter</title></head>\r\n<body><div class='smallerText'><a href=\"javascript:ActCopyElement('bodyText')\">Copy All to Clipboard</a></div><div class='smallerText'>{0}</div><div class='smallerText' id='bodyText' title='-1'>Loading...</div></body></html>", builder.ToString());
                }
            }

            private string DocIndex
            {
                get
                {
                    StringBuilder builder = new StringBuilder();
                    foreach (WebIndexLink link in ActGlobals.oFormActMain.WebIndexLinks)
                    {
                        builder.AppendFormat("<li><a href='{0}'>{1}</a> - <span class='smallerText'>{2}</span></li>\r\n", link.Url, link.LinkLabel, link.LinkDescription);
                    }
                    return string.Format("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\r\n   \"http://www.w3.org/TR/html4/loose.dtd\"><html><head><META http-equiv='Content-Type' content='text/html; charset=utf-8'>\r\n<link rel='stylesheet' type='text/css' href='/ACT.css'>\r\n<title>{1}'s ACT Web Interface</title></head><body><hr><h2>{1}'s ACT Web Interface</h2><ul>{0}</ul><hr><div class='smallerText'><i>\r\nIt is recommended to use this interface with a <a href='/browseruidownload'>minimalistic browser UI</a>.</i></div><hr></body></html>", builder.ToString(), ActGlobals.charName);
                }
            }

            private static string DocTimers
            {
                get
                {
                    return "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\r\n   \"http://www.w3.org/TR/html4/loose.dtd\"><html><head>\r\n<META http-equiv='Content-Type' content='text/html; charset=utf-8'>\r\n<link rel='stylesheet' type='text/css' href='/ACT.css'>\r\n<script src='/ACT.js' type='text/javascript'></script>\r\n<script type='text/javascript'>\r\nsetInterval(\"ActModeSwitch('bodyText','/timers.body','act-timers','')\", 2000);\r\n</script><title>Spell Timers</title></head>\r\n<body><hr><div id='bodyText' class='smallerText' title='1'>Loading...</div><hr>\r\n<div class='smallerText'><a href=\"javascript:ActModeSwitch('bodyText','/timers.body','act-timers','0')\">Simple View</a> | \r\n<a href=\"javascript:ActModeSwitch('bodyText','/timers.body','act-timers','1')\">Normal View</a></div></body></html>";
                }
            }

            private static string DocUIDownload
            {
                get
                {
                    return "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\r\n   \"http://www.w3.org/TR/html4/loose.dtd\"><html><head>\r\n<META http-equiv='Content-Type' content='text/html; charset=utf-8'><link rel='stylesheet' type='text/css' href='/ACT.css'>\r\n<title>Get a minimal screenspace browser UI</title></head>\r\n<body><hr>A while ago I made a browser replacement UI for ACT's HTML exports which I released on EQ2Interface.  Especially useful are the collapseable URL controls and the ability to resize the window freely.<hr><br>\r\n<img src='http://www.eq2interface.com/downloads/full5285.jpg'><br><hr>You can get the download from the following URL (I suggest copying the URL as EQ2 will not download files):<br><br>\r\nhttp://www.eq2interface.com/downloads/info4523-FullWindowBrowser.html<br><i>Ctrl-C the highlighted URL</i></body></html>";
                }
            }

            public static int IncomingBytes
            {
                get
                {
                    return incomingBytes;
                }
            }

            public static int LastClients
            {
                get
                {
                    return lastClients;
                }
            }

            public static float LastIncomingKBps
            {
                get
                {
                    return lastIncomingKBps;
                }
            }

            public static List<string> LastIPs
            {
                get
                {
                    return lastIPs;
                }
            }

            public static float LastOutgoingKBps
            {
                get
                {
                    return lastOutgoingKBps;
                }
            }

            public static int OutgoingBytes
            {
                get
                {
                    return outgoingBytes;
                }
            }

            public static int TotalClients
            {
                get
                {
                    return uniqueClients.Count;
                }
            }

            public static List<string> TotalIPs
            {
                get
                {
                    List<string> list = new List<string>();
                    foreach (string str in uniqueClients.Keys)
                    {
                        list.Add(str);
                    }
                    return list;
                }
            }
        }

        public delegate Bitmap AttackTypeGraphGenerator(AttackType AttackTypeSource, int SizeX, int SizeY, string Sorting);

        public delegate Bitmap CombatantGraphGenerator(CombatantData CombatantSource, int SizeX, int SizeY);

        public delegate Bitmap DamageTypeGraphGenerator(DamageTypeData DamageTypeSource, int SizeX, int SizeY, string Sorting);

        public delegate DateTime DateTimeLogParser(string logLine);

        public delegate Bitmap EncounterGraphGenerator(EncounterData EncounterSource, int SizeX, int SizeY, string Sorting);

        internal class ListViewItemComparer : IComparer
        {
            private bool asc;
            private int col;

            public ListViewItemComparer(int column, bool ascending)
            {
                this.col = column;
                this.asc = ascending;
            }

            public int Compare(object x, object y)
            {
                int num;
                ListViewItem item = (ListViewItem) x;
                ListViewItem item2 = (ListViewItem) y;
                if (this.asc)
                {
                    try
                    {
                        return double.Parse(item.SubItems[this.col].Text).CompareTo(double.Parse(item2.SubItems[this.col].Text));
                    }
                    catch
                    {
                        try
                        {
                            return string.Compare(item.SubItems[this.col].Text, item2.SubItems[this.col].Text);
                        }
                        catch
                        {
                            return 0;
                        }
                    }
                }
                try
                {
                    num = double.Parse(item2.SubItems[this.col].Text).CompareTo(double.Parse(item.SubItems[this.col].Text));
                }
                catch
                {
                    try
                    {
                        num = string.Compare(item2.SubItems[this.col].Text, item.SubItems[this.col].Text);
                    }
                    catch
                    {
                        num = 0;
                    }
                }
                return num;
            }

            public bool Ascending
            {
                get
                {
                    return this.asc;
                }
            }

            public int Column
            {
                get
                {
                    return this.col;
                }
            }
        }

        public delegate void NullDelegate();

        private class OldSearchHighlight
        {
            public Control controlToSave;
            public System.Drawing.Color originalForeColor;

            public OldSearchHighlight(Control ControlToSave, System.Drawing.Color OriginalForeColor)
            {
                this.controlToSave = ControlToSave;
                this.originalForeColor = OriginalForeColor;
            }
        }

        private delegate void PlaySoundCallback(string WavFilePath, int VolumePercent);

        public delegate void PlaySoundDelegate(string WavFilePath, int VolumePercent);

        [StructLayout(LayoutKind.Sequential)]
        internal struct ProcDef
        {
            private string desc;
            private IntPtr procMap;
            public string Description
            {
                get
                {
                    return this.desc;
                }
                set
                {
                    this.desc = value;
                }
            }
            public IntPtr ProcBitfield
            {
                get
                {
                    return this.procMap;
                }
                set
                {
                    this.procMap = value;
                }
            }
            public ProcDef(string Description, IntPtr ProcMap)
            {
                this.desc = Description;
                this.procMap = ProcMap;
            }

            public override string ToString()
            {
                return string.Format("({1}) {0}", this.desc, this.procMap);
            }
        }

        internal class RedirectFix : IEquatable<FormActMain.RedirectFix>
        {
            private string ability;
            private bool active = true;
            private string destination;
            private int type;

            public RedirectFix(string Ability, string DestinationCombatant, int Type)
            {
                this.ability = Ability;
                this.destination = DestinationCombatant;
                this.type = Type;
            }

            public bool Equals(FormActMain.RedirectFix other)
            {
                return this.ToString().Equals(other.ToString());
            }

            public bool Fix(CombatActionEventArgs e)
            {
                if (this.IsMatch(e))
                {
                    e.attacker = this.destination;
                    return true;
                }
                return false;
            }

            public bool IsMatch(CombatActionEventArgs e)
            {
                bool flag = true;
                if (e.theAttackType != this.ability)
                {
                    flag = false;
                }
                switch (this.type)
                {
                    case 1:
                        if (!CombatantData.DamageSwingTypes.Contains(e.swingType))
                        {
                            flag = false;
                        }
                        return flag;

                    case 2:
                        if (!CombatantData.HealingSwingTypes.Contains(e.swingType))
                        {
                            flag = false;
                        }
                        return flag;

                    case 3:
                        if (CombatantData.DamageSwingTypes.Contains(e.swingType))
                        {
                            flag = false;
                        }
                        if (CombatantData.HealingSwingTypes.Contains(e.swingType))
                        {
                            flag = false;
                        }
                        return flag;
                }
                return flag;
            }

            public override string ToString()
            {
                return string.Format("* ({0}) -> {1} ({0})", this.ability, this.destination);
            }

            public string Ability
            {
                get
                {
                    return this.ability;
                }
                set
                {
                    this.ability = value;
                }
            }

            public bool Active
            {
                get
                {
                    return this.active;
                }
                set
                {
                    this.active = value;
                }
            }

            public string DestinationCombatant
            {
                get
                {
                    return this.destination;
                }
                set
                {
                    this.destination = value;
                }
            }

            public int Type
            {
                get
                {
                    return this.type;
                }
                set
                {
                    this.type = value;
                }
            }
        }

        internal class RenameFix : IEquatable<FormActMain.RenameFix>
        {
            private bool active = true;
            private string after;
            private string before;

            public RenameFix(string Before, string After)
            {
                this.before = Before;
                this.after = After;
            }

            public bool Equals(FormActMain.RenameFix other)
            {
                return this.ToString().Equals(other.ToString());
            }

            public bool Fix(CombatActionEventArgs e)
            {
                if (!this.active)
                {
                    return false;
                }
                bool flag = false;
                if (e.attacker == this.before)
                {
                    e.attacker = this.after;
                    flag = true;
                }
                if (e.victim == this.before)
                {
                    e.victim = this.after;
                    flag = true;
                }
                return flag;
            }

            public bool IsMatch(CombatActionEventArgs e)
            {
                return ((e.attacker == this.before) || (e.victim == this.before));
            }

            public override string ToString()
            {
                return (this.before + " -> " + this.after);
            }

            public bool Active
            {
                get
                {
                    return this.active;
                }
                set
                {
                    this.active = value;
                }
            }

            public string After
            {
                get
                {
                    return this.after;
                }
                set
                {
                    this.after = value;
                }
            }

            public string Before
            {
                get
                {
                    return this.before;
                }
                set
                {
                    this.before = value;
                }
            }
        }

        private class WMPWrapper
        {
            private WindowsMediaPlayer wmp = ((WindowsMediaPlayer) Activator.CreateInstance(System.Type.GetTypeFromCLSID(new Guid("6BF52A52-394A-11D3-B153-00C04F79FAA6"))));

            public WMPWrapper(string WavPath, int VolumePercent)
            {
                this.wmp.settings.autoStart = false;
                this.wmp.settings.volume = VolumePercent;
                this.wmp.URL = WavPath;
                new ComAwareEventInfo(typeof(_WMPOCXEvents_Event), "PlayStateChange").AddEventHandler(this.wmp, new _WMPOCXEvents_PlayStateChangeEventHandler(this.wmp_PlayStateChange));
            }

            public void Play()
            {
                this.wmp.controls.play();
            }

            private void wmp_PlayStateChange(int NewState)
            {
                if (NewState == 1)
                {
                    this.wmp.close();
                }
            }
        }
    }
}

